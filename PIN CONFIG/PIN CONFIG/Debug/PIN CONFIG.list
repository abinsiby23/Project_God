
PIN CONFIG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e98  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080090ec  080090ec  0000a0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800912c  0800912c  0000b00c  2**0
                  CONTENTS
  4 .ARM          00000008  0800912c  0800912c  0000a12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009134  08009134  0000b00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009134  08009134  0000a134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009138  08009138  0000a138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800913c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000990  2000000c  08009148  0000b00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000099c  08009148  0000b99c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000b00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e118  00000000  00000000  0000b042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003abb  00000000  00000000  0002915a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a38  00000000  00000000  0002cc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001446  00000000  00000000  0002e650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eae3  00000000  00000000  0002fa96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022c84  00000000  00000000  0005e579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011dc76  00000000  00000000  000811fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019ee73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070c4  00000000  00000000  0019eeb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001a5f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000000c 	.word	0x2000000c
 8000270:	00000000 	.word	0x00000000
 8000274:	080090d4 	.word	0x080090d4

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000010 	.word	0x20000010
 8000290:	080090d4 	.word	0x080090d4

08000294 <__aeabi_uldivmod>:
 8000294:	b953      	cbnz	r3, 80002ac <__aeabi_uldivmod+0x18>
 8000296:	b94a      	cbnz	r2, 80002ac <__aeabi_uldivmod+0x18>
 8000298:	2900      	cmp	r1, #0
 800029a:	bf08      	it	eq
 800029c:	2800      	cmpeq	r0, #0
 800029e:	bf1c      	itt	ne
 80002a0:	f04f 31ff 	movne.w	r1, #4294967295
 80002a4:	f04f 30ff 	movne.w	r0, #4294967295
 80002a8:	f000 b97e 	b.w	80005a8 <__aeabi_idiv0>
 80002ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b4:	f000 f806 	bl	80002c4 <__udivmoddi4>
 80002b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c0:	b004      	add	sp, #16
 80002c2:	4770      	bx	lr

080002c4 <__udivmoddi4>:
 80002c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ca:	460c      	mov	r4, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14d      	bne.n	800036c <__udivmoddi4+0xa8>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	460f      	mov	r7, r1
 80002d4:	4684      	mov	ip, r0
 80002d6:	4696      	mov	lr, r2
 80002d8:	fab2 f382 	clz	r3, r2
 80002dc:	d960      	bls.n	80003a0 <__udivmoddi4+0xdc>
 80002de:	b14b      	cbz	r3, 80002f4 <__udivmoddi4+0x30>
 80002e0:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e4:	f1c3 0220 	rsb	r2, r3, #32
 80002e8:	409f      	lsls	r7, r3
 80002ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80002ee:	fa20 f202 	lsr.w	r2, r0, r2
 80002f2:	4317      	orrs	r7, r2
 80002f4:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f8:	fa1f f48e 	uxth.w	r4, lr
 80002fc:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000300:	fbb7 f1f6 	udiv	r1, r7, r6
 8000304:	fb06 7711 	mls	r7, r6, r1, r7
 8000308:	fb01 f004 	mul.w	r0, r1, r4
 800030c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000310:	4290      	cmp	r0, r2
 8000312:	d908      	bls.n	8000326 <__udivmoddi4+0x62>
 8000314:	eb1e 0202 	adds.w	r2, lr, r2
 8000318:	f101 37ff 	add.w	r7, r1, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x60>
 800031e:	4290      	cmp	r0, r2
 8000320:	f200 812d 	bhi.w	800057e <__udivmoddi4+0x2ba>
 8000324:	4639      	mov	r1, r7
 8000326:	1a12      	subs	r2, r2, r0
 8000328:	fa1f fc8c 	uxth.w	ip, ip
 800032c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000330:	fb06 2210 	mls	r2, r6, r0, r2
 8000334:	fb00 f404 	mul.w	r4, r0, r4
 8000338:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800033c:	4564      	cmp	r4, ip
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x8e>
 8000340:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x8c>
 800034a:	4564      	cmp	r4, ip
 800034c:	f200 811a 	bhi.w	8000584 <__udivmoddi4+0x2c0>
 8000350:	4610      	mov	r0, r2
 8000352:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000356:	ebac 0c04 	sub.w	ip, ip, r4
 800035a:	2100      	movs	r1, #0
 800035c:	b125      	cbz	r5, 8000368 <__udivmoddi4+0xa4>
 800035e:	fa2c f303 	lsr.w	r3, ip, r3
 8000362:	2200      	movs	r2, #0
 8000364:	e9c5 3200 	strd	r3, r2, [r5]
 8000368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036c:	428b      	cmp	r3, r1
 800036e:	d905      	bls.n	800037c <__udivmoddi4+0xb8>
 8000370:	b10d      	cbz	r5, 8000376 <__udivmoddi4+0xb2>
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	2100      	movs	r1, #0
 8000378:	4608      	mov	r0, r1
 800037a:	e7f5      	b.n	8000368 <__udivmoddi4+0xa4>
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d14d      	bne.n	8000420 <__udivmoddi4+0x15c>
 8000384:	42a3      	cmp	r3, r4
 8000386:	f0c0 80f2 	bcc.w	800056e <__udivmoddi4+0x2aa>
 800038a:	4290      	cmp	r0, r2
 800038c:	f080 80ef 	bcs.w	800056e <__udivmoddi4+0x2aa>
 8000390:	4606      	mov	r6, r0
 8000392:	4623      	mov	r3, r4
 8000394:	4608      	mov	r0, r1
 8000396:	2d00      	cmp	r5, #0
 8000398:	d0e6      	beq.n	8000368 <__udivmoddi4+0xa4>
 800039a:	e9c5 6300 	strd	r6, r3, [r5]
 800039e:	e7e3      	b.n	8000368 <__udivmoddi4+0xa4>
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	f040 80a2 	bne.w	80004ea <__udivmoddi4+0x226>
 80003a6:	1a8a      	subs	r2, r1, r2
 80003a8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003ac:	fa1f f68e 	uxth.w	r6, lr
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003b6:	fb07 2014 	mls	r0, r7, r4, r2
 80003ba:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c2:	fb06 f004 	mul.w	r0, r6, r4
 80003c6:	4290      	cmp	r0, r2
 80003c8:	d90f      	bls.n	80003ea <__udivmoddi4+0x126>
 80003ca:	eb1e 0202 	adds.w	r2, lr, r2
 80003ce:	f104 38ff 	add.w	r8, r4, #4294967295
 80003d2:	bf2c      	ite	cs
 80003d4:	f04f 0901 	movcs.w	r9, #1
 80003d8:	f04f 0900 	movcc.w	r9, #0
 80003dc:	4290      	cmp	r0, r2
 80003de:	d903      	bls.n	80003e8 <__udivmoddi4+0x124>
 80003e0:	f1b9 0f00 	cmp.w	r9, #0
 80003e4:	f000 80c8 	beq.w	8000578 <__udivmoddi4+0x2b4>
 80003e8:	4644      	mov	r4, r8
 80003ea:	1a12      	subs	r2, r2, r0
 80003ec:	fa1f fc8c 	uxth.w	ip, ip
 80003f0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f4:	fb07 2210 	mls	r2, r7, r0, r2
 80003f8:	fb00 f606 	mul.w	r6, r0, r6
 80003fc:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000400:	4566      	cmp	r6, ip
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x152>
 8000404:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000408:	f100 32ff 	add.w	r2, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x150>
 800040e:	4566      	cmp	r6, ip
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2c6>
 8000414:	4610      	mov	r0, r2
 8000416:	ebac 0c06 	sub.w	ip, ip, r6
 800041a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041e:	e79d      	b.n	800035c <__udivmoddi4+0x98>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa04 fe01 	lsl.w	lr, r4, r1
 800042a:	fa22 f706 	lsr.w	r7, r2, r6
 800042e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000432:	40f4      	lsrs	r4, r6
 8000434:	408a      	lsls	r2, r1
 8000436:	431f      	orrs	r7, r3
 8000438:	ea4e 030c 	orr.w	r3, lr, ip
 800043c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000440:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000444:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000450:	fb08 4410 	mls	r4, r8, r0, r4
 8000454:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000458:	fb00 f90c 	mul.w	r9, r0, ip
 800045c:	45a1      	cmp	r9, r4
 800045e:	d90e      	bls.n	800047e <__udivmoddi4+0x1ba>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f100 3aff 	add.w	sl, r0, #4294967295
 8000466:	bf2c      	ite	cs
 8000468:	f04f 0b01 	movcs.w	fp, #1
 800046c:	f04f 0b00 	movcc.w	fp, #0
 8000470:	45a1      	cmp	r9, r4
 8000472:	d903      	bls.n	800047c <__udivmoddi4+0x1b8>
 8000474:	f1bb 0f00 	cmp.w	fp, #0
 8000478:	f000 8093 	beq.w	80005a2 <__udivmoddi4+0x2de>
 800047c:	4650      	mov	r0, sl
 800047e:	eba4 0409 	sub.w	r4, r4, r9
 8000482:	fa1f f983 	uxth.w	r9, r3
 8000486:	fbb4 f3f8 	udiv	r3, r4, r8
 800048a:	fb08 4413 	mls	r4, r8, r3, r4
 800048e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000492:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000496:	45a4      	cmp	ip, r4
 8000498:	d906      	bls.n	80004a8 <__udivmoddi4+0x1e4>
 800049a:	193c      	adds	r4, r7, r4
 800049c:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a0:	d201      	bcs.n	80004a6 <__udivmoddi4+0x1e2>
 80004a2:	45a4      	cmp	ip, r4
 80004a4:	d87a      	bhi.n	800059c <__udivmoddi4+0x2d8>
 80004a6:	4643      	mov	r3, r8
 80004a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004ac:	eba4 040c 	sub.w	r4, r4, ip
 80004b0:	fba0 9802 	umull	r9, r8, r0, r2
 80004b4:	4544      	cmp	r4, r8
 80004b6:	46cc      	mov	ip, r9
 80004b8:	4643      	mov	r3, r8
 80004ba:	d302      	bcc.n	80004c2 <__udivmoddi4+0x1fe>
 80004bc:	d106      	bne.n	80004cc <__udivmoddi4+0x208>
 80004be:	45ce      	cmp	lr, r9
 80004c0:	d204      	bcs.n	80004cc <__udivmoddi4+0x208>
 80004c2:	3801      	subs	r0, #1
 80004c4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c8:	eb68 0307 	sbc.w	r3, r8, r7
 80004cc:	b15d      	cbz	r5, 80004e6 <__udivmoddi4+0x222>
 80004ce:	ebbe 020c 	subs.w	r2, lr, ip
 80004d2:	eb64 0403 	sbc.w	r4, r4, r3
 80004d6:	fa04 f606 	lsl.w	r6, r4, r6
 80004da:	fa22 f301 	lsr.w	r3, r2, r1
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	431e      	orrs	r6, r3
 80004e2:	e9c5 6400 	strd	r6, r4, [r5]
 80004e6:	2100      	movs	r1, #0
 80004e8:	e73e      	b.n	8000368 <__udivmoddi4+0xa4>
 80004ea:	fa02 fe03 	lsl.w	lr, r2, r3
 80004ee:	f1c3 0120 	rsb	r1, r3, #32
 80004f2:	fa04 f203 	lsl.w	r2, r4, r3
 80004f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000500:	fa20 f101 	lsr.w	r1, r0, r1
 8000504:	fa1f f68e 	uxth.w	r6, lr
 8000508:	fbb4 f0f7 	udiv	r0, r4, r7
 800050c:	430a      	orrs	r2, r1
 800050e:	fb07 4410 	mls	r4, r7, r0, r4
 8000512:	0c11      	lsrs	r1, r2, #16
 8000514:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000518:	fb00 f406 	mul.w	r4, r0, r6
 800051c:	428c      	cmp	r4, r1
 800051e:	d90e      	bls.n	800053e <__udivmoddi4+0x27a>
 8000520:	eb1e 0101 	adds.w	r1, lr, r1
 8000524:	f100 38ff 	add.w	r8, r0, #4294967295
 8000528:	bf2c      	ite	cs
 800052a:	f04f 0901 	movcs.w	r9, #1
 800052e:	f04f 0900 	movcc.w	r9, #0
 8000532:	428c      	cmp	r4, r1
 8000534:	d902      	bls.n	800053c <__udivmoddi4+0x278>
 8000536:	f1b9 0f00 	cmp.w	r9, #0
 800053a:	d02c      	beq.n	8000596 <__udivmoddi4+0x2d2>
 800053c:	4640      	mov	r0, r8
 800053e:	1b09      	subs	r1, r1, r4
 8000540:	b292      	uxth	r2, r2
 8000542:	fbb1 f4f7 	udiv	r4, r1, r7
 8000546:	fb07 1114 	mls	r1, r7, r4, r1
 800054a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054e:	fb04 f106 	mul.w	r1, r4, r6
 8000552:	4291      	cmp	r1, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x2a2>
 8000556:	eb1e 0202 	adds.w	r2, lr, r2
 800055a:	f104 38ff 	add.w	r8, r4, #4294967295
 800055e:	d201      	bcs.n	8000564 <__udivmoddi4+0x2a0>
 8000560:	4291      	cmp	r1, r2
 8000562:	d815      	bhi.n	8000590 <__udivmoddi4+0x2cc>
 8000564:	4644      	mov	r4, r8
 8000566:	1a52      	subs	r2, r2, r1
 8000568:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800056c:	e721      	b.n	80003b2 <__udivmoddi4+0xee>
 800056e:	1a86      	subs	r6, r0, r2
 8000570:	eb64 0303 	sbc.w	r3, r4, r3
 8000574:	2001      	movs	r0, #1
 8000576:	e70e      	b.n	8000396 <__udivmoddi4+0xd2>
 8000578:	3c02      	subs	r4, #2
 800057a:	4472      	add	r2, lr
 800057c:	e735      	b.n	80003ea <__udivmoddi4+0x126>
 800057e:	3902      	subs	r1, #2
 8000580:	4472      	add	r2, lr
 8000582:	e6d0      	b.n	8000326 <__udivmoddi4+0x62>
 8000584:	44f4      	add	ip, lr
 8000586:	3802      	subs	r0, #2
 8000588:	e6e3      	b.n	8000352 <__udivmoddi4+0x8e>
 800058a:	44f4      	add	ip, lr
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x152>
 8000590:	3c02      	subs	r4, #2
 8000592:	4472      	add	r2, lr
 8000594:	e7e7      	b.n	8000566 <__udivmoddi4+0x2a2>
 8000596:	3802      	subs	r0, #2
 8000598:	4471      	add	r1, lr
 800059a:	e7d0      	b.n	800053e <__udivmoddi4+0x27a>
 800059c:	3b02      	subs	r3, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e782      	b.n	80004a8 <__udivmoddi4+0x1e4>
 80005a2:	3802      	subs	r0, #2
 80005a4:	443c      	add	r4, r7
 80005a6:	e76a      	b.n	800047e <__udivmoddi4+0x1ba>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f001 f912 	bl	80017d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f820 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 fb58 	bl	8000c6c <MX_GPIO_Init>
  MX_DCACHE1_Init();
 80005bc:	f000 f898 	bl	80006f0 <MX_DCACHE1_Init>
  MX_FLASH_Init();
 80005c0:	f000 f8ac 	bl	800071c <MX_FLASH_Init>
  MX_I2C1_Init();
 80005c4:	f000 f8bc 	bl	8000740 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005c8:	f000 f8fa 	bl	80007c0 <MX_I2C2_Init>
  MX_I2S1_Init();
 80005cc:	f000 f938 	bl	8000840 <MX_I2S1_Init>
  MX_IWDG_Init();
 80005d0:	f000 f974 	bl	80008bc <MX_IWDG_Init>
  MX_SDMMC1_MMC_Init();
 80005d4:	f000 f994 	bl	8000900 <MX_SDMMC1_MMC_Init>
  MX_SPI2_Init();
 80005d8:	f000 f9b6 	bl	8000948 <MX_SPI2_Init>
  MX_SPI3_Init();
 80005dc:	f000 fa0a 	bl	80009f4 <MX_SPI3_Init>
  MX_UART4_Init();
 80005e0:	f000 fa5e 	bl	8000aa0 <MX_UART4_Init>
  MX_USART3_UART_Init();
 80005e4:	f000 faa8 	bl	8000b38 <MX_USART3_UART_Init>
  MX_USB_HCD_Init();
 80005e8:	f000 faf2 	bl	8000bd0 <MX_USB_HCD_Init>
  MX_WWDG_Init();
 80005ec:	f000 fb1e 	bl	8000c2c <MX_WWDG_Init>
  MX_ICACHE_Init();
 80005f0:	f000 f958 	bl	80008a4 <MX_ICACHE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <main+0x48>

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b09c      	sub	sp, #112	@ 0x70
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2250      	movs	r2, #80	@ 0x50
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f008 fd38 	bl	800907c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
 800061c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800061e:	4b32      	ldr	r3, [pc, #200]	@ (80006e8 <SystemClock_Config+0xf0>)
 8000620:	691b      	ldr	r3, [r3, #16]
 8000622:	4a31      	ldr	r2, [pc, #196]	@ (80006e8 <SystemClock_Config+0xf0>)
 8000624:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000628:	6113      	str	r3, [r2, #16]
 800062a:	4b2f      	ldr	r3, [pc, #188]	@ (80006e8 <SystemClock_Config+0xf0>)
 800062c:	691b      	ldr	r3, [r3, #16]
 800062e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000636:	bf00      	nop
 8000638:	4b2b      	ldr	r3, [pc, #172]	@ (80006e8 <SystemClock_Config+0xf0>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	f003 0308 	and.w	r3, r3, #8
 8000640:	2b08      	cmp	r3, #8
 8000642:	d1f9      	bne.n	8000638 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000644:	233a      	movs	r3, #58	@ 0x3a
 8000646:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_CSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 800064c:	2308      	movs	r3, #8
 800064e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2340      	movs	r3, #64	@ 0x40
 8000652:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000654:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000658:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800065a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800065e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000660:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000664:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000666:	2320      	movs	r3, #32
 8000668:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 800066e:	2302      	movs	r3, #2
 8000670:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000672:	2301      	movs	r3, #1
 8000674:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000676:	2320      	movs	r3, #32
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800067a:	2302      	movs	r3, #2
 800067c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800067e:	2302      	movs	r3, #2
 8000680:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000682:	2302      	movs	r3, #2
 8000684:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000686:	2308      	movs	r3, #8
 8000688:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800068a:	2300      	movs	r3, #0
 800068c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	4618      	mov	r0, r3
 8000698:	f003 f80a 	bl	80036b0 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006a2:	f000 fb8d 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	231f      	movs	r3, #31
 80006a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	2101      	movs	r1, #1
 80006c4:	4618      	mov	r0, r3
 80006c6:	f003 fc2b 	bl	8003f20 <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80006d0:	f000 fb76 	bl	8000dc0 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 80006d4:	4b05      	ldr	r3, [pc, #20]	@ (80006ec <SystemClock_Config+0xf4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a04      	ldr	r2, [pc, #16]	@ (80006ec <SystemClock_Config+0xf4>)
 80006da:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	bf00      	nop
 80006e2:	3770      	adds	r7, #112	@ 0x70
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	44020800 	.word	0x44020800
 80006ec:	40022000 	.word	0x40022000

080006f0 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 80006f4:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <MX_DCACHE1_Init+0x24>)
 80006f6:	4a08      	ldr	r2, [pc, #32]	@ (8000718 <MX_DCACHE1_Init+0x28>)
 80006f8:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_DCACHE1_Init+0x24>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <MX_DCACHE1_Init+0x24>)
 8000702:	f001 faaf 	bl	8001c64 <HAL_DCACHE_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 800070c:	f000 fb58 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000028 	.word	0x20000028
 8000718:	40031400 	.word	0x40031400

0800071c <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 8000720:	f001 fb4c 	bl	8001dbc <HAL_FLASH_Unlock>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_FLASH_Init+0x12>
  {
    Error_Handler();
 800072a:	f000 fb49 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 800072e:	f001 fb6b 	bl	8001e08 <HAL_FLASH_Lock>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 8000738:	f000 fb42 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}

08000740 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000744:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <MX_I2C1_Init+0x74>)
 8000746:	4a1c      	ldr	r2, [pc, #112]	@ (80007b8 <MX_I2C1_Init+0x78>)
 8000748:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800074a:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <MX_I2C1_Init+0x74>)
 800074c:	4a1b      	ldr	r2, [pc, #108]	@ (80007bc <MX_I2C1_Init+0x7c>)
 800074e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000750:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <MX_I2C1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000756:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <MX_I2C1_Init+0x74>)
 8000758:	2201      	movs	r2, #1
 800075a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800075c:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <MX_I2C1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000762:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <MX_I2C1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <MX_I2C1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076e:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_I2C1_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000774:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MX_I2C1_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800077a:	480e      	ldr	r0, [pc, #56]	@ (80007b4 <MX_I2C1_Init+0x74>)
 800077c:	f001 fd4a 	bl	8002214 <HAL_I2C_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000786:	f000 fb1b 	bl	8000dc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800078a:	2100      	movs	r1, #0
 800078c:	4809      	ldr	r0, [pc, #36]	@ (80007b4 <MX_I2C1_Init+0x74>)
 800078e:	f001 fddc 	bl	800234a <HAL_I2CEx_ConfigAnalogFilter>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000798:	f000 fb12 	bl	8000dc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800079c:	2100      	movs	r1, #0
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_I2C1_Init+0x74>)
 80007a0:	f001 fe1e 	bl	80023e0 <HAL_I2CEx_ConfigDigitalFilter>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007aa:	f000 fb09 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000054 	.word	0x20000054
 80007b8:	40005400 	.word	0x40005400
 80007bc:	00707cbb 	.word	0x00707cbb

080007c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <MX_I2C2_Init+0x74>)
 80007c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000838 <MX_I2C2_Init+0x78>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_I2C2_Init+0x74>)
 80007cc:	4a1b      	ldr	r2, [pc, #108]	@ (800083c <MX_I2C2_Init+0x7c>)
 80007ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007d0:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <MX_I2C2_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d6:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_I2C2_Init+0x74>)
 80007d8:	2201      	movs	r2, #1
 80007da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007dc:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <MX_I2C2_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007e2:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_I2C2_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <MX_I2C2_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ee:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_I2C2_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_I2C2_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007fa:	480e      	ldr	r0, [pc, #56]	@ (8000834 <MX_I2C2_Init+0x74>)
 80007fc:	f001 fd0a 	bl	8002214 <HAL_I2C_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000806:	f000 fadb 	bl	8000dc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080a:	2100      	movs	r1, #0
 800080c:	4809      	ldr	r0, [pc, #36]	@ (8000834 <MX_I2C2_Init+0x74>)
 800080e:	f001 fd9c 	bl	800234a <HAL_I2CEx_ConfigAnalogFilter>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000818:	f000 fad2 	bl	8000dc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800081c:	2100      	movs	r1, #0
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_I2C2_Init+0x74>)
 8000820:	f001 fdde 	bl	80023e0 <HAL_I2CEx_ConfigDigitalFilter>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800082a:	f000 fac9 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000a8 	.word	0x200000a8
 8000838:	40005800 	.word	0x40005800
 800083c:	00707cbb 	.word	0x00707cbb

08000840 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000844:	4b15      	ldr	r3, [pc, #84]	@ (800089c <MX_I2S1_Init+0x5c>)
 8000846:	4a16      	ldr	r2, [pc, #88]	@ (80008a0 <MX_I2S1_Init+0x60>)
 8000848:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 800084a:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_I2S1_Init+0x5c>)
 800084c:	220a      	movs	r2, #10
 800084e:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <MX_I2S1_Init+0x5c>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_I2S1_Init+0x5c>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_I2S1_Init+0x5c>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_I2S1_Init+0x5c>)
 8000864:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000868:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800086a:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_I2S1_Init+0x5c>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000870:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <MX_I2S1_Init+0x5c>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_I2S1_Init+0x5c>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 800087c:	4b07      	ldr	r3, [pc, #28]	@ (800089c <MX_I2S1_Init+0x5c>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_I2S1_Init+0x5c>)
 8000884:	2200      	movs	r2, #0
 8000886:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	@ (800089c <MX_I2S1_Init+0x5c>)
 800088a:	f001 fdf5 	bl	8002478 <HAL_I2S_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2S1_Init+0x58>
  {
    Error_Handler();
 8000894:	f000 fa94 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000fc 	.word	0x200000fc
 80008a0:	40013000 	.word	0x40013000

080008a4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80008a8:	f001 ff26 	bl	80026f8 <HAL_ICACHE_Enable>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80008b2:	f000 fa85 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <MX_IWDG_Init+0x3c>)
 80008c2:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <MX_IWDG_Init+0x40>)
 80008c4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <MX_IWDG_Init+0x3c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	@ (80008f8 <MX_IWDG_Init+0x3c>)
 80008ce:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80008d2:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80008d4:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <MX_IWDG_Init+0x3c>)
 80008d6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80008da:	609a      	str	r2, [r3, #8]
  hiwdg.Init.EWI = 0;
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <MX_IWDG_Init+0x3c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <MX_IWDG_Init+0x3c>)
 80008e4:	f001 ff18 	bl	8002718 <HAL_IWDG_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_IWDG_Init+0x36>
  {
    Error_Handler();
 80008ee:	f000 fa67 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000150 	.word	0x20000150
 80008fc:	40003000 	.word	0x40003000

08000900 <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 8000904:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <MX_SDMMC1_MMC_Init+0x40>)
 8000906:	4a0f      	ldr	r2, [pc, #60]	@ (8000944 <MX_SDMMC1_MMC_Init+0x44>)
 8000908:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800090a:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <MX_SDMMC1_MMC_Init+0x40>)
 800090c:	2200      	movs	r2, #0
 800090e:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000910:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <MX_SDMMC1_MMC_Init+0x40>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_8B;
 8000916:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <MX_SDMMC1_MMC_Init+0x40>)
 8000918:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800091c:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800091e:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <MX_SDMMC1_MMC_Init+0x40>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 0;
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <MX_SDMMC1_MMC_Init+0x40>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	@ (8000940 <MX_SDMMC1_MMC_Init+0x40>)
 800092c:	f001 ff7c 	bl	8002828 <HAL_MMC_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_SDMMC1_MMC_Init+0x3a>
  {
    Error_Handler();
 8000936:	f000 fa43 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000164 	.word	0x20000164
 8000944:	46008000 	.word	0x46008000

08000948 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800094c:	4b27      	ldr	r3, [pc, #156]	@ (80009ec <MX_SPI2_Init+0xa4>)
 800094e:	4a28      	ldr	r2, [pc, #160]	@ (80009f0 <MX_SPI2_Init+0xa8>)
 8000950:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000952:	4b26      	ldr	r3, [pc, #152]	@ (80009ec <MX_SPI2_Init+0xa4>)
 8000954:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000958:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800095a:	4b24      	ldr	r3, [pc, #144]	@ (80009ec <MX_SPI2_Init+0xa4>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000960:	4b22      	ldr	r3, [pc, #136]	@ (80009ec <MX_SPI2_Init+0xa4>)
 8000962:	2203      	movs	r2, #3
 8000964:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000966:	4b21      	ldr	r3, [pc, #132]	@ (80009ec <MX_SPI2_Init+0xa4>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096c:	4b1f      	ldr	r3, [pc, #124]	@ (80009ec <MX_SPI2_Init+0xa4>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000972:	4b1e      	ldr	r3, [pc, #120]	@ (80009ec <MX_SPI2_Init+0xa4>)
 8000974:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000978:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800097a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ec <MX_SPI2_Init+0xa4>)
 800097c:	2200      	movs	r2, #0
 800097e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000980:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <MX_SPI2_Init+0xa4>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000986:	4b19      	ldr	r3, [pc, #100]	@ (80009ec <MX_SPI2_Init+0xa4>)
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800098c:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <MX_SPI2_Init+0xa4>)
 800098e:	2200      	movs	r2, #0
 8000990:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000992:	4b16      	ldr	r3, [pc, #88]	@ (80009ec <MX_SPI2_Init+0xa4>)
 8000994:	2207      	movs	r2, #7
 8000996:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000998:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <MX_SPI2_Init+0xa4>)
 800099a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800099e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <MX_SPI2_Init+0xa4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_SPI2_Init+0xa4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <MX_SPI2_Init+0xa4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <MX_SPI2_Init+0xa4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <MX_SPI2_Init+0xa4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <MX_SPI2_Init+0xa4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009c4:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <MX_SPI2_Init+0xa4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80009ca:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <MX_SPI2_Init+0xa4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <MX_SPI2_Init+0xa4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	@ (80009ec <MX_SPI2_Init+0xa4>)
 80009d8:	f007 f862 	bl	8007aa0 <HAL_SPI_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 80009e2:	f000 f9ed 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200003d8 	.word	0x200003d8
 80009f0:	40003800 	.word	0x40003800

080009f4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009f8:	4b27      	ldr	r3, [pc, #156]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 80009fa:	4a28      	ldr	r2, [pc, #160]	@ (8000a9c <MX_SPI3_Init+0xa8>)
 80009fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009fe:	4b26      	ldr	r3, [pc, #152]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a00:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000a04:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a06:	4b24      	ldr	r3, [pc, #144]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a0c:	4b22      	ldr	r3, [pc, #136]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a0e:	2203      	movs	r2, #3
 8000a10:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a12:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a18:	4b1f      	ldr	r3, [pc, #124]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a20:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a24:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a26:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a32:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a38:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a40:	2207      	movs	r2, #7
 8000a42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a44:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a4a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a70:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000a76:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_SPI3_Init+0xa4>)
 8000a84:	f007 f80c 	bl	8007aa0 <HAL_SPI_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000a8e:	f000 f997 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000468 	.word	0x20000468
 8000a9c:	40003c00 	.word	0x40003c00

08000aa0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000aa4:	4b22      	ldr	r3, [pc, #136]	@ (8000b30 <MX_UART4_Init+0x90>)
 8000aa6:	4a23      	ldr	r2, [pc, #140]	@ (8000b34 <MX_UART4_Init+0x94>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	@ (8000b30 <MX_UART4_Init+0x90>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <MX_UART4_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b30 <MX_UART4_Init+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	@ (8000b30 <MX_UART4_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <MX_UART4_Init+0x90>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b19      	ldr	r3, [pc, #100]	@ (8000b30 <MX_UART4_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <MX_UART4_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad6:	4b16      	ldr	r3, [pc, #88]	@ (8000b30 <MX_UART4_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000adc:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <MX_UART4_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae2:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <MX_UART4_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ae8:	4811      	ldr	r0, [pc, #68]	@ (8000b30 <MX_UART4_Init+0x90>)
 8000aea:	f007 f920 	bl	8007d2e <HAL_UART_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000af4:	f000 f964 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af8:	2100      	movs	r1, #0
 8000afa:	480d      	ldr	r0, [pc, #52]	@ (8000b30 <MX_UART4_Init+0x90>)
 8000afc:	f007 fd6e 	bl	80085dc <HAL_UARTEx_SetTxFifoThreshold>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000b06:	f000 f95b 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4808      	ldr	r0, [pc, #32]	@ (8000b30 <MX_UART4_Init+0x90>)
 8000b0e:	f007 fda3 	bl	8008658 <HAL_UARTEx_SetRxFifoThreshold>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000b18:	f000 f952 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000b1c:	4804      	ldr	r0, [pc, #16]	@ (8000b30 <MX_UART4_Init+0x90>)
 8000b1e:	f007 fd24 	bl	800856a <HAL_UARTEx_DisableFifoMode>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000b28:	f000 f94a 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200004f8 	.word	0x200004f8
 8000b34:	40004c00 	.word	0x40004c00

08000b38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b3c:	4b22      	ldr	r3, [pc, #136]	@ (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b3e:	4a23      	ldr	r2, [pc, #140]	@ (8000bcc <MX_USART3_UART_Init+0x94>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b42:	4b21      	ldr	r3, [pc, #132]	@ (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b19      	ldr	r3, [pc, #100]	@ (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b17      	ldr	r3, [pc, #92]	@ (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6e:	4b16      	ldr	r3, [pc, #88]	@ (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b74:	4b14      	ldr	r3, [pc, #80]	@ (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b80:	4811      	ldr	r0, [pc, #68]	@ (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b82:	f007 f8d4 	bl	8007d2e <HAL_UART_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b8c:	f000 f918 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b90:	2100      	movs	r1, #0
 8000b92:	480d      	ldr	r0, [pc, #52]	@ (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000b94:	f007 fd22 	bl	80085dc <HAL_UARTEx_SetTxFifoThreshold>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b9e:	f000 f90f 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4808      	ldr	r0, [pc, #32]	@ (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000ba6:	f007 fd57 	bl	8008658 <HAL_UARTEx_SetRxFifoThreshold>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bb0:	f000 f906 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bb4:	4804      	ldr	r0, [pc, #16]	@ (8000bc8 <MX_USART3_UART_Init+0x90>)
 8000bb6:	f007 fcd8 	bl	800856a <HAL_UARTEx_DisableFifoMode>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bc0:	f000 f8fe 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	2000058c 	.word	0x2000058c
 8000bcc:	40004800 	.word	0x40004800

08000bd0 <MX_USB_HCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_HCD_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hhcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000bd4:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <MX_USB_HCD_Init+0x54>)
 8000bd6:	4a14      	ldr	r2, [pc, #80]	@ (8000c28 <MX_USB_HCD_Init+0x58>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hhcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000bda:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <MX_USB_HCD_Init+0x54>)
 8000bdc:	2208      	movs	r2, #8
 8000bde:	711a      	strb	r2, [r3, #4]
  hhcd_USB_DRD_FS.Init.Host_channels = 8;
 8000be0:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <MX_USB_HCD_Init+0x54>)
 8000be2:	2208      	movs	r2, #8
 8000be4:	715a      	strb	r2, [r3, #5]
  hhcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000be6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c24 <MX_USB_HCD_Init+0x54>)
 8000be8:	2202      	movs	r2, #2
 8000bea:	71da      	strb	r2, [r3, #7]
  hhcd_USB_DRD_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000bec:	4b0d      	ldr	r3, [pc, #52]	@ (8000c24 <MX_USB_HCD_Init+0x54>)
 8000bee:	2202      	movs	r2, #2
 8000bf0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <MX_USB_HCD_Init+0x54>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	729a      	strb	r2, [r3, #10]
  hhcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <MX_USB_HCD_Init+0x54>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	72da      	strb	r2, [r3, #11]
  hhcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <MX_USB_HCD_Init+0x54>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	739a      	strb	r2, [r3, #14]
  hhcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000c04:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <MX_USB_HCD_Init+0x54>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	73da      	strb	r2, [r3, #15]
  hhcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <MX_USB_HCD_Init+0x54>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_DRD_FS) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	@ (8000c24 <MX_USB_HCD_Init+0x54>)
 8000c12:	f001 fa7f 	bl	8002114 <HAL_HCD_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_USB_HCD_Init+0x50>
  {
    Error_Handler();
 8000c1c:	f000 f8d0 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000620 	.word	0x20000620
 8000c28:	40016000 	.word	0x40016000

08000c2c <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <MX_WWDG_Init+0x38>)
 8000c32:	4a0d      	ldr	r2, [pc, #52]	@ (8000c68 <MX_WWDG_Init+0x3c>)
 8000c34:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <MX_WWDG_Init+0x38>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <MX_WWDG_Init+0x38>)
 8000c3e:	2240      	movs	r2, #64	@ 0x40
 8000c40:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 8000c42:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <MX_WWDG_Init+0x38>)
 8000c44:	2240      	movs	r2, #64	@ 0x40
 8000c46:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <MX_WWDG_Init+0x38>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8000c4e:	4805      	ldr	r0, [pc, #20]	@ (8000c64 <MX_WWDG_Init+0x38>)
 8000c50:	f007 fd8e 	bl	8008770 <HAL_WWDG_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_WWDG_Init+0x32>
  {
    Error_Handler();
 8000c5a:	f000 f8b1 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000984 	.word	0x20000984
 8000c68:	40002c00 	.word	0x40002c00

08000c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08c      	sub	sp, #48	@ 0x30
 8000c70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c82:	4b4b      	ldr	r3, [pc, #300]	@ (8000db0 <MX_GPIO_Init+0x144>)
 8000c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c88:	4a49      	ldr	r2, [pc, #292]	@ (8000db0 <MX_GPIO_Init+0x144>)
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c92:	4b47      	ldr	r3, [pc, #284]	@ (8000db0 <MX_GPIO_Init+0x144>)
 8000c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
 8000c9e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca0:	4b43      	ldr	r3, [pc, #268]	@ (8000db0 <MX_GPIO_Init+0x144>)
 8000ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ca6:	4a42      	ldr	r2, [pc, #264]	@ (8000db0 <MX_GPIO_Init+0x144>)
 8000ca8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cb0:	4b3f      	ldr	r3, [pc, #252]	@ (8000db0 <MX_GPIO_Init+0x144>)
 8000cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b3c      	ldr	r3, [pc, #240]	@ (8000db0 <MX_GPIO_Init+0x144>)
 8000cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cc4:	4a3a      	ldr	r2, [pc, #232]	@ (8000db0 <MX_GPIO_Init+0x144>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cce:	4b38      	ldr	r3, [pc, #224]	@ (8000db0 <MX_GPIO_Init+0x144>)
 8000cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b34      	ldr	r3, [pc, #208]	@ (8000db0 <MX_GPIO_Init+0x144>)
 8000cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ce2:	4a33      	ldr	r2, [pc, #204]	@ (8000db0 <MX_GPIO_Init+0x144>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cec:	4b30      	ldr	r3, [pc, #192]	@ (8000db0 <MX_GPIO_Init+0x144>)
 8000cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8000db0 <MX_GPIO_Init+0x144>)
 8000cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d00:	4a2b      	ldr	r2, [pc, #172]	@ (8000db0 <MX_GPIO_Init+0x144>)
 8000d02:	f043 0310 	orr.w	r3, r3, #16
 8000d06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d0a:	4b29      	ldr	r3, [pc, #164]	@ (8000db0 <MX_GPIO_Init+0x144>)
 8000d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d10:	f003 0310 	and.w	r3, r3, #16
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d18:	4b25      	ldr	r3, [pc, #148]	@ (8000db0 <MX_GPIO_Init+0x144>)
 8000d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d1e:	4a24      	ldr	r2, [pc, #144]	@ (8000db0 <MX_GPIO_Init+0x144>)
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d28:	4b21      	ldr	r3, [pc, #132]	@ (8000db0 <MX_GPIO_Init+0x144>)
 8000d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2108      	movs	r1, #8
 8000d3a:	481e      	ldr	r0, [pc, #120]	@ (8000db4 <MX_GPIO_Init+0x148>)
 8000d3c:	f001 f9d2 	bl	80020e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2180      	movs	r1, #128	@ 0x80
 8000d44:	481c      	ldr	r0, [pc, #112]	@ (8000db8 <MX_GPIO_Init+0x14c>)
 8000d46:	f001 f9cd 	bl	80020e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDMMC1_RST_GPIO_Port, SDMMC1_RST_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2140      	movs	r1, #64	@ 0x40
 8000d4e:	481b      	ldr	r0, [pc, #108]	@ (8000dbc <MX_GPIO_Init+0x150>)
 8000d50:	f001 f9c8 	bl	80020e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000d54:	2308      	movs	r3, #8
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4812      	ldr	r0, [pc, #72]	@ (8000db4 <MX_GPIO_Init+0x148>)
 8000d6c:	f001 f868 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000d70:	2380      	movs	r3, #128	@ 0x80
 8000d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <MX_GPIO_Init+0x14c>)
 8000d88:	f001 f85a 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC1_RST_Pin */
  GPIO_InitStruct.Pin = SDMMC1_RST_Pin;
 8000d8c:	2340      	movs	r3, #64	@ 0x40
 8000d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SDMMC1_RST_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	4619      	mov	r1, r3
 8000da2:	4806      	ldr	r0, [pc, #24]	@ (8000dbc <MX_GPIO_Init+0x150>)
 8000da4:	f001 f84c 	bl	8001e40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da8:	bf00      	nop
 8000daa:	3730      	adds	r7, #48	@ 0x30
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	44020c00 	.word	0x44020c00
 8000db4:	42020800 	.word	0x42020800
 8000db8:	42021000 	.word	0x42021000
 8000dbc:	42020c00 	.word	0x42020c00

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <Error_Handler+0x8>

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0b      	ldr	r2, [pc, #44]	@ (8000e18 <HAL_DCACHE_MspInit+0x3c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d10e      	bne.n	8000e0c <HAL_DCACHE_MspInit+0x30>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 8000dee:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <HAL_DCACHE_MspInit+0x40>)
 8000df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000df4:	4a09      	ldr	r2, [pc, #36]	@ (8000e1c <HAL_DCACHE_MspInit+0x40>)
 8000df6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000dfa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000dfe:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <HAL_DCACHE_MspInit+0x40>)
 8000e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e04:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DCACHE1_MspInit 1 */

  }

}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	40031400 	.word	0x40031400
 8000e1c:	44020c00 	.word	0x44020c00

08000e20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b0c0      	sub	sp, #256	@ 0x100
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e38:	f107 0318 	add.w	r3, r7, #24
 8000e3c:	22d0      	movs	r2, #208	@ 0xd0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f008 f91b 	bl	800907c <memset>
  if(hi2c->Instance==I2C1)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a4d      	ldr	r2, [pc, #308]	@ (8000f80 <HAL_I2C_MspInit+0x160>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d146      	bne.n	8000ede <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e62:	f107 0318 	add.w	r3, r7, #24
 8000e66:	4618      	mov	r0, r3
 8000e68:	f003 fb9c 	bl	80045a4 <HAL_RCCEx_PeriphCLKConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000e72:	f7ff ffa5 	bl	8000dc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	4b43      	ldr	r3, [pc, #268]	@ (8000f84 <HAL_I2C_MspInit+0x164>)
 8000e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e7c:	4a41      	ldr	r2, [pc, #260]	@ (8000f84 <HAL_I2C_MspInit+0x164>)
 8000e7e:	f043 0302 	orr.w	r3, r3, #2
 8000e82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e86:	4b3f      	ldr	r3, [pc, #252]	@ (8000f84 <HAL_I2C_MspInit+0x164>)
 8000e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e94:	23c0      	movs	r3, #192	@ 0xc0
 8000e96:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e9a:	2312      	movs	r3, #18
 8000e9c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eac:	2304      	movs	r3, #4
 8000eae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4833      	ldr	r0, [pc, #204]	@ (8000f88 <HAL_I2C_MspInit+0x168>)
 8000eba:	f000 ffc1 	bl	8001e40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ebe:	4b31      	ldr	r3, [pc, #196]	@ (8000f84 <HAL_I2C_MspInit+0x164>)
 8000ec0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ec4:	4a2f      	ldr	r2, [pc, #188]	@ (8000f84 <HAL_I2C_MspInit+0x164>)
 8000ec6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eca:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ece:	4b2d      	ldr	r3, [pc, #180]	@ (8000f84 <HAL_I2C_MspInit+0x164>)
 8000ed0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ed4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000edc:	e04b      	b.n	8000f76 <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8000f8c <HAL_I2C_MspInit+0x16c>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d146      	bne.n	8000f76 <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ee8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000eec:	f04f 0300 	mov.w	r3, #0
 8000ef0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000efa:	f107 0318 	add.w	r3, r7, #24
 8000efe:	4618      	mov	r0, r3
 8000f00:	f003 fb50 	bl	80045a4 <HAL_RCCEx_PeriphCLKConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000f0a:	f7ff ff59 	bl	8000dc0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f84 <HAL_I2C_MspInit+0x164>)
 8000f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f14:	4a1b      	ldr	r2, [pc, #108]	@ (8000f84 <HAL_I2C_MspInit+0x164>)
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f1e:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <HAL_I2C_MspInit+0x164>)
 8000f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000f2c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f34:	2312      	movs	r3, #18
 8000f36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f46:	2304      	movs	r3, #4
 8000f48:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000f50:	4619      	mov	r1, r3
 8000f52:	480d      	ldr	r0, [pc, #52]	@ (8000f88 <HAL_I2C_MspInit+0x168>)
 8000f54:	f000 ff74 	bl	8001e40 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f58:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <HAL_I2C_MspInit+0x164>)
 8000f5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f5e:	4a09      	ldr	r2, [pc, #36]	@ (8000f84 <HAL_I2C_MspInit+0x164>)
 8000f60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f64:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_I2C_MspInit+0x164>)
 8000f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
}
 8000f76:	bf00      	nop
 8000f78:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40005400 	.word	0x40005400
 8000f84:	44020c00 	.word	0x44020c00
 8000f88:	42020400 	.word	0x42020400
 8000f8c:	40005800 	.word	0x40005800

08000f90 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0be      	sub	sp, #248	@ 0xf8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	22d0      	movs	r2, #208	@ 0xd0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f008 f863 	bl	800907c <memset>
  if(hi2s->Instance==SPI1)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a26      	ldr	r2, [pc, #152]	@ (8001054 <HAL_I2S_MspInit+0xc4>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d145      	bne.n	800104c <HAL_I2S_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000fc0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd2:	f107 0310 	add.w	r3, r7, #16
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f003 fae4 	bl	80045a4 <HAL_RCCEx_PeriphCLKConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8000fe2:	f7ff feed 	bl	8000dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8001058 <HAL_I2S_MspInit+0xc8>)
 8000fe8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000fec:	4a1a      	ldr	r2, [pc, #104]	@ (8001058 <HAL_I2S_MspInit+0xc8>)
 8000fee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ff2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000ff6:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <HAL_I2S_MspInit+0xc8>)
 8000ff8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ffc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <HAL_I2S_MspInit+0xc8>)
 8001006:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800100a:	4a13      	ldr	r2, [pc, #76]	@ (8001058 <HAL_I2S_MspInit+0xc8>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001014:	4b10      	ldr	r3, [pc, #64]	@ (8001058 <HAL_I2S_MspInit+0xc8>)
 8001016:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    PA7     ------> I2S1_SDO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001022:	23f0      	movs	r3, #240	@ 0xf0
 8001024:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800103a:	2305      	movs	r3, #5
 800103c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001044:	4619      	mov	r1, r3
 8001046:	4805      	ldr	r0, [pc, #20]	@ (800105c <HAL_I2S_MspInit+0xcc>)
 8001048:	f000 fefa 	bl	8001e40 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800104c:	bf00      	nop
 800104e:	37f8      	adds	r7, #248	@ 0xf8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40013000 	.word	0x40013000
 8001058:	44020c00 	.word	0x44020c00
 800105c:	42020000 	.word	0x42020000

08001060 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b0c0      	sub	sp, #256	@ 0x100
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001078:	f107 0318 	add.w	r3, r7, #24
 800107c:	22d0      	movs	r2, #208	@ 0xd0
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f007 fffb 	bl	800907c <memset>
  if(hmmc->Instance==SDMMC1)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a4c      	ldr	r2, [pc, #304]	@ (80011bc <HAL_MMC_MspInit+0x15c>)
 800108c:	4293      	cmp	r3, r2
 800108e:	f040 8090 	bne.w	80011b2 <HAL_MMC_MspInit+0x152>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001092:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLL1Q;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a4:	f107 0318 	add.w	r3, r7, #24
 80010a8:	4618      	mov	r0, r3
 80010aa:	f003 fa7b 	bl	80045a4 <HAL_RCCEx_PeriphCLKConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_MMC_MspInit+0x58>
    {
      Error_Handler();
 80010b4:	f7ff fe84 	bl	8000dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80010b8:	4b41      	ldr	r3, [pc, #260]	@ (80011c0 <HAL_MMC_MspInit+0x160>)
 80010ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010be:	4a40      	ldr	r2, [pc, #256]	@ (80011c0 <HAL_MMC_MspInit+0x160>)
 80010c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80010c8:	4b3d      	ldr	r3, [pc, #244]	@ (80011c0 <HAL_MMC_MspInit+0x160>)
 80010ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	4b3a      	ldr	r3, [pc, #232]	@ (80011c0 <HAL_MMC_MspInit+0x160>)
 80010d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010dc:	4a38      	ldr	r2, [pc, #224]	@ (80011c0 <HAL_MMC_MspInit+0x160>)
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010e6:	4b36      	ldr	r3, [pc, #216]	@ (80011c0 <HAL_MMC_MspInit+0x160>)
 80010e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f4:	4b32      	ldr	r3, [pc, #200]	@ (80011c0 <HAL_MMC_MspInit+0x160>)
 80010f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010fa:	4a31      	ldr	r2, [pc, #196]	@ (80011c0 <HAL_MMC_MspInit+0x160>)
 80010fc:	f043 0304 	orr.w	r3, r3, #4
 8001100:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001104:	4b2e      	ldr	r3, [pc, #184]	@ (80011c0 <HAL_MMC_MspInit+0x160>)
 8001106:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001112:	4b2b      	ldr	r3, [pc, #172]	@ (80011c0 <HAL_MMC_MspInit+0x160>)
 8001114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001118:	4a29      	ldr	r2, [pc, #164]	@ (80011c0 <HAL_MMC_MspInit+0x160>)
 800111a:	f043 0308 	orr.w	r3, r3, #8
 800111e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001122:	4b27      	ldr	r3, [pc, #156]	@ (80011c0 <HAL_MMC_MspInit+0x160>)
 8001124:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PD7     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_D4
    PB9     ------> SDMMC1_D5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9;
 8001130:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 8001134:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800114a:	230c      	movs	r3, #12
 800114c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001154:	4619      	mov	r1, r3
 8001156:	481b      	ldr	r0, [pc, #108]	@ (80011c4 <HAL_MMC_MspInit+0x164>)
 8001158:	f000 fe72 	bl	8001e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10
 800115c:	f44f 53f6 	mov.w	r3, #7872	@ 0x1ec0
 8001160:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
                          |GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001176:	230c      	movs	r3, #12
 8001178:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001180:	4619      	mov	r1, r3
 8001182:	4811      	ldr	r0, [pc, #68]	@ (80011c8 <HAL_MMC_MspInit+0x168>)
 8001184:	f000 fe5c 	bl	8001e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001188:	2380      	movs	r3, #128	@ 0x80
 800118a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC1;
 80011a0:	230b      	movs	r3, #11
 80011a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80011aa:	4619      	mov	r1, r3
 80011ac:	4807      	ldr	r0, [pc, #28]	@ (80011cc <HAL_MMC_MspInit+0x16c>)
 80011ae:	f000 fe47 	bl	8001e40 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80011b2:	bf00      	nop
 80011b4:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	46008000 	.word	0x46008000
 80011c0:	44020c00 	.word	0x44020c00
 80011c4:	42020400 	.word	0x42020400
 80011c8:	42020800 	.word	0x42020800
 80011cc:	42020c00 	.word	0x42020c00

080011d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b0c2      	sub	sp, #264	@ 0x108
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80011da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011de:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f0:	f107 0320 	add.w	r3, r7, #32
 80011f4:	22d0      	movs	r2, #208	@ 0xd0
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f007 ff3f 	bl	800907c <memset>
  if(hspi->Instance==SPI2)
 80011fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001202:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a76      	ldr	r2, [pc, #472]	@ (80013e4 <HAL_SPI_MspInit+0x214>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d16b      	bne.n	80012e8 <HAL_SPI_MspInit+0x118>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001210:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001214:	f04f 0300 	mov.w	r3, #0
 8001218:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PLL1Q;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001222:	f107 0320 	add.w	r3, r7, #32
 8001226:	4618      	mov	r0, r3
 8001228:	f003 f9bc 	bl	80045a4 <HAL_RCCEx_PeriphCLKConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_SPI_MspInit+0x66>
    {
      Error_Handler();
 8001232:	f7ff fdc5 	bl	8000dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001236:	4b6c      	ldr	r3, [pc, #432]	@ (80013e8 <HAL_SPI_MspInit+0x218>)
 8001238:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800123c:	4a6a      	ldr	r2, [pc, #424]	@ (80013e8 <HAL_SPI_MspInit+0x218>)
 800123e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001242:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001246:	4b68      	ldr	r3, [pc, #416]	@ (80013e8 <HAL_SPI_MspInit+0x218>)
 8001248:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800124c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001254:	4b64      	ldr	r3, [pc, #400]	@ (80013e8 <HAL_SPI_MspInit+0x218>)
 8001256:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800125a:	4a63      	ldr	r2, [pc, #396]	@ (80013e8 <HAL_SPI_MspInit+0x218>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001264:	4b60      	ldr	r3, [pc, #384]	@ (80013e8 <HAL_SPI_MspInit+0x218>)
 8001266:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	61bb      	str	r3, [r7, #24]
 8001270:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	4b5d      	ldr	r3, [pc, #372]	@ (80013e8 <HAL_SPI_MspInit+0x218>)
 8001274:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001278:	4a5b      	ldr	r2, [pc, #364]	@ (80013e8 <HAL_SPI_MspInit+0x218>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001282:	4b59      	ldr	r3, [pc, #356]	@ (80013e8 <HAL_SPI_MspInit+0x218>)
 8001284:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PA9     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001290:	2306      	movs	r3, #6
 8001292:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012a8:	2305      	movs	r3, #5
 80012aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ae:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80012b2:	4619      	mov	r1, r3
 80012b4:	484d      	ldr	r0, [pc, #308]	@ (80013ec <HAL_SPI_MspInit+0x21c>)
 80012b6:	f000 fdc3 	bl	8001e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012d4:	2305      	movs	r3, #5
 80012d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80012de:	4619      	mov	r1, r3
 80012e0:	4843      	ldr	r0, [pc, #268]	@ (80013f0 <HAL_SPI_MspInit+0x220>)
 80012e2:	f000 fdad 	bl	8001e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012e6:	e078      	b.n	80013da <HAL_SPI_MspInit+0x20a>
  else if(hspi->Instance==SPI3)
 80012e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80012ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a3f      	ldr	r2, [pc, #252]	@ (80013f4 <HAL_SPI_MspInit+0x224>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d16f      	bne.n	80013da <HAL_SPI_MspInit+0x20a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80012fa:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80012fe:	f04f 0300 	mov.w	r3, #0
 8001302:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi3ClockSelection = RCC_SPI3CLKSOURCE_PLL1Q;
 8001306:	2300      	movs	r3, #0
 8001308:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800130c:	f107 0320 	add.w	r3, r7, #32
 8001310:	4618      	mov	r0, r3
 8001312:	f003 f947 	bl	80045a4 <HAL_RCCEx_PeriphCLKConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <HAL_SPI_MspInit+0x150>
      Error_Handler();
 800131c:	f7ff fd50 	bl	8000dc0 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001320:	4b31      	ldr	r3, [pc, #196]	@ (80013e8 <HAL_SPI_MspInit+0x218>)
 8001322:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001326:	4a30      	ldr	r2, [pc, #192]	@ (80013e8 <HAL_SPI_MspInit+0x218>)
 8001328:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800132c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001330:	4b2d      	ldr	r3, [pc, #180]	@ (80013e8 <HAL_SPI_MspInit+0x218>)
 8001332:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001336:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	4b2a      	ldr	r3, [pc, #168]	@ (80013e8 <HAL_SPI_MspInit+0x218>)
 8001340:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001344:	4a28      	ldr	r2, [pc, #160]	@ (80013e8 <HAL_SPI_MspInit+0x218>)
 8001346:	f043 0302 	orr.w	r3, r3, #2
 800134a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800134e:	4b26      	ldr	r3, [pc, #152]	@ (80013e8 <HAL_SPI_MspInit+0x218>)
 8001350:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800135c:	2301      	movs	r3, #1
 800135e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8001374:	2305      	movs	r3, #5
 8001376:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800137e:	4619      	mov	r1, r3
 8001380:	481d      	ldr	r0, [pc, #116]	@ (80013f8 <HAL_SPI_MspInit+0x228>)
 8001382:	f000 fd5d 	bl	8001e40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001386:	2302      	movs	r3, #2
 8001388:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI3;
 800139e:	2304      	movs	r3, #4
 80013a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80013a8:	4619      	mov	r1, r3
 80013aa:	4813      	ldr	r0, [pc, #76]	@ (80013f8 <HAL_SPI_MspInit+0x228>)
 80013ac:	f000 fd48 	bl	8001e40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013b0:	2304      	movs	r3, #4
 80013b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80013c8:	2307      	movs	r3, #7
 80013ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4808      	ldr	r0, [pc, #32]	@ (80013f8 <HAL_SPI_MspInit+0x228>)
 80013d6:	f000 fd33 	bl	8001e40 <HAL_GPIO_Init>
}
 80013da:	bf00      	nop
 80013dc:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40003800 	.word	0x40003800
 80013e8:	44020c00 	.word	0x44020c00
 80013ec:	42020800 	.word	0x42020800
 80013f0:	42020000 	.word	0x42020000
 80013f4:	40003c00 	.word	0x40003c00
 80013f8:	42020400 	.word	0x42020400

080013fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b0c0      	sub	sp, #256	@ 0x100
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001414:	f107 0318 	add.w	r3, r7, #24
 8001418:	22d0      	movs	r2, #208	@ 0xd0
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f007 fe2d 	bl	800907c <memset>
  if(huart->Instance==UART4)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a4d      	ldr	r2, [pc, #308]	@ (800155c <HAL_UART_MspInit+0x160>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d146      	bne.n	80014ba <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800142c:	f04f 0208 	mov.w	r2, #8
 8001430:	f04f 0300 	mov.w	r3, #0
 8001434:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800143e:	f107 0318 	add.w	r3, r7, #24
 8001442:	4618      	mov	r0, r3
 8001444:	f003 f8ae 	bl	80045a4 <HAL_RCCEx_PeriphCLKConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800144e:	f7ff fcb7 	bl	8000dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001452:	4b43      	ldr	r3, [pc, #268]	@ (8001560 <HAL_UART_MspInit+0x164>)
 8001454:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001458:	4a41      	ldr	r2, [pc, #260]	@ (8001560 <HAL_UART_MspInit+0x164>)
 800145a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800145e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001462:	4b3f      	ldr	r3, [pc, #252]	@ (8001560 <HAL_UART_MspInit+0x164>)
 8001464:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001468:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001470:	4b3b      	ldr	r3, [pc, #236]	@ (8001560 <HAL_UART_MspInit+0x164>)
 8001472:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001476:	4a3a      	ldr	r2, [pc, #232]	@ (8001560 <HAL_UART_MspInit+0x164>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001480:	4b37      	ldr	r3, [pc, #220]	@ (8001560 <HAL_UART_MspInit+0x164>)
 8001482:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800148e:	2303      	movs	r3, #3
 8001490:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014a6:	2308      	movs	r3, #8
 80014a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80014b0:	4619      	mov	r1, r3
 80014b2:	482c      	ldr	r0, [pc, #176]	@ (8001564 <HAL_UART_MspInit+0x168>)
 80014b4:	f000 fcc4 	bl	8001e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014b8:	e04a      	b.n	8001550 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART3)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a2a      	ldr	r2, [pc, #168]	@ (8001568 <HAL_UART_MspInit+0x16c>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d145      	bne.n	8001550 <HAL_UART_MspInit+0x154>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014c4:	f04f 0204 	mov.w	r2, #4
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d4:	f107 0318 	add.w	r3, r7, #24
 80014d8:	4618      	mov	r0, r3
 80014da:	f003 f863 	bl	80045a4 <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_UART_MspInit+0xec>
      Error_Handler();
 80014e4:	f7ff fc6c 	bl	8000dc0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001560 <HAL_UART_MspInit+0x164>)
 80014ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001560 <HAL_UART_MspInit+0x164>)
 80014f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014f4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80014f8:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <HAL_UART_MspInit+0x164>)
 80014fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001506:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <HAL_UART_MspInit+0x164>)
 8001508:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800150c:	4a14      	ldr	r2, [pc, #80]	@ (8001560 <HAL_UART_MspInit+0x164>)
 800150e:	f043 0308 	orr.w	r3, r3, #8
 8001512:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001516:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <HAL_UART_MspInit+0x164>)
 8001518:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001524:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001528:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800153e:	2307      	movs	r3, #7
 8001540:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001544:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001548:	4619      	mov	r1, r3
 800154a:	4808      	ldr	r0, [pc, #32]	@ (800156c <HAL_UART_MspInit+0x170>)
 800154c:	f000 fc78 	bl	8001e40 <HAL_GPIO_Init>
}
 8001550:	bf00      	nop
 8001552:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40004c00 	.word	0x40004c00
 8001560:	44020c00 	.word	0x44020c00
 8001564:	42020000 	.word	0x42020000
 8001568:	40004800 	.word	0x40004800
 800156c:	42020c00 	.word	0x42020c00

08001570 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b0b8      	sub	sp, #224	@ 0xe0
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	22d0      	movs	r2, #208	@ 0xd0
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f007 fd7b 	bl	800907c <memset>
  if(hhcd->Instance==USB_DRD_FS)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a15      	ldr	r2, [pc, #84]	@ (80015e0 <HAL_HCD_MspInit+0x70>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d123      	bne.n	80015d8 <HAL_HCD_MspInit+0x68>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 0310 	mov.w	r3, #16
 8001598:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800159c:	2330      	movs	r3, #48	@ 0x30
 800159e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	4618      	mov	r0, r3
 80015a8:	f002 fffc 	bl	80045a4 <HAL_RCCEx_PeriphCLKConfig>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_HCD_MspInit+0x46>
    {
      Error_Handler();
 80015b2:	f7ff fc05 	bl	8000dc0 <Error_Handler>
    }

  /* Enable VDDUSB */
  HAL_PWREx_EnableVddUSB();
 80015b6:	f002 f86b 	bl	8003690 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80015ba:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <HAL_HCD_MspInit+0x74>)
 80015bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015c0:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <HAL_HCD_MspInit+0x74>)
 80015c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015c6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <HAL_HCD_MspInit+0x74>)
 80015cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 80015d8:	bf00      	nop
 80015da:	37e0      	adds	r7, #224	@ 0xe0
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40016000 	.word	0x40016000
 80015e4:	44020c00 	.word	0x44020c00

080015e8 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001624 <HAL_WWDG_MspInit+0x3c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d10e      	bne.n	8001618 <HAL_WWDG_MspInit+0x30>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 80015fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <HAL_WWDG_MspInit+0x40>)
 80015fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001600:	4a09      	ldr	r2, [pc, #36]	@ (8001628 <HAL_WWDG_MspInit+0x40>)
 8001602:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001606:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800160a:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <HAL_WWDG_MspInit+0x40>)
 800160c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001610:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END WWDG_MspInit 1 */

  }

}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	40002c00 	.word	0x40002c00
 8001628:	44020c00 	.word	0x44020c00

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <NMI_Handler+0x4>

08001634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <MemManage_Handler+0x4>

08001644 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <UsageFault_Handler+0x4>

08001654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001682:	f000 f947 	bl	8001914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001692:	4b35      	ldr	r3, [pc, #212]	@ (8001768 <SystemInit+0xdc>)
 8001694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001698:	4a33      	ldr	r2, [pc, #204]	@ (8001768 <SystemInit+0xdc>)
 800169a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800169e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80016a2:	4b32      	ldr	r3, [pc, #200]	@ (800176c <SystemInit+0xe0>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80016a8:	4b30      	ldr	r3, [pc, #192]	@ (800176c <SystemInit+0xe0>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80016ae:	4b2f      	ldr	r3, [pc, #188]	@ (800176c <SystemInit+0xe0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80016b4:	4b2d      	ldr	r3, [pc, #180]	@ (800176c <SystemInit+0xe0>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	492c      	ldr	r1, [pc, #176]	@ (800176c <SystemInit+0xe0>)
 80016ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001770 <SystemInit+0xe4>)
 80016bc:	4013      	ands	r3, r2
 80016be:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80016c0:	4b2a      	ldr	r3, [pc, #168]	@ (800176c <SystemInit+0xe0>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80016c6:	4b29      	ldr	r3, [pc, #164]	@ (800176c <SystemInit+0xe0>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80016cc:	4b27      	ldr	r3, [pc, #156]	@ (800176c <SystemInit+0xe0>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80016d2:	4b26      	ldr	r3, [pc, #152]	@ (800176c <SystemInit+0xe0>)
 80016d4:	4a27      	ldr	r2, [pc, #156]	@ (8001774 <SystemInit+0xe8>)
 80016d6:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80016d8:	4b24      	ldr	r3, [pc, #144]	@ (800176c <SystemInit+0xe0>)
 80016da:	2200      	movs	r2, #0
 80016dc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80016de:	4b23      	ldr	r3, [pc, #140]	@ (800176c <SystemInit+0xe0>)
 80016e0:	4a24      	ldr	r2, [pc, #144]	@ (8001774 <SystemInit+0xe8>)
 80016e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80016e4:	4b21      	ldr	r3, [pc, #132]	@ (800176c <SystemInit+0xe0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80016ea:	4b20      	ldr	r3, [pc, #128]	@ (800176c <SystemInit+0xe0>)
 80016ec:	4a21      	ldr	r2, [pc, #132]	@ (8001774 <SystemInit+0xe8>)
 80016ee:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80016f0:	4b1e      	ldr	r3, [pc, #120]	@ (800176c <SystemInit+0xe0>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80016f6:	4b1d      	ldr	r3, [pc, #116]	@ (800176c <SystemInit+0xe0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a1c      	ldr	r2, [pc, #112]	@ (800176c <SystemInit+0xe0>)
 80016fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001700:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001702:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <SystemInit+0xe0>)
 8001704:	2200      	movs	r2, #0
 8001706:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001708:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <SystemInit+0xdc>)
 800170a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800170e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001710:	4b19      	ldr	r3, [pc, #100]	@ (8001778 <SystemInit+0xec>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001718:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001720:	d003      	beq.n	800172a <SystemInit+0x9e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001728:	d117      	bne.n	800175a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800172a:	4b13      	ldr	r3, [pc, #76]	@ (8001778 <SystemInit+0xec>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d005      	beq.n	8001742 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001736:	4b10      	ldr	r3, [pc, #64]	@ (8001778 <SystemInit+0xec>)
 8001738:	4a10      	ldr	r2, [pc, #64]	@ (800177c <SystemInit+0xf0>)
 800173a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800173c:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <SystemInit+0xec>)
 800173e:	4a10      	ldr	r2, [pc, #64]	@ (8001780 <SystemInit+0xf4>)
 8001740:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001742:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <SystemInit+0xec>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	4a0c      	ldr	r2, [pc, #48]	@ (8001778 <SystemInit+0xec>)
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800174e:	4b0a      	ldr	r3, [pc, #40]	@ (8001778 <SystemInit+0xec>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a09      	ldr	r2, [pc, #36]	@ (8001778 <SystemInit+0xec>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	61d3      	str	r3, [r2, #28]
  }
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000ed00 	.word	0xe000ed00
 800176c:	44020c00 	.word	0x44020c00
 8001770:	eae2eae3 	.word	0xeae2eae3
 8001774:	01010280 	.word	0x01010280
 8001778:	40022000 	.word	0x40022000
 800177c:	08192a3b 	.word	0x08192a3b
 8001780:	4c5d6e7f 	.word	0x4c5d6e7f

08001784 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001784:	480d      	ldr	r0, [pc, #52]	@ (80017bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001786:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001788:	f7ff ff80 	bl	800168c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800178c:	480c      	ldr	r0, [pc, #48]	@ (80017c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800178e:	490d      	ldr	r1, [pc, #52]	@ (80017c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001790:	4a0d      	ldr	r2, [pc, #52]	@ (80017c8 <LoopForever+0xe>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80017a4:	4c0a      	ldr	r4, [pc, #40]	@ (80017d0 <LoopForever+0x16>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017b2:	f007 fc6b 	bl	800908c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017b6:	f7fe fef9 	bl	80005ac <main>

080017ba <LoopForever>:

LoopForever:
    b LoopForever
 80017ba:	e7fe      	b.n	80017ba <LoopForever>
  ldr   r0, =_estack
 80017bc:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017c8:	0800913c 	.word	0x0800913c
  ldr r2, =_sbss
 80017cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017d0:	2000099c 	.word	0x2000099c

080017d4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC1_IRQHandler>
	...

080017d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017dc:	2003      	movs	r0, #3
 80017de:	f000 f96c 	bl	8001aba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80017e2:	f002 fd55 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 80017e6:	4602      	mov	r2, r0
 80017e8:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <HAL_Init+0x44>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	490b      	ldr	r1, [pc, #44]	@ (8001820 <HAL_Init+0x48>)
 80017f2:	5ccb      	ldrb	r3, [r1, r3]
 80017f4:	fa22 f303 	lsr.w	r3, r2, r3
 80017f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001824 <HAL_Init+0x4c>)
 80017fa:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80017fc:	2004      	movs	r0, #4
 80017fe:	f000 f9a3 	bl	8001b48 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001802:	200f      	movs	r0, #15
 8001804:	f000 f810 	bl	8001828 <HAL_InitTick>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e002      	b.n	8001818 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001812:	f7ff fadb 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	bd80      	pop	{r7, pc}
 800181c:	44020c00 	.word	0x44020c00
 8001820:	080090ec 	.word	0x080090ec
 8001824:	20000000 	.word	0x20000000

08001828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001834:	4b33      	ldr	r3, [pc, #204]	@ (8001904 <HAL_InitTick+0xdc>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e05c      	b.n	80018fa <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001840:	4b31      	ldr	r3, [pc, #196]	@ (8001908 <HAL_InitTick+0xe0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b04      	cmp	r3, #4
 800184a:	d10c      	bne.n	8001866 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800184c:	4b2f      	ldr	r3, [pc, #188]	@ (800190c <HAL_InitTick+0xe4>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b2c      	ldr	r3, [pc, #176]	@ (8001904 <HAL_InitTick+0xdc>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4619      	mov	r1, r3
 8001856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800185a:	fbb3 f3f1 	udiv	r3, r3, r1
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	e037      	b.n	80018d6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001866:	f000 f9c7 	bl	8001bf8 <HAL_SYSTICK_GetCLKSourceConfig>
 800186a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d023      	beq.n	80018ba <HAL_InitTick+0x92>
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	2b02      	cmp	r3, #2
 8001876:	d82d      	bhi.n	80018d4 <HAL_InitTick+0xac>
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_InitTick+0x5e>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d00d      	beq.n	80018a0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001884:	e026      	b.n	80018d4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001886:	4b21      	ldr	r3, [pc, #132]	@ (800190c <HAL_InitTick+0xe4>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	4b1e      	ldr	r3, [pc, #120]	@ (8001904 <HAL_InitTick+0xdc>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	4619      	mov	r1, r3
 8001890:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001894:	fbb3 f3f1 	udiv	r3, r3, r1
 8001898:	fbb2 f3f3 	udiv	r3, r2, r3
 800189c:	60fb      	str	r3, [r7, #12]
        break;
 800189e:	e01a      	b.n	80018d6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80018a0:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <HAL_InitTick+0xdc>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80018ae:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80018b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b6:	60fb      	str	r3, [r7, #12]
        break;
 80018b8:	e00d      	b.n	80018d6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80018ba:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <HAL_InitTick+0xdc>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80018c8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d0:	60fb      	str	r3, [r7, #12]
        break;
 80018d2:	e000      	b.n	80018d6 <HAL_InitTick+0xae>
        break;
 80018d4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f000 f914 	bl	8001b04 <HAL_SYSTICK_Config>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e009      	b.n	80018fa <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e6:	2200      	movs	r2, #0
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	f04f 30ff 	mov.w	r0, #4294967295
 80018ee:	f000 f8ef 	bl	8001ad0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80018f2:	4a07      	ldr	r2, [pc, #28]	@ (8001910 <HAL_InitTick+0xe8>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000008 	.word	0x20000008
 8001908:	e000e010 	.word	0xe000e010
 800190c:	20000000 	.word	0x20000000
 8001910:	20000004 	.word	0x20000004

08001914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001918:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_IncTick+0x20>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <HAL_IncTick+0x24>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4413      	add	r3, r2
 8001924:	4a04      	ldr	r2, [pc, #16]	@ (8001938 <HAL_IncTick+0x24>)
 8001926:	6013      	str	r3, [r2, #0]
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000008 	.word	0x20000008
 8001938:	20000998 	.word	0x20000998

0800193c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return uwTick;
 8001940:	4b03      	ldr	r3, [pc, #12]	@ (8001950 <HAL_GetTick+0x14>)
 8001942:	681b      	ldr	r3, [r3, #0]
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000998 	.word	0x20000998

08001954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800195c:	f7ff ffee 	bl	800193c <HAL_GetTick>
 8001960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196c:	d005      	beq.n	800197a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196e:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <HAL_Delay+0x44>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800197a:	bf00      	nop
 800197c:	f7ff ffde 	bl	800193c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	429a      	cmp	r2, r3
 800198a:	d8f7      	bhi.n	800197c <HAL_Delay+0x28>
  {
  }
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000008 	.word	0x20000008

0800199c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ac:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019b8:	4013      	ands	r3, r2
 80019ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ce:	4a04      	ldr	r2, [pc, #16]	@ (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	60d3      	str	r3, [r2, #12]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e8:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <__NVIC_GetPriorityGrouping+0x18>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	0a1b      	lsrs	r3, r3, #8
 80019ee:	f003 0307 	and.w	r3, r3, #7
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	db0a      	blt.n	8001a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	490c      	ldr	r1, [pc, #48]	@ (8001a4c <__NVIC_SetPriority+0x4c>)
 8001a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a1e:	0112      	lsls	r2, r2, #4
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	440b      	add	r3, r1
 8001a24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a28:	e00a      	b.n	8001a40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4908      	ldr	r1, [pc, #32]	@ (8001a50 <__NVIC_SetPriority+0x50>)
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	3b04      	subs	r3, #4
 8001a38:	0112      	lsls	r2, r2, #4
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	761a      	strb	r2, [r3, #24]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000e100 	.word	0xe000e100
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	@ 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f1c3 0307 	rsb	r3, r3, #7
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	bf28      	it	cs
 8001a72:	2304      	movcs	r3, #4
 8001a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	2b06      	cmp	r3, #6
 8001a7c:	d902      	bls.n	8001a84 <NVIC_EncodePriority+0x30>
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3b03      	subs	r3, #3
 8001a82:	e000      	b.n	8001a86 <NVIC_EncodePriority+0x32>
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43da      	mvns	r2, r3
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	401a      	ands	r2, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	43d9      	mvns	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	4313      	orrs	r3, r2
         );
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3724      	adds	r7, #36	@ 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ff6a 	bl	800199c <__NVIC_SetPriorityGrouping>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ade:	f7ff ff81 	bl	80019e4 <__NVIC_GetPriorityGrouping>
 8001ae2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	68b9      	ldr	r1, [r7, #8]
 8001ae8:	6978      	ldr	r0, [r7, #20]
 8001aea:	f7ff ffb3 	bl	8001a54 <NVIC_EncodePriority>
 8001aee:	4602      	mov	r2, r0
 8001af0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001af4:	4611      	mov	r1, r2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff82 	bl	8001a00 <__NVIC_SetPriority>
}
 8001afc:	bf00      	nop
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b14:	d301      	bcc.n	8001b1a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00d      	b.n	8001b36 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b44 <HAL_SYSTICK_Config+0x40>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001b22:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <HAL_SYSTICK_Config+0x40>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_SYSTICK_Config+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a05      	ldr	r2, [pc, #20]	@ (8001b44 <HAL_SYSTICK_Config+0x40>)
 8001b2e:	f043 0303 	orr.w	r3, r3, #3
 8001b32:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000e010 	.word	0xe000e010

08001b48 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d844      	bhi.n	8001be0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001b56:	a201      	add	r2, pc, #4	@ (adr r2, 8001b5c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5c:	08001b7f 	.word	0x08001b7f
 8001b60:	08001b9d 	.word	0x08001b9d
 8001b64:	08001bbf 	.word	0x08001bbf
 8001b68:	08001be1 	.word	0x08001be1
 8001b6c:	08001b71 	.word	0x08001b71
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001b70:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a1e      	ldr	r2, [pc, #120]	@ (8001bf0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	6013      	str	r3, [r2, #0]
      break;
 8001b7c:	e031      	b.n	8001be2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b84:	f023 0304 	bic.w	r3, r3, #4
 8001b88:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001b90:	4a18      	ldr	r2, [pc, #96]	@ (8001bf4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b92:	f023 030c 	bic.w	r3, r3, #12
 8001b96:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001b9a:	e022      	b.n	8001be2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001b9c:	4b14      	ldr	r3, [pc, #80]	@ (8001bf0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a13      	ldr	r2, [pc, #76]	@ (8001bf0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ba2:	f023 0304 	bic.w	r3, r3, #4
 8001ba6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001ba8:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001baa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001bae:	f023 030c 	bic.w	r3, r3, #12
 8001bb2:	4a10      	ldr	r2, [pc, #64]	@ (8001bf4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001bbc:	e011      	b.n	8001be2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001bc4:	f023 0304 	bic.w	r3, r3, #4
 8001bc8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001bca:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001bcc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001bd0:	f023 030c 	bic.w	r3, r3, #12
 8001bd4:	4a07      	ldr	r2, [pc, #28]	@ (8001bf4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001bd6:	f043 0308 	orr.w	r3, r3, #8
 8001bda:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001bde:	e000      	b.n	8001be2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001be0:	bf00      	nop
  }
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000e010 	.word	0xe000e010
 8001bf4:	44020c00 	.word	0x44020c00

08001bf8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001bfe:	4b17      	ldr	r3, [pc, #92]	@ (8001c5c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	e01e      	b.n	8001c4e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001c10:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001c12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d00f      	beq.n	8001c42 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d80f      	bhi.n	8001c48 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d003      	beq.n	8001c3c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001c34:	e008      	b.n	8001c48 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001c36:	2300      	movs	r3, #0
 8001c38:	607b      	str	r3, [r7, #4]
        break;
 8001c3a:	e008      	b.n	8001c4e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	607b      	str	r3, [r7, #4]
        break;
 8001c40:	e005      	b.n	8001c4e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001c42:	2302      	movs	r3, #2
 8001c44:	607b      	str	r3, [r7, #4]
        break;
 8001c46:	e002      	b.n	8001c4e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	607b      	str	r3, [r7, #4]
        break;
 8001c4c:	bf00      	nop
    }
  }
  return systick_source;
 8001c4e:	687b      	ldr	r3, [r7, #4]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000e010 	.word	0xe000e010
 8001c60:	44020c00 	.word	0x44020c00

08001c64 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e037      	b.n	8001ce6 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d119      	bne.n	8001cb6 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a1a      	ldr	r2, [pc, #104]	@ (8001cf0 <HAL_DCACHE_Init+0x8c>)
 8001c86:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a1a      	ldr	r2, [pc, #104]	@ (8001cf4 <HAL_DCACHE_Init+0x90>)
 8001c8c:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a19      	ldr	r2, [pc, #100]	@ (8001cf8 <HAL_DCACHE_Init+0x94>)
 8001c92:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a19      	ldr	r2, [pc, #100]	@ (8001cfc <HAL_DCACHE_Init+0x98>)
 8001c98:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a18      	ldr	r2, [pc, #96]	@ (8001d00 <HAL_DCACHE_Init+0x9c>)
 8001c9e:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a16      	ldr	r2, [pc, #88]	@ (8001d04 <HAL_DCACHE_Init+0xa0>)
 8001cac:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f814 	bl	8001d08 <HAL_DCACHE_Enable>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	73fb      	strb	r3, [r7, #15]

  return status;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	08001da7 	.word	0x08001da7
 8001cf4:	08001d57 	.word	0x08001d57
 8001cf8:	08001d6b 	.word	0x08001d6b
 8001cfc:	08001d93 	.word	0x08001d93
 8001d00:	08001d7f 	.word	0x08001d7f
 8001d04:	08000ddd 	.word	0x08000ddd

08001d08 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e015      	b.n	8001d4a <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0309 	and.w	r3, r3, #9
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	73fb      	strb	r3, [r7, #15]
 8001d30:	e00a      	b.n	8001d48 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
  }

  return status;
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <HAL_FLASH_Unlock+0x40>)
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00d      	beq.n	8001dee <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dfc <HAL_FLASH_Unlock+0x40>)
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <HAL_FLASH_Unlock+0x44>)
 8001dd6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8001dd8:	4b08      	ldr	r3, [pc, #32]	@ (8001dfc <HAL_FLASH_Unlock+0x40>)
 8001dda:	4a0a      	ldr	r2, [pc, #40]	@ (8001e04 <HAL_FLASH_Unlock+0x48>)
 8001ddc:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8001dde:	4b07      	ldr	r3, [pc, #28]	@ (8001dfc <HAL_FLASH_Unlock+0x40>)
 8001de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8001dee:	79fb      	ldrb	r3, [r7, #7]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	40022000 	.word	0x40022000
 8001e00:	45670123 	.word	0x45670123
 8001e04:	cdef89ab 	.word	0xcdef89ab

08001e08 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 8001e12:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <HAL_FLASH_Lock+0x34>)
 8001e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e16:	4a09      	ldr	r2, [pc, #36]	@ (8001e3c <HAL_FLASH_Lock+0x34>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 8001e1e:	4b07      	ldr	r3, [pc, #28]	@ (8001e3c <HAL_FLASH_Lock+0x34>)
 8001e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	40022000 	.word	0x40022000

08001e40 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001e4e:	e136      	b.n	80020be <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2101      	movs	r1, #1
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8128 	beq.w	80020b8 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x38>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b12      	cmp	r3, #18
 8001e76:	d125      	bne.n	8001ec4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	08da      	lsrs	r2, r3, #3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3208      	adds	r2, #8
 8001e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e84:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	f003 020f 	and.w	r2, r3, #15
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	08da      	lsrs	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3208      	adds	r2, #8
 8001ebe:	6979      	ldr	r1, [r7, #20]
 8001ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	2203      	movs	r2, #3
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0203 	and.w	r2, r3, #3
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d00b      	beq.n	8001f18 <HAL_GPIO_Init+0xd8>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d007      	beq.n	8001f18 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f0c:	2b11      	cmp	r3, #17
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b12      	cmp	r3, #18
 8001f16:	d130      	bne.n	8001f7a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f4e:	2201      	movs	r2, #1
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	091b      	lsrs	r3, r3, #4
 8001f64:	f003 0201 	and.w	r2, r3, #1
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d017      	beq.n	8001fb2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	4013      	ands	r3, r2
 8001f98:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d07c      	beq.n	80020b8 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001fbe:	4a47      	ldr	r2, [pc, #284]	@ (80020dc <HAL_GPIO_Init+0x29c>)
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3318      	adds	r3, #24
 8001fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fca:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	0a9a      	lsrs	r2, r3, #10
 8001fe6:	4b3e      	ldr	r3, [pc, #248]	@ (80020e0 <HAL_GPIO_Init+0x2a0>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	f002 0203 	and.w	r2, r2, #3
 8001ff0:	00d2      	lsls	r2, r2, #3
 8001ff2:	4093      	lsls	r3, r2
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001ffa:	4938      	ldr	r1, [pc, #224]	@ (80020dc <HAL_GPIO_Init+0x29c>)
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	3318      	adds	r3, #24
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002008:	4b34      	ldr	r3, [pc, #208]	@ (80020dc <HAL_GPIO_Init+0x29c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	43db      	mvns	r3, r3
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4013      	ands	r3, r2
 8002016:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800202c:	4a2b      	ldr	r2, [pc, #172]	@ (80020dc <HAL_GPIO_Init+0x29c>)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002032:	4b2a      	ldr	r3, [pc, #168]	@ (80020dc <HAL_GPIO_Init+0x29c>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	43db      	mvns	r3, r3
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	4013      	ands	r3, r2
 8002040:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002056:	4a21      	ldr	r2, [pc, #132]	@ (80020dc <HAL_GPIO_Init+0x29c>)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800205c:	4b1f      	ldr	r3, [pc, #124]	@ (80020dc <HAL_GPIO_Init+0x29c>)
 800205e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002062:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	43db      	mvns	r3, r3
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	4013      	ands	r3, r2
 800206c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002082:	4a16      	ldr	r2, [pc, #88]	@ (80020dc <HAL_GPIO_Init+0x29c>)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800208a:	4b14      	ldr	r3, [pc, #80]	@ (80020dc <HAL_GPIO_Init+0x29c>)
 800208c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002090:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	43db      	mvns	r3, r3
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4013      	ands	r3, r2
 800209a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80020b0:	4a0a      	ldr	r2, [pc, #40]	@ (80020dc <HAL_GPIO_Init+0x29c>)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	3301      	adds	r3, #1
 80020bc:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	fa22 f303 	lsr.w	r3, r2, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f47f aec1 	bne.w	8001e50 <HAL_GPIO_Init+0x10>
  }
}
 80020ce:	bf00      	nop
 80020d0:	bf00      	nop
 80020d2:	371c      	adds	r7, #28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	44022000 	.word	0x44022000
 80020e0:	002f7f7f 	.word	0x002f7f7f

080020e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
 80020f0:	4613      	mov	r3, r2
 80020f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020f4:	787b      	ldrb	r3, [r7, #1]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020fa:	887a      	ldrh	r2, [r7, #2]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002100:	e002      	b.n	8002108 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002102:	887a      	ldrh	r2, [r7, #2]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af02      	add	r7, sp, #8
 800211a:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e042      	b.n	80021ac <HAL_HCD_Init+0x98>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 335a 	ldrb.w	r3, [r3, #858]	@ 0x35a
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fa18 	bl	8001570 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }
  hhcd->State = HAL_HCD_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2203      	movs	r2, #3
 8002144:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a

  /* Disable the Interrupts */
  (void)__HAL_HCD_DISABLE(hhcd);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f006 ff30 	bl	8008fb2 <USB_DisableGlobalInt>

  /* Dma not supported, force to zero */
  hhcd->Init.dma_enable = 0U;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	719a      	strb	r2, [r3, #6]

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	7c1a      	ldrb	r2, [r3, #16]
 8002160:	f88d 2000 	strb.w	r2, [sp]
 8002164:	3304      	adds	r3, #4
 8002166:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002168:	f006 ff05 	bl	8008f76 <USB_CoreInit>

  /* Force Host Mode */
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2101      	movs	r1, #1
 8002172:	4618      	mov	r0, r3
 8002174:	f006 ff32 	bl	8008fdc <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	7c1a      	ldrb	r2, [r3, #16]
 8002180:	f88d 2000 	strb.w	r2, [sp]
 8002184:	3304      	adds	r3, #4
 8002186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002188:	f006 ff4b 	bl	8009022 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a

  /* Host Port State */
  hhcd->HostState = HCD_HCD_STATE_DISCONNECTED;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

  /* Init PMA Address */
  (void)HAL_HCD_PMAReset(hhcd);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f809 	bl	80021b4 <HAL_HCD_PMAReset>

  hhcd->State = HAL_HCD_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_HCD_PMAReset>:
  * @brief  PMA Reset
  * @param  hhcd  Host instance
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HCD_PMAReset(HCD_HandleTypeDef *hhcd)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Reset All PMA Entry */
  for (uint8_t i = 0U; i < PMA_BLOCKS; i++)
 80021bc:	2300      	movs	r3, #0
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	e008      	b.n	80021d4 <HAL_HCD_PMAReset+0x20>
  {
    hhcd->PMALookupTable[i] = 0U;
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	32ce      	adds	r2, #206	@ 0xce
 80021c8:	2100      	movs	r1, #0
 80021ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (uint8_t i = 0U; i < PMA_BLOCKS; i++)
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	3301      	adds	r3, #1
 80021d2:	73fb      	strb	r3, [r7, #15]
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	2b07      	cmp	r3, #7
 80021d8:	d9f3      	bls.n	80021c2 <HAL_HCD_PMAReset+0xe>
  }

  /* Allocate a Space for buffer descriptor table depending on the Host channel number */
  for (uint8_t i = 0U; i < hhcd->Init.Host_channels; i++)
 80021da:	2300      	movs	r3, #0
 80021dc:	73bb      	strb	r3, [r7, #14]
 80021de:	e00d      	b.n	80021fc <HAL_HCD_PMAReset+0x48>
  {
    hhcd->PMALookupTable[0] |= ((uint32_t)1U << i);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f8d3 2338 	ldr.w	r2, [r3, #824]	@ 0x338
 80021e6:	7bbb      	ldrb	r3, [r7, #14]
 80021e8:	2101      	movs	r1, #1
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
  for (uint8_t i = 0U; i < hhcd->Init.Host_channels; i++)
 80021f6:	7bbb      	ldrb	r3, [r7, #14]
 80021f8:	3301      	adds	r3, #1
 80021fa:	73bb      	strb	r3, [r7, #14]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	795b      	ldrb	r3, [r3, #5]
 8002200:	7bba      	ldrb	r2, [r7, #14]
 8002202:	429a      	cmp	r2, r3
 8002204:	d3ec      	bcc.n	80021e0 <HAL_HCD_PMAReset+0x2c>
  }

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e08d      	b.n	8002342 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d106      	bne.n	8002240 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7fe fdf0 	bl	8000e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2224      	movs	r2, #36	@ 0x24
 8002244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0201 	bic.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002264:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002274:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d107      	bne.n	800228e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	e006      	b.n	800229c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800229a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d108      	bne.n	80022b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	e007      	b.n	80022c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69d9      	ldr	r1, [r3, #28]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1a      	ldr	r2, [r3, #32]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2220      	movs	r2, #32
 800232e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b20      	cmp	r3, #32
 800235e:	d138      	bne.n	80023d2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800236a:	2302      	movs	r3, #2
 800236c:	e032      	b.n	80023d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2224      	movs	r2, #36	@ 0x24
 800237a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0201 	bic.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800239c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6819      	ldr	r1, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	e000      	b.n	80023d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023d2:	2302      	movs	r3, #2
  }
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	d139      	bne.n	800246a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002400:	2302      	movs	r3, #2
 8002402:	e033      	b.n	800246c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2224      	movs	r2, #36	@ 0x24
 8002410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0201 	bic.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002432:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 0201 	orr.w	r2, r2, #1
 8002454:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2220      	movs	r2, #32
 800245a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	e000      	b.n	800246c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800246a:	2302      	movs	r3, #2
  }
}
 800246c:	4618      	mov	r0, r3
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e129      	b.n	80026de <HAL_I2S_Init+0x266>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7fe fd76 	bl	8000f90 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d107      	bne.n	80024ca <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0201 	bic.w	r2, r2, #1
 80024c8:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2200      	movs	r2, #0
 80024d0:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d008      	beq.n	80024ec <HAL_I2S_Init+0x74>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d004      	beq.n	80024ec <HAL_I2S_Init+0x74>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b0a      	cmp	r3, #10
 80024e8:	f040 80a3 	bne.w	8002632 <HAL_I2S_Init+0x1ba>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d074      	beq.n	80025de <HAL_I2S_Init+0x166>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 80024fc:	2302      	movs	r3, #2
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	e001      	b.n	8002506 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8002502:	2301      	movs	r3, #1
 8002504:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b30      	cmp	r3, #48	@ 0x30
 800250c:	d003      	beq.n	8002516 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002512:	2bb0      	cmp	r3, #176	@ 0xb0
 8002514:	d102      	bne.n	800251c <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8002516:	2301      	movs	r3, #1
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	e001      	b.n	8002520 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
      if (hi2s->Instance == SPI1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a70      	ldr	r2, [pc, #448]	@ (80026e8 <HAL_I2S_Init+0x270>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d107      	bne.n	800253a <HAL_I2S_Init+0xc2>
      {
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI1);
 800252a:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800252e:	f04f 0100 	mov.w	r1, #0
 8002532:	f003 fe35 	bl	80061a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	e013      	b.n	8002562 <HAL_I2S_Init+0xea>
      }
      else if (hi2s->Instance == SPI2)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a6b      	ldr	r2, [pc, #428]	@ (80026ec <HAL_I2S_Init+0x274>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d107      	bne.n	8002554 <HAL_I2S_Init+0xdc>
      {
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI2);
 8002544:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002548:	f04f 0100 	mov.w	r1, #0
 800254c:	f003 fe28 	bl	80061a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	e006      	b.n	8002562 <HAL_I2S_Init+0xea>
      }
      else /* SPI3 source clock */
      {
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI3);
 8002554:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 8002558:	f04f 0100 	mov.w	r1, #0
 800255c:	f003 fe20 	bl	80061a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002560:	60f8      	str	r0, [r7, #12]
      }

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800256a:	d113      	bne.n	8002594 <HAL_I2S_Init+0x11c>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800256c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	fa22 f303 	lsr.w	r3, r2, r3
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	fbb2 f2f3 	udiv	r2, r2, r3
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	461a      	mov	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	fbb2 f3f3 	udiv	r3, r2, r3
 800258e:	3305      	adds	r3, #5
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	e014      	b.n	80025be <HAL_I2S_Init+0x146>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002594:	2220      	movs	r2, #32
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	fa22 f303 	lsr.w	r3, r2, r3
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	fb02 f303 	mul.w	r3, r2, r3
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	461a      	mov	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ba:	3305      	adds	r3, #5
 80025bc:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4a4b      	ldr	r2, [pc, #300]	@ (80026f0 <HAL_I2S_Init+0x278>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	08db      	lsrs	r3, r3, #3
 80025c8:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	085b      	lsrs	r3, r3, #1
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	e003      	b.n	80025e6 <HAL_I2S_Init+0x16e>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 80025de:	2302      	movs	r3, #2
 80025e0:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d102      	bne.n	80025f2 <HAL_I2S_Init+0x17a>
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d002      	beq.n	80025f8 <HAL_I2S_Init+0x180>
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	2bff      	cmp	r3, #255	@ 0xff
 80025f6:	d907      	bls.n	8002608 <HAL_I2S_Init+0x190>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025fc:	f043 0210 	orr.w	r2, r3, #16
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e06a      	b.n	80026de <HAL_I2S_Init+0x266>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_I2S_Init+0x19a>
    {
      i2sodd = 1UL;
 800260e:	2301      	movs	r3, #1
 8002610:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002618:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800261c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	0411      	lsls	r1, r2, #16
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	0612      	lsls	r2, r2, #24
 8002628:	4311      	orrs	r1, r2
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	430b      	orrs	r3, r1
 8002630:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002638:	4b2e      	ldr	r3, [pc, #184]	@ (80026f4 <HAL_I2S_Init+0x27c>)
 800263a:	4013      	ands	r3, r2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6851      	ldr	r1, [r2, #4]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6892      	ldr	r2, [r2, #8]
 8002644:	4311      	orrs	r1, r2
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68d2      	ldr	r2, [r2, #12]
 800264a:	4311      	orrs	r1, r2
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6992      	ldr	r2, [r2, #24]
 8002650:	4311      	orrs	r1, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6a12      	ldr	r2, [r2, #32]
 8002656:	4311      	orrs	r1, r2
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800265c:	4311      	orrs	r1, r2
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6912      	ldr	r2, [r2, #16]
 8002662:	430a      	orrs	r2, r1
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8002678:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002688:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69da      	ldr	r2, [r3, #28]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d007      	beq.n	80026b8 <HAL_I2S_Init+0x240>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b06      	cmp	r3, #6
 80026ae:	d003      	beq.n	80026b8 <HAL_I2S_Init+0x240>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b0a      	cmp	r3, #10
 80026b6:	d10a      	bne.n	80026ce <HAL_I2S_Init+0x256>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40013000 	.word	0x40013000
 80026ec:	40003800 	.word	0x40003800
 80026f0:	cccccccd 	.word	0xcccccccd
 80026f4:	fdff9040 	.word	0xfdff9040

080026f8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80026fc:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <HAL_ICACHE_Enable+0x1c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a04      	ldr	r2, [pc, #16]	@ (8002714 <HAL_ICACHE_Enable+0x1c>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40030400 	.word	0x40030400

08002718 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e070      	b.n	800280c <HAL_IWDG_Init+0xf4>

  /* Init the low level hardware */
  hiwdg->MspInitCallback(hiwdg);
#else
  /* Init the low level hardware */
  HAL_IWDG_MspInit(hiwdg);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f872 	bl	8002814 <HAL_IWDG_MspInit>
#endif /* USE_HAL_IWDG_REGISTER_CALLBACKS */

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8002738:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR, IWDG_WINR and EWCR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f245 5255 	movw	r2, #21845	@ 0x5555
 8002742:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6852      	ldr	r2, [r2, #4]
 800274c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6892      	ldr	r2, [r2, #8]
 8002756:	609a      	str	r2, [r3, #8]

  /* Check Reload update flag, before performing any reload of the counter, else previous value
  will be taken. */
  tickstart = HAL_GetTick();
 8002758:	f7ff f8f0 	bl	800193c <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 800275e:	e00f      	b.n	8002780 <HAL_IWDG_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002760:	f7ff f8ec 	bl	800193c <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b21      	cmp	r3, #33	@ 0x21
 800276c:	d908      	bls.n	8002780 <HAL_IWDG_Init+0x68>
    {
      if ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_IWDG_Init+0x68>
      {
        return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e045      	b.n	800280c <HAL_IWDG_Init+0xf4>
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1e8      	bne.n	8002760 <HAL_IWDG_Init+0x48>
      }
    }
  }

  if (hiwdg->Init.EWI == IWDG_EWI_DISABLE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d105      	bne.n	80027a2 <HAL_IWDG_Init+0x8a>
  {
    /* EWI comparator value equal 0, disable the early wakeup interrupt
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator to 0x00 */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIC;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800279e:	615a      	str	r2, [r3, #20]
 80027a0:	e006      	b.n	80027b0 <HAL_IWDG_Init+0x98>
  else
  {
    /* EWI comparator value different from 0, enable the early wakeup interrupt,
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator value */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIE | IWDG_EWCR_EWIC | hiwdg->Init.EWI;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80027ae:	615a      	str	r2, [r3, #20]
  }

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80027b0:	f7ff f8c4 	bl	800193c <HAL_GetTick>
 80027b4:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80027b6:	e00f      	b.n	80027d8 <HAL_IWDG_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80027b8:	f7ff f8c0 	bl	800193c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b21      	cmp	r3, #33	@ 0x21
 80027c4:	d908      	bls.n	80027d8 <HAL_IWDG_Init+0xc0>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_IWDG_Init+0xc0>
      {
        return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e019      	b.n	800280c <HAL_IWDG_Init+0xf4>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1e8      	bne.n	80027b8 <HAL_IWDG_Init+0xa0>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d005      	beq.n	8002800 <HAL_IWDG_Init+0xe8>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	68d2      	ldr	r2, [r2, #12]
 80027fc:	611a      	str	r2, [r3, #16]
 80027fe:	e004      	b.n	800280a <HAL_IWDG_Init+0xf2>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002808:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_IWDG_MspInit>:
  *         to avoid multiple initialize when HAL_IWDG_Init function is called
  *         again to change parameters.
  * @retval None
  */
__weak void HAL_IWDG_MspInit(IWDG_HandleTypeDef *hiwdg)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  UNUSED(hiwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_IWDG_MspInit could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e031      	b.n	800289e <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d105      	bne.n	8002852 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7fe fc07 	bl	8001060 <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2203      	movs	r2, #3
 8002856:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f824 	bl	80028a8 <HAL_MMC_InitCard>
 8002860:	4603      	mov	r3, r0
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e019      	b.n	800289e <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	4619      	mov	r1, r3
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fb51 	bl	8002f34 <HAL_MMC_ConfigWideBusOperation>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b08d      	sub	sp, #52	@ 0x34
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80028bc:	2300      	movs	r3, #0
 80028be:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  if (hmmc->Instance == SDMMC1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a47      	ldr	r2, [pc, #284]	@ (80029e4 <HAL_MMC_InitCard+0x13c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d107      	bne.n	80028da <HAL_MMC_InitCard+0x32>
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80028ca:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80028ce:	f04f 0100 	mov.w	r1, #0
 80028d2:	f003 fc65 	bl	80061a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80028d6:	6278      	str	r0, [r7, #36]	@ 0x24
 80028d8:	e001      	b.n	80028de <HAL_MMC_InitCard+0x36>
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC2);
  }
#endif  /* SDMMC2 */
  else
  {
    sdmmc_clk = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  if (sdmmc_clk == 0U)
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <HAL_MMC_InitCard+0x50>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80028f2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e070      	b.n	80029da <HAL_MMC_InitCard+0x132>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 80028f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fa:	0a1b      	lsrs	r3, r3, #8
 80028fc:	4a3a      	ldr	r2, [pc, #232]	@ (80029e8 <HAL_MMC_InitCard+0x140>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	091b      	lsrs	r3, r3, #4
 8002904:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681c      	ldr	r4, [r3, #0]
 800290a:	466a      	mov	r2, sp
 800290c:	f107 0318 	add.w	r3, r7, #24
 8002910:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002914:	e882 0003 	stmia.w	r2, {r0, r1}
 8002918:	f107 030c 	add.w	r3, r7, #12
 800291c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800291e:	4620      	mov	r0, r4
 8002920:	f005 ff4a 	bl	80087b8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f005 ff7c 	bl	8008826 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_MMC_InitCard+0x98>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800293a:	fbb2 f3f3 	udiv	r3, r2, r3
 800293e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8002940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002942:	2b00      	cmp	r3, #0
 8002944:	d007      	beq.n	8002956 <HAL_MMC_InitCard+0xae>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8002946:	4a29      	ldr	r2, [pc, #164]	@ (80029ec <HAL_MMC_InitCard+0x144>)
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	3301      	adds	r3, #1
 8002950:	4618      	mov	r0, r3
 8002952:	f7fe ffff 	bl	8001954 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fcb6 	bl	80032c8 <MMC_PowerON>
 800295c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00b      	beq.n	800297c <HAL_MMC_InitCard+0xd4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e02e      	b.n	80029da <HAL_MMC_InitCard+0x132>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 fba5 	bl	80030cc <MMC_InitCard>
 8002982:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <HAL_MMC_InitCard+0xfa>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e01b      	b.n	80029da <HAL_MMC_InitCard+0x132>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029aa:	4618      	mov	r0, r3
 80029ac:	f005 ffd0 	bl	8008950 <SDMMC_CmdBlockLength>
 80029b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00f      	beq.n	80029d8 <HAL_MMC_InitCard+0x130>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a0c      	ldr	r2, [pc, #48]	@ (80029f0 <HAL_MMC_InitCard+0x148>)
 80029be:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <HAL_MMC_InitCard+0x132>
  }

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	372c      	adds	r7, #44	@ 0x2c
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd90      	pop	{r4, r7, pc}
 80029e2:	bf00      	nop
 80029e4:	46008000 	.word	0x46008000
 80029e8:	014f8b59 	.word	0x014f8b59
 80029ec:	00012110 	.word	0x00012110
 80029f0:	1fe00fff 	.word	0x1fe00fff

080029f4 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a06:	0f9b      	lsrs	r3, r3, #30
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a12:	0e9b      	lsrs	r3, r3, #26
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a24:	0e1b      	lsrs	r3, r3, #24
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a36:	0c1b      	lsrs	r3, r3, #16
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a42:	0a1b      	lsrs	r3, r3, #8
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a58:	0d1b      	lsrs	r3, r3, #20
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a64:	0c1b      	lsrs	r3, r3, #16
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a76:	0bdb      	lsrs	r3, r3, #15
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a88:	0b9b      	lsrs	r3, r3, #14
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9a:	0b5b      	lsrs	r3, r3, #13
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aac:	0b1b      	lsrs	r3, r3, #12
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2200      	movs	r2, #0
 8002abe:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8002ac0:	f107 010c 	add.w	r1, r7, #12
 8002ac4:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 8002ac8:	22d4      	movs	r2, #212	@ 0xd4
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fc4c 	bl	8003368 <MMC_ReadExtCSD>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e129      	b.n	8002d2e <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d163      	bne.n	8002baa <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae6:	009a      	lsls	r2, r3, #2
 8002ae8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002aec:	4013      	ands	r3, r2
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002af2:	0f92      	lsrs	r2, r2, #30
 8002af4:	431a      	orrs	r2, r3
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afe:	0edb      	lsrs	r3, r3, #27
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b10:	0e1b      	lsrs	r3, r3, #24
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b22:	0d5b      	lsrs	r3, r3, #21
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b34:	0c9b      	lsrs	r3, r3, #18
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b46:	0bdb      	lsrs	r3, r3, #15
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	7e1b      	ldrb	r3, [r3, #24]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	3302      	adds	r3, #2
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002b74:	fb03 f202 	mul.w	r2, r3, r2
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	645a      	str	r2, [r3, #68]	@ 0x44
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	7a1b      	ldrb	r3, [r3, #8]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	2201      	movs	r2, #1
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	649a      	str	r2, [r3, #72]	@ 0x48

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / MMC_BLOCKSIZE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b96:	0a52      	lsrs	r2, r2, #9
 8002b98:	fb03 f202 	mul.w	r2, r3, r2
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hmmc->MmcCard.LogBlockSize = MMC_BLOCKSIZE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ba6:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ba8:	e023      	b.n	8002bf2 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d10f      	bne.n	8002bd2 <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	645a      	str	r2, [r3, #68]	@ 0x44
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	64da      	str	r2, [r3, #76]	@ 0x4c
    hmmc->MmcCard.BlockSize = MMC_BLOCKSIZE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bc6:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	651a      	str	r2, [r3, #80]	@ 0x50
 8002bd0:	e00f      	b.n	8002bf2 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a58      	ldr	r2, [pc, #352]	@ (8002d38 <HAL_MMC_GetCardCSD+0x344>)
 8002bd8:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bde:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e09d      	b.n	8002d2e <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf6:	0b9b      	lsrs	r3, r3, #14
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c08:	09db      	lsrs	r3, r3, #7
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c2a:	0fdb      	lsrs	r3, r3, #31
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c36:	0f5b      	lsrs	r3, r3, #29
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c48:	0e9b      	lsrs	r3, r3, #26
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c5a:	0d9b      	lsrs	r3, r3, #22
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c6c:	0d5b      	lsrs	r3, r3, #21
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c88:	0c1b      	lsrs	r3, r3, #16
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c9c:	0bdb      	lsrs	r3, r3, #15
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cb0:	0b9b      	lsrs	r3, r3, #14
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc4:	0b5b      	lsrs	r3, r3, #13
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd8:	0b1b      	lsrs	r3, r3, #12
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cec:	0a9b      	lsrs	r3, r3, #10
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d00:	0a1b      	lsrs	r3, r3, #8
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d14:	085b      	lsrs	r3, r3, #1
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	1fe00fff 	.word	0x1fe00fff

08002d3c <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08e      	sub	sp, #56	@ 0x38
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002d48:	f7fe fdf8 	bl	800193c <HAL_GetTick>
 8002d4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d107      	bne.n	8002d64 <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d58:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0de      	b.n	8002f22 <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	f040 80d7 	bne.w	8002f20 <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	635a      	str	r2, [r3, #52]	@ 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2200      	movs	r2, #0
 8002d86:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d90:	613b      	str	r3, [r7, #16]
    config.DataLength    = MMC_BLOCKSIZE;
 8002d92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d96:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002d98:	2390      	movs	r3, #144	@ 0x90
 8002d9a:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8002da4:	2300      	movs	r3, #0
 8002da6:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f107 0210 	add.w	r2, r7, #16
 8002db0:	4611      	mov	r1, r2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f005 fda0 	bl	80088f8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dc6:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f005 feec 	bl	8008bac <SDMMC_CmdSendEXTCSD>
 8002dd4:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 8002dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d045      	beq.n	8002e68 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a52      	ldr	r2, [pc, #328]	@ (8002f2c <HAL_MMC_GetCardExtCSD+0x1f0>)
 8002de2:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dea:	431a      	orrs	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e092      	b.n	8002f22 <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d013      	beq.n	8002e32 <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e0e:	e00d      	b.n	8002e2c <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f005 fcf9 	bl	800880c <SDMMC_ReadFIFO>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1e:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 8002e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e22:	3304      	adds	r3, #4
 8002e24:	633b      	str	r3, [r7, #48]	@ 0x30
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8002e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e28:	3301      	adds	r3, #1
 8002e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e2e:	2b07      	cmp	r3, #7
 8002e30:	d9ee      	bls.n	8002e10 <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8002e32:	f7fe fd83 	bl	800193c <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d902      	bls.n	8002e48 <HAL_MMC_GetCardExtCSD+0x10c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10f      	bne.n	8002e68 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a37      	ldr	r2, [pc, #220]	@ (8002f2c <HAL_MMC_GetCardExtCSD+0x1f0>)
 8002e4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e54:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	635a      	str	r2, [r3, #52]	@ 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e05c      	b.n	8002f22 <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e6e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0c2      	beq.n	8002dfc <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e84:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00f      	beq.n	8002eb4 <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a24      	ldr	r2, [pc, #144]	@ (8002f2c <HAL_MMC_GetCardExtCSD+0x1f0>)
 8002e9a:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea0:	f043 0208 	orr.w	r2, r3, #8
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e036      	b.n	8002f22 <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00f      	beq.n	8002ee2 <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a19      	ldr	r2, [pc, #100]	@ (8002f2c <HAL_MMC_GetCardExtCSD+0x1f0>)
 8002ec8:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ece:	f043 0202 	orr.w	r2, r3, #2
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e01f      	b.n	8002f22 <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00f      	beq.n	8002f10 <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8002f2c <HAL_MMC_GetCardExtCSD+0x1f0>)
 8002ef6:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e008      	b.n	8002f22 <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a06      	ldr	r2, [pc, #24]	@ (8002f30 <HAL_MMC_GetCardExtCSD+0x1f4>)
 8002f16:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3738      	adds	r7, #56	@ 0x38
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	1fe00fff 	.word	0x1fe00fff
 8002f30:	18000f3a 	.word	0x18000f3a

08002f34 <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 8002f34:	b5b0      	push	{r4, r5, r7, lr}
 8002f36:	b08c      	sub	sp, #48	@ 0x30
 8002f38:	af02      	add	r7, sp, #8
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2203      	movs	r2, #3
 8002f46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d014      	beq.n	8002f82 <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d006      	beq.n	8002f74 <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 8002f66:	2204      	movs	r2, #4
 8002f68:	6839      	ldr	r1, [r7, #0]
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 faf0 	bl	8003550 <MMC_PwrClassUpdate>
 8002f70:	6238      	str	r0, [r7, #32]
 8002f72:	e00c      	b.n	8002f8e <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 8002f74:	2202      	movs	r2, #2
 8002f76:	6839      	ldr	r1, [r7, #0]
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fae9 	bl	8003550 <MMC_PwrClassUpdate>
 8002f7e:	6238      	str	r0, [r7, #32]
 8002f80:	e005      	b.n	8002f8e <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 8002f82:	2201      	movs	r2, #1
 8002f84:	6839      	ldr	r1, [r7, #0]
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fae2 	bl	8003550 <MMC_PwrClassUpdate>
 8002f8c:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d17b      	bne.n	800308c <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f9a:	d107      	bne.n	8002fac <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4946      	ldr	r1, [pc, #280]	@ (80030bc <HAL_MMC_ConfigWideBusOperation+0x188>)
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f005 fddf 	bl	8008b66 <SDMMC_CmdSwitch>
 8002fa8:	6238      	str	r0, [r7, #32]
 8002faa:	e019      	b.n	8002fe0 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fb2:	d107      	bne.n	8002fc4 <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4941      	ldr	r1, [pc, #260]	@ (80030c0 <HAL_MMC_ConfigWideBusOperation+0x18c>)
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f005 fdd3 	bl	8008b66 <SDMMC_CmdSwitch>
 8002fc0:	6238      	str	r0, [r7, #32]
 8002fc2:	e00d      	b.n	8002fe0 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d107      	bne.n	8002fda <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	493d      	ldr	r1, [pc, #244]	@ (80030c4 <HAL_MMC_ConfigWideBusOperation+0x190>)
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f005 fdc8 	bl	8008b66 <SDMMC_CmdSwitch>
 8002fd6:	6238      	str	r0, [r7, #32]
 8002fd8:	e002      	b.n	8002fe0 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 8002fda:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002fde:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d152      	bne.n	800308c <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 8002fe6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fea:	627b      	str	r3, [r7, #36]	@ 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f005 fd71 	bl	8008ae0 <SDMMC_CmdSendStatus>
 8002ffe:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d112      	bne.n	800302c <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2100      	movs	r1, #0
 800300c:	4618      	mov	r0, r3
 800300e:	f005 fc60 	bl	80088d2 <SDMMC_GetResponse>
 8003012:	61f8      	str	r0, [r7, #28]
        count--;
 8003014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003016:	3b01      	subs	r3, #1
 8003018:	627b      	str	r3, [r7, #36]	@ 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003020:	2b00      	cmp	r3, #0
 8003022:	d104      	bne.n	800302e <HAL_MMC_ConfigWideBusOperation+0xfa>
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1e0      	bne.n	8002fec <HAL_MMC_ConfigWideBusOperation+0xb8>
 800302a:	e000      	b.n	800302e <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 800302c:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	2b00      	cmp	r3, #0
 8003032:	d025      	beq.n	8003080 <HAL_MMC_ConfigWideBusOperation+0x14c>
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d122      	bne.n	8003080 <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003044:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003048:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 800304a:	e01f      	b.n	800308c <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f107 0408 	add.w	r4, r7, #8
 8003052:	1d1d      	adds	r5, r3, #4
 8003054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003058:	682b      	ldr	r3, [r5, #0]
 800305a:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681c      	ldr	r4, [r3, #0]
 8003064:	466a      	mov	r2, sp
 8003066:	f107 0314 	add.w	r3, r7, #20
 800306a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800306e:	e882 0003 	stmia.w	r2, {r0, r1}
 8003072:	f107 0308 	add.w	r3, r7, #8
 8003076:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003078:	4620      	mov	r0, r4
 800307a:	f005 fb9d 	bl	80087b8 <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 800307e:	e005      	b.n	800308c <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	2b00      	cmp	r3, #0
 8003084:	d102      	bne.n	800308c <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 8003086:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800308a:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00b      	beq.n	80030b2 <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a0a      	ldr	r2, [pc, #40]	@ (80030c8 <HAL_MMC_ConfigWideBusOperation+0x194>)
 80030a0:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3728      	adds	r7, #40	@ 0x28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bdb0      	pop	{r4, r5, r7, pc}
 80030bc:	03b70200 	.word	0x03b70200
 80030c0:	03b70100 	.word	0x03b70100
 80030c4:	03b70000 	.word	0x03b70000
 80030c8:	1fe00fff 	.word	0x1fe00fff

080030cc <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 80030cc:	b5b0      	push	{r4, r5, r7, lr}
 80030ce:	b096      	sub	sp, #88	@ 0x58
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 80030d4:	2302      	movs	r3, #2
 80030d6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f005 fbb2 	bl	8008848 <SDMMC_GetPowerState>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d102      	bne.n	80030f0 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 80030ea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80030ee:	e0e6      	b.n	80032be <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f005 fc8f 	bl	8008a18 <SDMMC_CmdSendCID>
 80030fa:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80030fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <MMC_InitCard+0x3a>
  {
    return errorstate;
 8003102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003104:	e0db      	b.n	80032be <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2100      	movs	r1, #0
 800310c:	4618      	mov	r0, r3
 800310e:	f005 fbe0 	bl	80088d2 <SDMMC_GetResponse>
 8003112:	4602      	mov	r2, r0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	665a      	str	r2, [r3, #100]	@ 0x64
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2104      	movs	r1, #4
 800311e:	4618      	mov	r0, r3
 8003120:	f005 fbd7 	bl	80088d2 <SDMMC_GetResponse>
 8003124:	4602      	mov	r2, r0
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	669a      	str	r2, [r3, #104]	@ 0x68
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2108      	movs	r1, #8
 8003130:	4618      	mov	r0, r3
 8003132:	f005 fbce 	bl	80088d2 <SDMMC_GetResponse>
 8003136:	4602      	mov	r2, r0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	66da      	str	r2, [r3, #108]	@ 0x6c
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	210c      	movs	r1, #12
 8003142:	4618      	mov	r0, r3
 8003144:	f005 fbc5 	bl	80088d2 <SDMMC_GetResponse>
 8003148:	4602      	mov	r2, r0
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8003156:	4611      	mov	r1, r2
 8003158:	4618      	mov	r0, r3
 800315a:	f005 fc9c 	bl	8008a96 <SDMMC_CmdSetRelAddMmc>
 800315e:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8003160:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <MMC_InitCard+0x9e>
  {
    return errorstate;
 8003166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003168:	e0a9      	b.n	80032be <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 800316a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317a:	041b      	lsls	r3, r3, #16
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f005 fc69 	bl	8008a56 <SDMMC_CmdSendCSD>
 8003184:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8003186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <MMC_InitCard+0xc4>
  {
    return errorstate;
 800318c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800318e:	e096      	b.n	80032be <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2100      	movs	r1, #0
 8003196:	4618      	mov	r0, r3
 8003198:	f005 fb9b 	bl	80088d2 <SDMMC_GetResponse>
 800319c:	4602      	mov	r2, r0
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2104      	movs	r1, #4
 80031a8:	4618      	mov	r0, r3
 80031aa:	f005 fb92 	bl	80088d2 <SDMMC_GetResponse>
 80031ae:	4602      	mov	r2, r0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2108      	movs	r1, #8
 80031ba:	4618      	mov	r0, r3
 80031bc:	f005 fb89 	bl	80088d2 <SDMMC_GetResponse>
 80031c0:	4602      	mov	r2, r0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	210c      	movs	r1, #12
 80031cc:	4618      	mov	r0, r3
 80031ce:	f005 fb80 	bl	80088d2 <SDMMC_GetResponse>
 80031d2:	4602      	mov	r2, r0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2104      	movs	r1, #4
 80031de:	4618      	mov	r0, r3
 80031e0:	f005 fb77 	bl	80088d2 <SDMMC_GetResponse>
 80031e4:	4603      	mov	r3, r0
 80031e6:	0d1a      	lsrs	r2, r3, #20
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	041b      	lsls	r3, r3, #16
 80031f6:	4619      	mov	r1, r3
 80031f8:	4610      	mov	r0, r2
 80031fa:	f005 fbcc 	bl	8008996 <SDMMC_CmdSelDesel>
 80031fe:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8003200:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MMC_InitCard+0x13e>
  {
    return errorstate;
 8003206:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003208:	e059      	b.n	80032be <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 800320a:	f107 031c 	add.w	r3, r7, #28
 800320e:	4619      	mov	r1, r3
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff fbef 	bl	80029f4 <HAL_MMC_GetCardCSD>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003220:	e04d      	b.n	80032be <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322a:	041b      	lsls	r3, r3, #16
 800322c:	4619      	mov	r1, r3
 800322e:	4610      	mov	r0, r2
 8003230:	f005 fc56 	bl	8008ae0 <SDMMC_CmdSendStatus>
 8003234:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8003236:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3374      	adds	r3, #116	@ 0x74
 800324c:	f04f 32ff 	mov.w	r2, #4294967295
 8003250:	4619      	mov	r1, r3
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff fd72 	bl	8002d3c <HAL_MMC_GetCardExtCSD>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003262:	e02c      	b.n	80032be <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326c:	041b      	lsls	r3, r3, #16
 800326e:	4619      	mov	r1, r3
 8003270:	4610      	mov	r0, r2
 8003272:	f005 fc35 	bl	8008ae0 <SDMMC_CmdSendStatus>
 8003276:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8003278:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003282:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f107 0408 	add.w	r4, r7, #8
 8003290:	1d1d      	adds	r5, r3, #4
 8003292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003296:	682b      	ldr	r3, [r5, #0]
 8003298:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 800329a:	2300      	movs	r3, #0
 800329c:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681c      	ldr	r4, [r3, #0]
 80032a2:	466a      	mov	r2, sp
 80032a4:	f107 0314 	add.w	r3, r7, #20
 80032a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80032ac:	e882 0003 	stmia.w	r2, {r0, r1}
 80032b0:	f107 0308 	add.w	r3, r7, #8
 80032b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032b6:	4620      	mov	r0, r4
 80032b8:	f005 fa7e 	bl	80087b8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3750      	adds	r7, #80	@ 0x50
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080032c8 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f005 fb7b 	bl	80089dc <SDMMC_CmdGoIdleState>
 80032e6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d027      	beq.n	800333e <MMC_PowerON+0x76>
  {
    return errorstate;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	e034      	b.n	800335c <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	60ba      	str	r2, [r7, #8]
 80032f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d102      	bne.n	8003306 <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8003300:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003304:	e02a      	b.n	800335c <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4916      	ldr	r1, [pc, #88]	@ (8003364 <MMC_PowerON+0x9c>)
 800330c:	4618      	mov	r0, r3
 800330e:	f005 fc0a 	bl	8008b26 <SDMMC_CmdOpCondition>
 8003312:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 800331a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800331e:	e01d      	b.n	800335c <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2100      	movs	r1, #0
 8003326:	4618      	mov	r0, r3
 8003328:	f005 fad3 	bl	80088d2 <SDMMC_GetResponse>
 800332c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	0fdb      	lsrs	r3, r3, #31
 8003332:	2b01      	cmp	r3, #1
 8003334:	d101      	bne.n	800333a <MMC_PowerON+0x72>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <MMC_PowerON+0x74>
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0d6      	beq.n	80032f2 <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	0e1b      	lsrs	r3, r3, #24
 8003348:	2bc0      	cmp	r3, #192	@ 0xc0
 800334a:	d103      	bne.n	8003354 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	639a      	str	r2, [r3, #56]	@ 0x38
 8003352:	e002      	b.n	800335a <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return HAL_MMC_ERROR_NONE;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	c0ff8000 	.word	0xc0ff8000

08003368 <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b090      	sub	sp, #64	@ 0x40
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	4613      	mov	r3, r2
 8003376:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003378:	f7fe fae0 	bl	800193c <HAL_GetTick>
 800337c:	6378      	str	r0, [r7, #52]	@ 0x34
  uint32_t count;
  uint32_t i = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2200      	movs	r2, #0
 800338e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003390:	f04f 33ff 	mov.w	r3, #4294967295
 8003394:	617b      	str	r3, [r7, #20]
  config.DataLength    = MMC_BLOCKSIZE;
 8003396:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800339a:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800339c:	2390      	movs	r3, #144	@ 0x90
 800339e:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80033a0:	2302      	movs	r3, #2
 80033a2:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	627b      	str	r3, [r7, #36]	@ 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80033a8:	2301      	movs	r3, #1
 80033aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f107 0214 	add.w	r2, r7, #20
 80033b4:	4611      	mov	r1, r2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f005 fa9e 	bl	80088f8 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2100      	movs	r1, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f005 fbf2 	bl	8008bac <SDMMC_CmdSendEXTCSD>
 80033c8:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 80033ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d04e      	beq.n	800346e <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a5c      	ldr	r2, [pc, #368]	@ (8003548 <MMC_ReadExtCSD+0x1e0>)
 80033d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033de:	431a      	orrs	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0a6      	b.n	800353e <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d01c      	beq.n	8003438 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 80033fe:	2300      	movs	r3, #0
 8003400:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003402:	e013      	b.n	800342c <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f005 f9ff 	bl	800880c <SDMMC_ReadFIFO>
 800340e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 8003410:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003414:	4413      	add	r3, r2
 8003416:	88fa      	ldrh	r2, [r7, #6]
 8003418:	0892      	lsrs	r2, r2, #2
 800341a:	b292      	uxth	r2, r2
 800341c:	4293      	cmp	r3, r2
 800341e:	d102      	bne.n	8003426 <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003424:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8003426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003428:	3301      	adds	r3, #1
 800342a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800342c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800342e:	2b07      	cmp	r3, #7
 8003430:	d9e8      	bls.n	8003404 <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 8003432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003434:	3308      	adds	r3, #8
 8003436:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8003438:	f7fe fa80 	bl	800193c <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d902      	bls.n	800344e <MMC_ReadExtCSD+0xe6>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10f      	bne.n	800346e <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a3d      	ldr	r2, [pc, #244]	@ (8003548 <MMC_ReadExtCSD+0x1e0>)
 8003454:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800345a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e067      	b.n	800353e <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003474:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0b9      	beq.n	80033f0 <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00f      	beq.n	80034aa <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a2e      	ldr	r2, [pc, #184]	@ (8003548 <MMC_ReadExtCSD+0x1e0>)
 8003490:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003496:	f043 0208 	orr.w	r2, r3, #8
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e049      	b.n	800353e <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00f      	beq.n	80034d8 <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a22      	ldr	r2, [pc, #136]	@ (8003548 <MMC_ReadExtCSD+0x1e0>)
 80034be:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c4:	f043 0202 	orr.w	r2, r3, #2
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e032      	b.n	800353e <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00f      	beq.n	8003506 <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a17      	ldr	r2, [pc, #92]	@ (8003548 <MMC_ReadExtCSD+0x1e0>)
 80034ec:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f2:	f043 0220 	orr.w	r2, r3, #32
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e01b      	b.n	800353e <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	041b      	lsls	r3, r3, #16
 8003510:	4619      	mov	r1, r3
 8003512:	4610      	mov	r0, r2
 8003514:	f005 fae4 	bl	8008ae0 <SDMMC_CmdSendStatus>
 8003518:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 800351a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003526:	431a      	orrs	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a06      	ldr	r2, [pc, #24]	@ (800354c <MMC_ReadExtCSD+0x1e4>)
 8003532:	639a      	str	r2, [r3, #56]	@ 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3740      	adds	r7, #64	@ 0x40
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	1fe00fff 	.word	0x1fe00fff
 800354c:	18000f3a 	.word	0x18000f3a

08003550 <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	@ 0x28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8003560:	2300      	movs	r3, #0
 8003562:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800356a:	d004      	beq.n	8003576 <MMC_PwrClassUpdate+0x26>
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003572:	f040 8088 	bne.w	8003686 <MMC_PwrClassUpdate+0x136>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 800357a:	f107 0114 	add.w	r1, r7, #20
 800357e:	f04f 33ff 	mov.w	r3, #4294967295
 8003582:	22bb      	movs	r2, #187	@ 0xbb
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f7ff feef 	bl	8003368 <MMC_ReadExtCSD>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003590:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	e002      	b.n	800359e <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	0e1b      	lsrs	r3, r3, #24
 800359c:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d105      	bne.n	80035b0 <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80035aa:	0e1b      	lsrs	r3, r3, #24
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	e00e      	b.n	80035ce <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d106      	bne.n	80035c4 <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80035bc:	0c1b      	lsrs	r3, r3, #16
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	e004      	b.n	80035ce <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80035ca:	0e1b      	lsrs	r3, r3, #24
 80035cc:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d158      	bne.n	8003686 <MMC_PwrClassUpdate+0x136>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035da:	d102      	bne.n	80035e2 <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	4053      	eors	r3, r2
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d04a      	beq.n	8003686 <MMC_PwrClassUpdate+0x136>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80035fc:	f043 736e 	orr.w	r3, r3, #62390272	@ 0x3b80000
 8003600:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8003604:	4619      	mov	r1, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f005 faad 	bl	8008b66 <SDMMC_CmdSwitch>
 800360c:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d138      	bne.n	8003686 <MMC_PwrClassUpdate+0x136>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 8003614:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003618:	627b      	str	r3, [r7, #36]	@ 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	041b      	lsls	r3, r3, #16
 8003624:	4619      	mov	r1, r3
 8003626:	4610      	mov	r0, r2
 8003628:	f005 fa5a 	bl	8008ae0 <SDMMC_CmdSendStatus>
 800362c:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d112      	bne.n	800365a <MMC_PwrClassUpdate+0x10a>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2100      	movs	r1, #0
 800363a:	4618      	mov	r0, r3
 800363c:	f005 f949 	bl	80088d2 <SDMMC_GetResponse>
 8003640:	6238      	str	r0, [r7, #32]
            count--;
 8003642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003644:	3b01      	subs	r3, #1
 8003646:	627b      	str	r3, [r7, #36]	@ 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d104      	bne.n	800365c <MMC_PwrClassUpdate+0x10c>
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e0      	bne.n	800361a <MMC_PwrClassUpdate+0xca>
 8003658:	e000      	b.n	800365c <MMC_PwrClassUpdate+0x10c>
              break;
 800365a:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 800365c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00b      	beq.n	800367a <MMC_PwrClassUpdate+0x12a>
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d108      	bne.n	800367a <MMC_PwrClassUpdate+0x12a>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800366e:	2b00      	cmp	r3, #0
 8003670:	d009      	beq.n	8003686 <MMC_PwrClassUpdate+0x136>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8003672:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003676:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 8003678:	e005      	b.n	8003686 <MMC_PwrClassUpdate+0x136>
            }
          }
          else if (count == 0U)
 800367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367c:	2b00      	cmp	r3, #0
 800367e:	d102      	bne.n	8003686 <MMC_PwrClassUpdate+0x136>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 8003680:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003684:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 8003686:	69fb      	ldr	r3, [r7, #28]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3728      	adds	r7, #40	@ 0x28
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8003694:	4b05      	ldr	r3, [pc, #20]	@ (80036ac <HAL_PWREx_EnableVddUSB+0x1c>)
 8003696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003698:	4a04      	ldr	r2, [pc, #16]	@ (80036ac <HAL_PWREx_EnableVddUSB+0x1c>)
 800369a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800369e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80036a0:	bf00      	nop
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	44020800 	.word	0x44020800

080036b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d102      	bne.n	80036c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	f000 bc28 	b.w	8003f14 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036c4:	4b94      	ldr	r3, [pc, #592]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	f003 0318 	and.w	r3, r3, #24
 80036cc:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80036ce:	4b92      	ldr	r3, [pc, #584]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 80036d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d05b      	beq.n	800379c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d005      	beq.n	80036f6 <HAL_RCC_OscConfig+0x46>
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	2b18      	cmp	r3, #24
 80036ee:	d114      	bne.n	800371a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d111      	bne.n	800371a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d102      	bne.n	8003704 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	f000 bc08 	b.w	8003f14 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003704:	4b84      	ldr	r3, [pc, #528]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	041b      	lsls	r3, r3, #16
 8003712:	4981      	ldr	r1, [pc, #516]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 8003714:	4313      	orrs	r3, r2
 8003716:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003718:	e040      	b.n	800379c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d023      	beq.n	800376a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003722:	4b7d      	ldr	r3, [pc, #500]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a7c      	ldr	r2, [pc, #496]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 8003728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800372c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372e:	f7fe f905 	bl	800193c <HAL_GetTick>
 8003732:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003736:	f7fe f901 	bl	800193c <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e3e5      	b.n	8003f14 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003748:	4b73      	ldr	r3, [pc, #460]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f0      	beq.n	8003736 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003754:	4b70      	ldr	r3, [pc, #448]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	041b      	lsls	r3, r3, #16
 8003762:	496d      	ldr	r1, [pc, #436]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 8003764:	4313      	orrs	r3, r2
 8003766:	618b      	str	r3, [r1, #24]
 8003768:	e018      	b.n	800379c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800376a:	4b6b      	ldr	r3, [pc, #428]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a6a      	ldr	r2, [pc, #424]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 8003770:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003776:	f7fe f8e1 	bl	800193c <HAL_GetTick>
 800377a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800377e:	f7fe f8dd 	bl	800193c <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e3c1      	b.n	8003f14 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003790:	4b61      	ldr	r3, [pc, #388]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1f0      	bne.n	800377e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80a0 	beq.w	80038ea <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	2b10      	cmp	r3, #16
 80037ae:	d005      	beq.n	80037bc <HAL_RCC_OscConfig+0x10c>
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	2b18      	cmp	r3, #24
 80037b4:	d109      	bne.n	80037ca <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d106      	bne.n	80037ca <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f040 8092 	bne.w	80038ea <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e3a4      	b.n	8003f14 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d2:	d106      	bne.n	80037e2 <HAL_RCC_OscConfig+0x132>
 80037d4:	4b50      	ldr	r3, [pc, #320]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a4f      	ldr	r2, [pc, #316]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 80037da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	e058      	b.n	8003894 <HAL_RCC_OscConfig+0x1e4>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d112      	bne.n	8003810 <HAL_RCC_OscConfig+0x160>
 80037ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a4a      	ldr	r2, [pc, #296]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 80037f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	4b48      	ldr	r3, [pc, #288]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a47      	ldr	r2, [pc, #284]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 80037fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	4b45      	ldr	r3, [pc, #276]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a44      	ldr	r2, [pc, #272]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 8003808:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	e041      	b.n	8003894 <HAL_RCC_OscConfig+0x1e4>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003818:	d112      	bne.n	8003840 <HAL_RCC_OscConfig+0x190>
 800381a:	4b3f      	ldr	r3, [pc, #252]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a3e      	ldr	r2, [pc, #248]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 8003820:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	4b3c      	ldr	r3, [pc, #240]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a3b      	ldr	r2, [pc, #236]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 800382c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	4b39      	ldr	r3, [pc, #228]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a38      	ldr	r2, [pc, #224]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e029      	b.n	8003894 <HAL_RCC_OscConfig+0x1e4>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003848:	d112      	bne.n	8003870 <HAL_RCC_OscConfig+0x1c0>
 800384a:	4b33      	ldr	r3, [pc, #204]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a32      	ldr	r2, [pc, #200]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 8003850:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	4b30      	ldr	r3, [pc, #192]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a2f      	ldr	r2, [pc, #188]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 800385c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	4b2d      	ldr	r3, [pc, #180]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a2c      	ldr	r2, [pc, #176]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 8003868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	e011      	b.n	8003894 <HAL_RCC_OscConfig+0x1e4>
 8003870:	4b29      	ldr	r3, [pc, #164]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a28      	ldr	r2, [pc, #160]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 8003876:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	4b26      	ldr	r3, [pc, #152]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a25      	ldr	r2, [pc, #148]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 8003882:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	4b23      	ldr	r3, [pc, #140]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a22      	ldr	r2, [pc, #136]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 800388e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d013      	beq.n	80038c4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fe f84e 	bl	800193c <HAL_GetTick>
 80038a0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80038a4:	f7fe f84a 	bl	800193c <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b64      	cmp	r3, #100	@ 0x64
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e32e      	b.n	8003f14 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038b6:	4b18      	ldr	r3, [pc, #96]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0x1f4>
 80038c2:	e012      	b.n	80038ea <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c4:	f7fe f83a 	bl	800193c <HAL_GetTick>
 80038c8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80038cc:	f7fe f836 	bl	800193c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b64      	cmp	r3, #100	@ 0x64
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e31a      	b.n	8003f14 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038de:	4b0e      	ldr	r3, [pc, #56]	@ (8003918 <HAL_RCC_OscConfig+0x268>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 809a 	beq.w	8003a2c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d005      	beq.n	800390a <HAL_RCC_OscConfig+0x25a>
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	2b18      	cmp	r3, #24
 8003902:	d149      	bne.n	8003998 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d146      	bne.n	8003998 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d104      	bne.n	800391c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e2fe      	b.n	8003f14 <HAL_RCC_OscConfig+0x864>
 8003916:	bf00      	nop
 8003918:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d11c      	bne.n	800395c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003922:	4b9a      	ldr	r3, [pc, #616]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0218 	and.w	r2, r3, #24
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	429a      	cmp	r2, r3
 8003930:	d014      	beq.n	800395c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003932:	4b96      	ldr	r3, [pc, #600]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f023 0218 	bic.w	r2, r3, #24
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	4993      	ldr	r1, [pc, #588]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003940:	4313      	orrs	r3, r2
 8003942:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003944:	f000 fdd0 	bl	80044e8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003948:	4b91      	ldr	r3, [pc, #580]	@ (8003b90 <HAL_RCC_OscConfig+0x4e0>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f7fd ff6b 	bl	8001828 <HAL_InitTick>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e2db      	b.n	8003f14 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395c:	f7fd ffee 	bl	800193c <HAL_GetTick>
 8003960:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003964:	f7fd ffea 	bl	800193c <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e2ce      	b.n	8003f14 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003976:	4b85      	ldr	r3, [pc, #532]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003982:	4b82      	ldr	r3, [pc, #520]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	041b      	lsls	r3, r3, #16
 8003990:	497e      	ldr	r1, [pc, #504]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003992:	4313      	orrs	r3, r2
 8003994:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003996:	e049      	b.n	8003a2c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d02c      	beq.n	80039fa <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80039a0:	4b7a      	ldr	r3, [pc, #488]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f023 0218 	bic.w	r2, r3, #24
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	4977      	ldr	r1, [pc, #476]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80039b2:	4b76      	ldr	r3, [pc, #472]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a75      	ldr	r2, [pc, #468]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039be:	f7fd ffbd 	bl	800193c <HAL_GetTick>
 80039c2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80039c6:	f7fd ffb9 	bl	800193c <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e29d      	b.n	8003f14 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039d8:	4b6c      	ldr	r3, [pc, #432]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0f0      	beq.n	80039c6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80039e4:	4b69      	ldr	r3, [pc, #420]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	041b      	lsls	r3, r3, #16
 80039f2:	4966      	ldr	r1, [pc, #408]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	610b      	str	r3, [r1, #16]
 80039f8:	e018      	b.n	8003a2c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039fa:	4b64      	ldr	r3, [pc, #400]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a63      	ldr	r2, [pc, #396]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003a00:	f023 0301 	bic.w	r3, r3, #1
 8003a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a06:	f7fd ff99 	bl	800193c <HAL_GetTick>
 8003a0a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003a0e:	f7fd ff95 	bl	800193c <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e279      	b.n	8003f14 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a20:	4b5a      	ldr	r3, [pc, #360]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f0      	bne.n	8003a0e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d03c      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01c      	beq.n	8003a7a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a40:	4b52      	ldr	r3, [pc, #328]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003a42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a46:	4a51      	ldr	r2, [pc, #324]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003a48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a50:	f7fd ff74 	bl	800193c <HAL_GetTick>
 8003a54:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003a58:	f7fd ff70 	bl	800193c <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e254      	b.n	8003f14 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003a6a:	4b48      	ldr	r3, [pc, #288]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003a6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ef      	beq.n	8003a58 <HAL_RCC_OscConfig+0x3a8>
 8003a78:	e01b      	b.n	8003ab2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a7a:	4b44      	ldr	r3, [pc, #272]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003a7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a80:	4a42      	ldr	r2, [pc, #264]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003a82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8a:	f7fd ff57 	bl	800193c <HAL_GetTick>
 8003a8e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003a92:	f7fd ff53 	bl	800193c <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e237      	b.n	8003f14 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003aa4:	4b39      	ldr	r3, [pc, #228]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003aa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003aaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1ef      	bne.n	8003a92 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 80d2 	beq.w	8003c64 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003ac0:	4b34      	ldr	r3, [pc, #208]	@ (8003b94 <HAL_RCC_OscConfig+0x4e4>)
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d118      	bne.n	8003afe <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003acc:	4b31      	ldr	r3, [pc, #196]	@ (8003b94 <HAL_RCC_OscConfig+0x4e4>)
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad0:	4a30      	ldr	r2, [pc, #192]	@ (8003b94 <HAL_RCC_OscConfig+0x4e4>)
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ad8:	f7fd ff30 	bl	800193c <HAL_GetTick>
 8003adc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae0:	f7fd ff2c 	bl	800193c <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e210      	b.n	8003f14 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003af2:	4b28      	ldr	r3, [pc, #160]	@ (8003b94 <HAL_RCC_OscConfig+0x4e4>)
 8003af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0f0      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d108      	bne.n	8003b18 <HAL_RCC_OscConfig+0x468>
 8003b06:	4b21      	ldr	r3, [pc, #132]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b16:	e074      	b.n	8003c02 <HAL_RCC_OscConfig+0x552>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d118      	bne.n	8003b52 <HAL_RCC_OscConfig+0x4a2>
 8003b20:	4b1a      	ldr	r3, [pc, #104]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003b22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b26:	4a19      	ldr	r2, [pc, #100]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b30:	4b16      	ldr	r3, [pc, #88]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003b32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b36:	4a15      	ldr	r2, [pc, #84]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003b38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b40:	4b12      	ldr	r3, [pc, #72]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003b42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b46:	4a11      	ldr	r2, [pc, #68]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003b48:	f023 0304 	bic.w	r3, r3, #4
 8003b4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b50:	e057      	b.n	8003c02 <HAL_RCC_OscConfig+0x552>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b05      	cmp	r3, #5
 8003b58:	d11e      	bne.n	8003b98 <HAL_RCC_OscConfig+0x4e8>
 8003b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003b5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b60:	4a0a      	ldr	r2, [pc, #40]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003b62:	f043 0304 	orr.w	r3, r3, #4
 8003b66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b6a:	4b08      	ldr	r3, [pc, #32]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003b6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b70:	4a06      	ldr	r2, [pc, #24]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003b72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b7a:	4b04      	ldr	r3, [pc, #16]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003b7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b80:	4a02      	ldr	r2, [pc, #8]	@ (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b8a:	e03a      	b.n	8003c02 <HAL_RCC_OscConfig+0x552>
 8003b8c:	44020c00 	.word	0x44020c00
 8003b90:	20000004 	.word	0x20000004
 8003b94:	44020800 	.word	0x44020800
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b85      	cmp	r3, #133	@ 0x85
 8003b9e:	d118      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x522>
 8003ba0:	4ba2      	ldr	r3, [pc, #648]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ba6:	4aa1      	ldr	r2, [pc, #644]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003ba8:	f043 0304 	orr.w	r3, r3, #4
 8003bac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bb0:	4b9e      	ldr	r3, [pc, #632]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bb6:	4a9d      	ldr	r2, [pc, #628]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bbc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bc0:	4b9a      	ldr	r3, [pc, #616]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003bc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bc6:	4a99      	ldr	r2, [pc, #612]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bd0:	e017      	b.n	8003c02 <HAL_RCC_OscConfig+0x552>
 8003bd2:	4b96      	ldr	r3, [pc, #600]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bd8:	4a94      	ldr	r2, [pc, #592]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003be2:	4b92      	ldr	r3, [pc, #584]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003be4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003be8:	4a90      	ldr	r2, [pc, #576]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003bea:	f023 0304 	bic.w	r3, r3, #4
 8003bee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bf2:	4b8e      	ldr	r3, [pc, #568]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bf8:	4a8c      	ldr	r2, [pc, #560]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003bfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d016      	beq.n	8003c38 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0a:	f7fd fe97 	bl	800193c <HAL_GetTick>
 8003c0e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c10:	e00a      	b.n	8003c28 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c12:	f7fd fe93 	bl	800193c <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e175      	b.n	8003f14 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c28:	4b80      	ldr	r3, [pc, #512]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0ed      	beq.n	8003c12 <HAL_RCC_OscConfig+0x562>
 8003c36:	e015      	b.n	8003c64 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c38:	f7fd fe80 	bl	800193c <HAL_GetTick>
 8003c3c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c40:	f7fd fe7c 	bl	800193c <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e15e      	b.n	8003f14 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c56:	4b75      	ldr	r3, [pc, #468]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1ed      	bne.n	8003c40 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d036      	beq.n	8003cde <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d019      	beq.n	8003cac <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c78:	4b6c      	ldr	r3, [pc, #432]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a6b      	ldr	r2, [pc, #428]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003c7e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c84:	f7fd fe5a 	bl	800193c <HAL_GetTick>
 8003c88:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003c8c:	f7fd fe56 	bl	800193c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e13a      	b.n	8003f14 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003c9e:	4b63      	ldr	r3, [pc, #396]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0f0      	beq.n	8003c8c <HAL_RCC_OscConfig+0x5dc>
 8003caa:	e018      	b.n	8003cde <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cac:	4b5f      	ldr	r3, [pc, #380]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a5e      	ldr	r2, [pc, #376]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003cb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb8:	f7fd fe40 	bl	800193c <HAL_GetTick>
 8003cbc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003cc0:	f7fd fe3c 	bl	800193c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e120      	b.n	8003f14 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003cd2:	4b56      	ldr	r3, [pc, #344]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8115 	beq.w	8003f12 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	2b18      	cmp	r3, #24
 8003cec:	f000 80af 	beq.w	8003e4e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	f040 8086 	bne.w	8003e06 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003cfa:	4b4c      	ldr	r3, [pc, #304]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a4b      	ldr	r2, [pc, #300]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003d00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d06:	f7fd fe19 	bl	800193c <HAL_GetTick>
 8003d0a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003d0e:	f7fd fe15 	bl	800193c <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e0f9      	b.n	8003f14 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003d20:	4b42      	ldr	r3, [pc, #264]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1f0      	bne.n	8003d0e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003d2c:	4b3f      	ldr	r3, [pc, #252]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003d34:	f023 0303 	bic.w	r3, r3, #3
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003d40:	0212      	lsls	r2, r2, #8
 8003d42:	430a      	orrs	r2, r1
 8003d44:	4939      	ldr	r1, [pc, #228]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	628b      	str	r3, [r1, #40]	@ 0x28
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	025b      	lsls	r3, r3, #9
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d64:	3b01      	subs	r3, #1
 8003d66:	041b      	lsls	r3, r3, #16
 8003d68:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	3b01      	subs	r3, #1
 8003d74:	061b      	lsls	r3, r3, #24
 8003d76:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003d7a:	492c      	ldr	r1, [pc, #176]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003d80:	4b2a      	ldr	r3, [pc, #168]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d84:	4a29      	ldr	r2, [pc, #164]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003d86:	f023 0310 	bic.w	r3, r3, #16
 8003d8a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d90:	4a26      	ldr	r2, [pc, #152]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003d96:	4b25      	ldr	r3, [pc, #148]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9a:	4a24      	ldr	r2, [pc, #144]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003d9c:	f043 0310 	orr.w	r3, r3, #16
 8003da0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003da2:	4b22      	ldr	r3, [pc, #136]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da6:	f023 020c 	bic.w	r2, r3, #12
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dae:	491f      	ldr	r1, [pc, #124]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003db4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db8:	f023 0220 	bic.w	r2, r3, #32
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dc0:	491a      	ldr	r1, [pc, #104]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003dc6:	4b19      	ldr	r3, [pc, #100]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dca:	4a18      	ldr	r2, [pc, #96]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003dd2:	4b16      	ldr	r3, [pc, #88]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a15      	ldr	r2, [pc, #84]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003dd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dde:	f7fd fdad 	bl	800193c <HAL_GetTick>
 8003de2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003de6:	f7fd fda9 	bl	800193c <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e08d      	b.n	8003f14 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003df8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0f0      	beq.n	8003de6 <HAL_RCC_OscConfig+0x736>
 8003e04:	e085      	b.n	8003f12 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003e06:	4b09      	ldr	r3, [pc, #36]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a08      	ldr	r2, [pc, #32]	@ (8003e2c <HAL_RCC_OscConfig+0x77c>)
 8003e0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e12:	f7fd fd93 	bl	800193c <HAL_GetTick>
 8003e16:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003e1a:	f7fd fd8f 	bl	800193c <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d903      	bls.n	8003e30 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e073      	b.n	8003f14 <HAL_RCC_OscConfig+0x864>
 8003e2c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003e30:	4b3a      	ldr	r3, [pc, #232]	@ (8003f1c <HAL_RCC_OscConfig+0x86c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1ee      	bne.n	8003e1a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003e3c:	4b37      	ldr	r3, [pc, #220]	@ (8003f1c <HAL_RCC_OscConfig+0x86c>)
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e40:	4a36      	ldr	r2, [pc, #216]	@ (8003f1c <HAL_RCC_OscConfig+0x86c>)
 8003e42:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003e46:	f023 0303 	bic.w	r3, r3, #3
 8003e4a:	6293      	str	r3, [r2, #40]	@ 0x28
 8003e4c:	e061      	b.n	8003f12 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003e4e:	4b33      	ldr	r3, [pc, #204]	@ (8003f1c <HAL_RCC_OscConfig+0x86c>)
 8003e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e52:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e54:	4b31      	ldr	r3, [pc, #196]	@ (8003f1c <HAL_RCC_OscConfig+0x86c>)
 8003e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e58:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d031      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f003 0203 	and.w	r2, r3, #3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d12a      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	0a1b      	lsrs	r3, r3, #8
 8003e74:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d122      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e8a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d11a      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	0a5b      	lsrs	r3, r3, #9
 8003e94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e9c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d111      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	0c1b      	lsrs	r3, r3, #16
 8003ea6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eae:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d108      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	0e1b      	lsrs	r3, r3, #24
 8003eb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d001      	beq.n	8003eca <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e024      	b.n	8003f14 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003eca:	4b14      	ldr	r3, [pc, #80]	@ (8003f1c <HAL_RCC_OscConfig+0x86c>)
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ece:	08db      	lsrs	r3, r3, #3
 8003ed0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d01a      	beq.n	8003f12 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003edc:	4b0f      	ldr	r3, [pc, #60]	@ (8003f1c <HAL_RCC_OscConfig+0x86c>)
 8003ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee0:	4a0e      	ldr	r2, [pc, #56]	@ (8003f1c <HAL_RCC_OscConfig+0x86c>)
 8003ee2:	f023 0310 	bic.w	r3, r3, #16
 8003ee6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee8:	f7fd fd28 	bl	800193c <HAL_GetTick>
 8003eec:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003eee:	bf00      	nop
 8003ef0:	f7fd fd24 	bl	800193c <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d0f9      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f00:	4a06      	ldr	r2, [pc, #24]	@ (8003f1c <HAL_RCC_OscConfig+0x86c>)
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003f06:	4b05      	ldr	r3, [pc, #20]	@ (8003f1c <HAL_RCC_OscConfig+0x86c>)
 8003f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0a:	4a04      	ldr	r2, [pc, #16]	@ (8003f1c <HAL_RCC_OscConfig+0x86c>)
 8003f0c:	f043 0310 	orr.w	r3, r3, #16
 8003f10:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3720      	adds	r7, #32
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	44020c00 	.word	0x44020c00

08003f20 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e19e      	b.n	8004272 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f34:	4b83      	ldr	r3, [pc, #524]	@ (8004144 <HAL_RCC_ClockConfig+0x224>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 030f 	and.w	r3, r3, #15
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d910      	bls.n	8003f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f42:	4b80      	ldr	r3, [pc, #512]	@ (8004144 <HAL_RCC_ClockConfig+0x224>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f023 020f 	bic.w	r2, r3, #15
 8003f4a:	497e      	ldr	r1, [pc, #504]	@ (8004144 <HAL_RCC_ClockConfig+0x224>)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f52:	4b7c      	ldr	r3, [pc, #496]	@ (8004144 <HAL_RCC_ClockConfig+0x224>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d001      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e186      	b.n	8004272 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0310 	and.w	r3, r3, #16
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d012      	beq.n	8003f96 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	695a      	ldr	r2, [r3, #20]
 8003f74:	4b74      	ldr	r3, [pc, #464]	@ (8004148 <HAL_RCC_ClockConfig+0x228>)
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	0a1b      	lsrs	r3, r3, #8
 8003f7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d909      	bls.n	8003f96 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003f82:	4b71      	ldr	r3, [pc, #452]	@ (8004148 <HAL_RCC_ClockConfig+0x228>)
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	021b      	lsls	r3, r3, #8
 8003f90:	496d      	ldr	r1, [pc, #436]	@ (8004148 <HAL_RCC_ClockConfig+0x228>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d012      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	4b68      	ldr	r3, [pc, #416]	@ (8004148 <HAL_RCC_ClockConfig+0x228>)
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	091b      	lsrs	r3, r3, #4
 8003fac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d909      	bls.n	8003fc8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003fb4:	4b64      	ldr	r3, [pc, #400]	@ (8004148 <HAL_RCC_ClockConfig+0x228>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	4961      	ldr	r1, [pc, #388]	@ (8004148 <HAL_RCC_ClockConfig+0x228>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d010      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	4b5b      	ldr	r3, [pc, #364]	@ (8004148 <HAL_RCC_ClockConfig+0x228>)
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d908      	bls.n	8003ff6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003fe4:	4b58      	ldr	r3, [pc, #352]	@ (8004148 <HAL_RCC_ClockConfig+0x228>)
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4955      	ldr	r1, [pc, #340]	@ (8004148 <HAL_RCC_ClockConfig+0x228>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d010      	beq.n	8004024 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	4b50      	ldr	r3, [pc, #320]	@ (8004148 <HAL_RCC_ClockConfig+0x228>)
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	429a      	cmp	r2, r3
 8004010:	d908      	bls.n	8004024 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004012:	4b4d      	ldr	r3, [pc, #308]	@ (8004148 <HAL_RCC_ClockConfig+0x228>)
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	f023 020f 	bic.w	r2, r3, #15
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	494a      	ldr	r1, [pc, #296]	@ (8004148 <HAL_RCC_ClockConfig+0x228>)
 8004020:	4313      	orrs	r3, r2
 8004022:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 8093 	beq.w	8004158 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b03      	cmp	r3, #3
 8004038:	d107      	bne.n	800404a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800403a:	4b43      	ldr	r3, [pc, #268]	@ (8004148 <HAL_RCC_ClockConfig+0x228>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d121      	bne.n	800408a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e113      	b.n	8004272 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d107      	bne.n	8004062 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004052:	4b3d      	ldr	r3, [pc, #244]	@ (8004148 <HAL_RCC_ClockConfig+0x228>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d115      	bne.n	800408a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e107      	b.n	8004272 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d107      	bne.n	800407a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800406a:	4b37      	ldr	r3, [pc, #220]	@ (8004148 <HAL_RCC_ClockConfig+0x228>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004072:	2b00      	cmp	r3, #0
 8004074:	d109      	bne.n	800408a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e0fb      	b.n	8004272 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800407a:	4b33      	ldr	r3, [pc, #204]	@ (8004148 <HAL_RCC_ClockConfig+0x228>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e0f3      	b.n	8004272 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800408a:	4b2f      	ldr	r3, [pc, #188]	@ (8004148 <HAL_RCC_ClockConfig+0x228>)
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	f023 0203 	bic.w	r2, r3, #3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	492c      	ldr	r1, [pc, #176]	@ (8004148 <HAL_RCC_ClockConfig+0x228>)
 8004098:	4313      	orrs	r3, r2
 800409a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800409c:	f7fd fc4e 	bl	800193c <HAL_GetTick>
 80040a0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d112      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040aa:	e00a      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80040ac:	f7fd fc46 	bl	800193c <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e0d7      	b.n	8004272 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040c2:	4b21      	ldr	r3, [pc, #132]	@ (8004148 <HAL_RCC_ClockConfig+0x228>)
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f003 0318 	and.w	r3, r3, #24
 80040ca:	2b18      	cmp	r3, #24
 80040cc:	d1ee      	bne.n	80040ac <HAL_RCC_ClockConfig+0x18c>
 80040ce:	e043      	b.n	8004158 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d112      	bne.n	80040fe <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80040d8:	e00a      	b.n	80040f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80040da:	f7fd fc2f 	bl	800193c <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e0c0      	b.n	8004272 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80040f0:	4b15      	ldr	r3, [pc, #84]	@ (8004148 <HAL_RCC_ClockConfig+0x228>)
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	f003 0318 	and.w	r3, r3, #24
 80040f8:	2b10      	cmp	r3, #16
 80040fa:	d1ee      	bne.n	80040da <HAL_RCC_ClockConfig+0x1ba>
 80040fc:	e02c      	b.n	8004158 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d122      	bne.n	800414c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004106:	e00a      	b.n	800411e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004108:	f7fd fc18 	bl	800193c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004116:	4293      	cmp	r3, r2
 8004118:	d901      	bls.n	800411e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e0a9      	b.n	8004272 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800411e:	4b0a      	ldr	r3, [pc, #40]	@ (8004148 <HAL_RCC_ClockConfig+0x228>)
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f003 0318 	and.w	r3, r3, #24
 8004126:	2b08      	cmp	r3, #8
 8004128:	d1ee      	bne.n	8004108 <HAL_RCC_ClockConfig+0x1e8>
 800412a:	e015      	b.n	8004158 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800412c:	f7fd fc06 	bl	800193c <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800413a:	4293      	cmp	r3, r2
 800413c:	d906      	bls.n	800414c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e097      	b.n	8004272 <HAL_RCC_ClockConfig+0x352>
 8004142:	bf00      	nop
 8004144:	40022000 	.word	0x40022000
 8004148:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800414c:	4b4b      	ldr	r3, [pc, #300]	@ (800427c <HAL_RCC_ClockConfig+0x35c>)
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	f003 0318 	and.w	r3, r3, #24
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1e9      	bne.n	800412c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d010      	beq.n	8004186 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	4b44      	ldr	r3, [pc, #272]	@ (800427c <HAL_RCC_ClockConfig+0x35c>)
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	f003 030f 	and.w	r3, r3, #15
 8004170:	429a      	cmp	r2, r3
 8004172:	d208      	bcs.n	8004186 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004174:	4b41      	ldr	r3, [pc, #260]	@ (800427c <HAL_RCC_ClockConfig+0x35c>)
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	f023 020f 	bic.w	r2, r3, #15
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	493e      	ldr	r1, [pc, #248]	@ (800427c <HAL_RCC_ClockConfig+0x35c>)
 8004182:	4313      	orrs	r3, r2
 8004184:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004186:	4b3e      	ldr	r3, [pc, #248]	@ (8004280 <HAL_RCC_ClockConfig+0x360>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d210      	bcs.n	80041b6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004194:	4b3a      	ldr	r3, [pc, #232]	@ (8004280 <HAL_RCC_ClockConfig+0x360>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f023 020f 	bic.w	r2, r3, #15
 800419c:	4938      	ldr	r1, [pc, #224]	@ (8004280 <HAL_RCC_ClockConfig+0x360>)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a4:	4b36      	ldr	r3, [pc, #216]	@ (8004280 <HAL_RCC_ClockConfig+0x360>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d001      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e05d      	b.n	8004272 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d010      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	4b2d      	ldr	r3, [pc, #180]	@ (800427c <HAL_RCC_ClockConfig+0x35c>)
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d208      	bcs.n	80041e4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80041d2:	4b2a      	ldr	r3, [pc, #168]	@ (800427c <HAL_RCC_ClockConfig+0x35c>)
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	4927      	ldr	r1, [pc, #156]	@ (800427c <HAL_RCC_ClockConfig+0x35c>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d012      	beq.n	8004216 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	4b21      	ldr	r3, [pc, #132]	@ (800427c <HAL_RCC_ClockConfig+0x35c>)
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	091b      	lsrs	r3, r3, #4
 80041fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041fe:	429a      	cmp	r2, r3
 8004200:	d209      	bcs.n	8004216 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004202:	4b1e      	ldr	r3, [pc, #120]	@ (800427c <HAL_RCC_ClockConfig+0x35c>)
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	491a      	ldr	r1, [pc, #104]	@ (800427c <HAL_RCC_ClockConfig+0x35c>)
 8004212:	4313      	orrs	r3, r2
 8004214:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b00      	cmp	r3, #0
 8004220:	d012      	beq.n	8004248 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695a      	ldr	r2, [r3, #20]
 8004226:	4b15      	ldr	r3, [pc, #84]	@ (800427c <HAL_RCC_ClockConfig+0x35c>)
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	0a1b      	lsrs	r3, r3, #8
 800422c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004230:	429a      	cmp	r2, r3
 8004232:	d209      	bcs.n	8004248 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004234:	4b11      	ldr	r3, [pc, #68]	@ (800427c <HAL_RCC_ClockConfig+0x35c>)
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	021b      	lsls	r3, r3, #8
 8004242:	490e      	ldr	r1, [pc, #56]	@ (800427c <HAL_RCC_ClockConfig+0x35c>)
 8004244:	4313      	orrs	r3, r2
 8004246:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004248:	f000 f822 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 800424c:	4602      	mov	r2, r0
 800424e:	4b0b      	ldr	r3, [pc, #44]	@ (800427c <HAL_RCC_ClockConfig+0x35c>)
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	490b      	ldr	r1, [pc, #44]	@ (8004284 <HAL_RCC_ClockConfig+0x364>)
 8004258:	5ccb      	ldrb	r3, [r1, r3]
 800425a:	fa22 f303 	lsr.w	r3, r2, r3
 800425e:	4a0a      	ldr	r2, [pc, #40]	@ (8004288 <HAL_RCC_ClockConfig+0x368>)
 8004260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004262:	4b0a      	ldr	r3, [pc, #40]	@ (800428c <HAL_RCC_ClockConfig+0x36c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f7fd fade 	bl	8001828 <HAL_InitTick>
 800426c:	4603      	mov	r3, r0
 800426e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004270:	7afb      	ldrb	r3, [r7, #11]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	44020c00 	.word	0x44020c00
 8004280:	40022000 	.word	0x40022000
 8004284:	080090ec 	.word	0x080090ec
 8004288:	20000000 	.word	0x20000000
 800428c:	20000004 	.word	0x20000004

08004290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004290:	b480      	push	{r7}
 8004292:	b089      	sub	sp, #36	@ 0x24
 8004294:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004296:	4b8c      	ldr	r3, [pc, #560]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	f003 0318 	and.w	r3, r3, #24
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d102      	bne.n	80042a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80042a2:	4b8a      	ldr	r3, [pc, #552]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x23c>)
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	e107      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042a8:	4b87      	ldr	r3, [pc, #540]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	f003 0318 	and.w	r3, r3, #24
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d112      	bne.n	80042da <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80042b4:	4b84      	ldr	r3, [pc, #528]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0320 	and.w	r3, r3, #32
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d009      	beq.n	80042d4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80042c0:	4b81      	ldr	r3, [pc, #516]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	08db      	lsrs	r3, r3, #3
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	4a81      	ldr	r2, [pc, #516]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x240>)
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	e0f1      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80042d4:	4b7e      	ldr	r3, [pc, #504]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x240>)
 80042d6:	61fb      	str	r3, [r7, #28]
 80042d8:	e0ee      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042da:	4b7b      	ldr	r3, [pc, #492]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f003 0318 	and.w	r3, r3, #24
 80042e2:	2b10      	cmp	r3, #16
 80042e4:	d102      	bne.n	80042ec <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042e6:	4b7b      	ldr	r3, [pc, #492]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x244>)
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	e0e5      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042ec:	4b76      	ldr	r3, [pc, #472]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	f003 0318 	and.w	r3, r3, #24
 80042f4:	2b18      	cmp	r3, #24
 80042f6:	f040 80dd 	bne.w	80044b4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80042fa:	4b73      	ldr	r3, [pc, #460]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80042fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004304:	4b70      	ldr	r3, [pc, #448]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004308:	0a1b      	lsrs	r3, r3, #8
 800430a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800430e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004310:	4b6d      	ldr	r3, [pc, #436]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004314:	091b      	lsrs	r3, r3, #4
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800431c:	4b6a      	ldr	r3, [pc, #424]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x238>)
 800431e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004320:	08db      	lsrs	r3, r3, #3
 8004322:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	fb02 f303 	mul.w	r3, r2, r3
 800432c:	ee07 3a90 	vmov	s15, r3
 8004330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004334:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 80b7 	beq.w	80044ae <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d003      	beq.n	800434e <HAL_RCC_GetSysClockFreq+0xbe>
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b03      	cmp	r3, #3
 800434a:	d056      	beq.n	80043fa <HAL_RCC_GetSysClockFreq+0x16a>
 800434c:	e077      	b.n	800443e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800434e:	4b5e      	ldr	r3, [pc, #376]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	2b00      	cmp	r3, #0
 8004358:	d02d      	beq.n	80043b6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800435a:	4b5b      	ldr	r3, [pc, #364]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x238>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	08db      	lsrs	r3, r3, #3
 8004360:	f003 0303 	and.w	r3, r3, #3
 8004364:	4a5a      	ldr	r2, [pc, #360]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x240>)
 8004366:	fa22 f303 	lsr.w	r3, r2, r3
 800436a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	ee07 3a90 	vmov	s15, r3
 8004372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	ee07 3a90 	vmov	s15, r3
 800437c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004380:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004384:	4b50      	ldr	r3, [pc, #320]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438c:	ee07 3a90 	vmov	s15, r3
 8004390:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004394:	ed97 6a02 	vldr	s12, [r7, #8]
 8004398:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80044d8 <HAL_RCC_GetSysClockFreq+0x248>
 800439c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80043a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80043b4:	e065      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	ee07 3a90 	vmov	s15, r3
 80043bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80044dc <HAL_RCC_GetSysClockFreq+0x24c>
 80043c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043c8:	4b3f      	ldr	r3, [pc, #252]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80043ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d0:	ee07 3a90 	vmov	s15, r3
 80043d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80043d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80043dc:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80044d8 <HAL_RCC_GetSysClockFreq+0x248>
 80043e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80043e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80043f8:	e043      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	ee07 3a90 	vmov	s15, r3
 8004400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004404:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80044e0 <HAL_RCC_GetSysClockFreq+0x250>
 8004408:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800440c:	4b2e      	ldr	r3, [pc, #184]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x238>)
 800440e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004414:	ee07 3a90 	vmov	s15, r3
 8004418:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800441c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004420:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80044d8 <HAL_RCC_GetSysClockFreq+0x248>
 8004424:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004428:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800442c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004430:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004438:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800443c:	e021      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	ee07 3a90 	vmov	s15, r3
 8004444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004448:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80044e4 <HAL_RCC_GetSysClockFreq+0x254>
 800444c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004450:	4b1d      	ldr	r3, [pc, #116]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004458:	ee07 3a90 	vmov	s15, r3
 800445c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004460:	ed97 6a02 	vldr	s12, [r7, #8]
 8004464:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80044d8 <HAL_RCC_GetSysClockFreq+0x248>
 8004468:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800446c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004470:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004474:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004480:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004482:	4b11      	ldr	r3, [pc, #68]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004486:	0a5b      	lsrs	r3, r3, #9
 8004488:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800448c:	3301      	adds	r3, #1
 800448e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800449a:	edd7 6a06 	vldr	s13, [r7, #24]
 800449e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044a6:	ee17 3a90 	vmov	r3, s15
 80044aa:	61fb      	str	r3, [r7, #28]
 80044ac:	e004      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	e001      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80044b4:	4b06      	ldr	r3, [pc, #24]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x240>)
 80044b6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80044b8:	69fb      	ldr	r3, [r7, #28]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3724      	adds	r7, #36	@ 0x24
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	44020c00 	.word	0x44020c00
 80044cc:	003d0900 	.word	0x003d0900
 80044d0:	03d09000 	.word	0x03d09000
 80044d4:	017d7840 	.word	0x017d7840
 80044d8:	46000000 	.word	0x46000000
 80044dc:	4c742400 	.word	0x4c742400
 80044e0:	4bbebc20 	.word	0x4bbebc20
 80044e4:	4a742400 	.word	0x4a742400

080044e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80044ec:	f7ff fed0 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 80044f0:	4602      	mov	r2, r0
 80044f2:	4b08      	ldr	r3, [pc, #32]	@ (8004514 <HAL_RCC_GetHCLKFreq+0x2c>)
 80044f4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80044f6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80044fa:	4907      	ldr	r1, [pc, #28]	@ (8004518 <HAL_RCC_GetHCLKFreq+0x30>)
 80044fc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80044fe:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004502:	fa22 f303 	lsr.w	r3, r2, r3
 8004506:	4a05      	ldr	r2, [pc, #20]	@ (800451c <HAL_RCC_GetHCLKFreq+0x34>)
 8004508:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800450a:	4b04      	ldr	r3, [pc, #16]	@ (800451c <HAL_RCC_GetHCLKFreq+0x34>)
 800450c:	681b      	ldr	r3, [r3, #0]
}
 800450e:	4618      	mov	r0, r3
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	44020c00 	.word	0x44020c00
 8004518:	080090ec 	.word	0x080090ec
 800451c:	20000000 	.word	0x20000000

08004520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004524:	f7ff ffe0 	bl	80044e8 <HAL_RCC_GetHCLKFreq>
 8004528:	4602      	mov	r2, r0
 800452a:	4b06      	ldr	r3, [pc, #24]	@ (8004544 <HAL_RCC_GetPCLK1Freq+0x24>)
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	091b      	lsrs	r3, r3, #4
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	4904      	ldr	r1, [pc, #16]	@ (8004548 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004536:	5ccb      	ldrb	r3, [r1, r3]
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004540:	4618      	mov	r0, r3
 8004542:	bd80      	pop	{r7, pc}
 8004544:	44020c00 	.word	0x44020c00
 8004548:	080090fc 	.word	0x080090fc

0800454c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004550:	f7ff ffca 	bl	80044e8 <HAL_RCC_GetHCLKFreq>
 8004554:	4602      	mov	r2, r0
 8004556:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	0a1b      	lsrs	r3, r3, #8
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	4904      	ldr	r1, [pc, #16]	@ (8004574 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004562:	5ccb      	ldrb	r3, [r1, r3]
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800456c:	4618      	mov	r0, r3
 800456e:	bd80      	pop	{r7, pc}
 8004570:	44020c00 	.word	0x44020c00
 8004574:	080090fc 	.word	0x080090fc

08004578 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800457c:	f7ff ffb4 	bl	80044e8 <HAL_RCC_GetHCLKFreq>
 8004580:	4602      	mov	r2, r0
 8004582:	4b06      	ldr	r3, [pc, #24]	@ (800459c <HAL_RCC_GetPCLK3Freq+0x24>)
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	0b1b      	lsrs	r3, r3, #12
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	4904      	ldr	r1, [pc, #16]	@ (80045a0 <HAL_RCC_GetPCLK3Freq+0x28>)
 800458e:	5ccb      	ldrb	r3, [r1, r3]
 8004590:	f003 031f 	and.w	r3, r3, #31
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004598:	4618      	mov	r0, r3
 800459a:	bd80      	pop	{r7, pc}
 800459c:	44020c00 	.word	0x44020c00
 80045a0:	080090fc 	.word	0x080090fc

080045a4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80045a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a8:	b0ba      	sub	sp, #232	@ 0xe8
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045b0:	2300      	movs	r3, #0
 80045b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045b6:	2300      	movs	r3, #0
 80045b8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80045c8:	2500      	movs	r5, #0
 80045ca:	ea54 0305 	orrs.w	r3, r4, r5
 80045ce:	d00b      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80045d0:	4bcd      	ldr	r3, [pc, #820]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80045d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80045d6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80045da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e0:	4ac9      	ldr	r2, [pc, #804]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80045e2:	430b      	orrs	r3, r1
 80045e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f0:	f002 0801 	and.w	r8, r2, #1
 80045f4:	f04f 0900 	mov.w	r9, #0
 80045f8:	ea58 0309 	orrs.w	r3, r8, r9
 80045fc:	d042      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80045fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004604:	2b05      	cmp	r3, #5
 8004606:	d823      	bhi.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004608:	a201      	add	r2, pc, #4	@ (adr r2, 8004610 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460e:	bf00      	nop
 8004610:	08004659 	.word	0x08004659
 8004614:	08004629 	.word	0x08004629
 8004618:	0800463d 	.word	0x0800463d
 800461c:	08004659 	.word	0x08004659
 8004620:	08004659 	.word	0x08004659
 8004624:	08004659 	.word	0x08004659
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004628:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800462c:	3308      	adds	r3, #8
 800462e:	4618      	mov	r0, r3
 8004630:	f003 f906 	bl	8007840 <RCCEx_PLL2_Config>
 8004634:	4603      	mov	r3, r0
 8004636:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800463a:	e00e      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800463c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004640:	3330      	adds	r3, #48	@ 0x30
 8004642:	4618      	mov	r0, r3
 8004644:	f003 f994 	bl	8007970 <RCCEx_PLL3_Config>
 8004648:	4603      	mov	r3, r0
 800464a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800464e:	e004      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004656:	e000      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800465a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10c      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004662:	4ba9      	ldr	r3, [pc, #676]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004664:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004668:	f023 0107 	bic.w	r1, r3, #7
 800466c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004672:	4aa5      	ldr	r2, [pc, #660]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004674:	430b      	orrs	r3, r1
 8004676:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800467a:	e003      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004680:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004684:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468c:	f002 0a02 	and.w	sl, r2, #2
 8004690:	f04f 0b00 	mov.w	fp, #0
 8004694:	ea5a 030b 	orrs.w	r3, sl, fp
 8004698:	f000 8088 	beq.w	80047ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800469c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a2:	2b28      	cmp	r3, #40	@ 0x28
 80046a4:	d868      	bhi.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80046a6:	a201      	add	r2, pc, #4	@ (adr r2, 80046ac <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80046a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ac:	08004781 	.word	0x08004781
 80046b0:	08004779 	.word	0x08004779
 80046b4:	08004779 	.word	0x08004779
 80046b8:	08004779 	.word	0x08004779
 80046bc:	08004779 	.word	0x08004779
 80046c0:	08004779 	.word	0x08004779
 80046c4:	08004779 	.word	0x08004779
 80046c8:	08004779 	.word	0x08004779
 80046cc:	08004751 	.word	0x08004751
 80046d0:	08004779 	.word	0x08004779
 80046d4:	08004779 	.word	0x08004779
 80046d8:	08004779 	.word	0x08004779
 80046dc:	08004779 	.word	0x08004779
 80046e0:	08004779 	.word	0x08004779
 80046e4:	08004779 	.word	0x08004779
 80046e8:	08004779 	.word	0x08004779
 80046ec:	08004765 	.word	0x08004765
 80046f0:	08004779 	.word	0x08004779
 80046f4:	08004779 	.word	0x08004779
 80046f8:	08004779 	.word	0x08004779
 80046fc:	08004779 	.word	0x08004779
 8004700:	08004779 	.word	0x08004779
 8004704:	08004779 	.word	0x08004779
 8004708:	08004779 	.word	0x08004779
 800470c:	08004781 	.word	0x08004781
 8004710:	08004779 	.word	0x08004779
 8004714:	08004779 	.word	0x08004779
 8004718:	08004779 	.word	0x08004779
 800471c:	08004779 	.word	0x08004779
 8004720:	08004779 	.word	0x08004779
 8004724:	08004779 	.word	0x08004779
 8004728:	08004779 	.word	0x08004779
 800472c:	08004781 	.word	0x08004781
 8004730:	08004779 	.word	0x08004779
 8004734:	08004779 	.word	0x08004779
 8004738:	08004779 	.word	0x08004779
 800473c:	08004779 	.word	0x08004779
 8004740:	08004779 	.word	0x08004779
 8004744:	08004779 	.word	0x08004779
 8004748:	08004779 	.word	0x08004779
 800474c:	08004781 	.word	0x08004781
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004750:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004754:	3308      	adds	r3, #8
 8004756:	4618      	mov	r0, r3
 8004758:	f003 f872 	bl	8007840 <RCCEx_PLL2_Config>
 800475c:	4603      	mov	r3, r0
 800475e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004762:	e00e      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004764:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004768:	3330      	adds	r3, #48	@ 0x30
 800476a:	4618      	mov	r0, r3
 800476c:	f003 f900 	bl	8007970 <RCCEx_PLL3_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004776:	e004      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800477e:	e000      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004782:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10c      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800478a:	4b5f      	ldr	r3, [pc, #380]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800478c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004790:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004794:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800479a:	4a5b      	ldr	r2, [pc, #364]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800479c:	430b      	orrs	r3, r1
 800479e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80047a2:	e003      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80047a8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b4:	f002 0304 	and.w	r3, r2, #4
 80047b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047bc:	2300      	movs	r3, #0
 80047be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80047c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80047c6:	460b      	mov	r3, r1
 80047c8:	4313      	orrs	r3, r2
 80047ca:	d04e      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80047cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047d2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80047d6:	d02c      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80047d8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80047dc:	d825      	bhi.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80047de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047e2:	d028      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80047e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047e8:	d81f      	bhi.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80047ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80047ec:	d025      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x296>
 80047ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80047f0:	d81b      	bhi.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80047f2:	2b80      	cmp	r3, #128	@ 0x80
 80047f4:	d00f      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80047f6:	2b80      	cmp	r3, #128	@ 0x80
 80047f8:	d817      	bhi.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d01f      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80047fe:	2b40      	cmp	r3, #64	@ 0x40
 8004800:	d113      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004806:	3308      	adds	r3, #8
 8004808:	4618      	mov	r0, r3
 800480a:	f003 f819 	bl	8007840 <RCCEx_PLL2_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004814:	e014      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800481a:	3330      	adds	r3, #48	@ 0x30
 800481c:	4618      	mov	r0, r3
 800481e:	f003 f8a7 	bl	8007970 <RCCEx_PLL3_Config>
 8004822:	4603      	mov	r3, r0
 8004824:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004828:	e00a      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004830:	e006      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004832:	bf00      	nop
 8004834:	e004      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004836:	bf00      	nop
 8004838:	e002      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800483a:	bf00      	nop
 800483c:	e000      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800483e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004840:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10c      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004848:	4b2f      	ldr	r3, [pc, #188]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800484a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800484e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004856:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004858:	4a2b      	ldr	r2, [pc, #172]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800485a:	430b      	orrs	r3, r1
 800485c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004860:	e003      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004862:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004866:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800486a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	f002 0308 	and.w	r3, r2, #8
 8004876:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800487a:	2300      	movs	r3, #0
 800487c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004880:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004884:	460b      	mov	r3, r1
 8004886:	4313      	orrs	r3, r2
 8004888:	d056      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800488a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800488e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004890:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004894:	d031      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004896:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800489a:	d82a      	bhi.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800489c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048a0:	d02d      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80048a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048a6:	d824      	bhi.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80048a8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048ac:	d029      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80048ae:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048b2:	d81e      	bhi.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80048b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048b8:	d011      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80048ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048be:	d818      	bhi.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d023      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80048c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048c8:	d113      	bne.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048ce:	3308      	adds	r3, #8
 80048d0:	4618      	mov	r0, r3
 80048d2:	f002 ffb5 	bl	8007840 <RCCEx_PLL2_Config>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80048dc:	e017      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048e2:	3330      	adds	r3, #48	@ 0x30
 80048e4:	4618      	mov	r0, r3
 80048e6:	f003 f843 	bl	8007970 <RCCEx_PLL3_Config>
 80048ea:	4603      	mov	r3, r0
 80048ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80048f0:	e00d      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80048f8:	e009      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80048fa:	bf00      	nop
 80048fc:	e007      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80048fe:	bf00      	nop
 8004900:	e005      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004902:	bf00      	nop
 8004904:	e003      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004906:	bf00      	nop
 8004908:	44020c00 	.word	0x44020c00
        break;
 800490c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800490e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10c      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004916:	4bb9      	ldr	r3, [pc, #740]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004918:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800491c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004920:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004924:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004926:	4ab5      	ldr	r2, [pc, #724]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004928:	430b      	orrs	r3, r1
 800492a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800492e:	e003      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004930:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004934:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004938:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	f002 0310 	and.w	r3, r2, #16
 8004944:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004948:	2300      	movs	r3, #0
 800494a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800494e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004952:	460b      	mov	r3, r1
 8004954:	4313      	orrs	r3, r2
 8004956:	d053      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004958:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800495c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800495e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004962:	d031      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004964:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004968:	d82a      	bhi.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800496a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800496e:	d02d      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004970:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004974:	d824      	bhi.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004976:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800497a:	d029      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800497c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004980:	d81e      	bhi.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004982:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004986:	d011      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004988:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800498c:	d818      	bhi.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d020      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004996:	d113      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004998:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800499c:	3308      	adds	r3, #8
 800499e:	4618      	mov	r0, r3
 80049a0:	f002 ff4e 	bl	8007840 <RCCEx_PLL2_Config>
 80049a4:	4603      	mov	r3, r0
 80049a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80049aa:	e014      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049b0:	3330      	adds	r3, #48	@ 0x30
 80049b2:	4618      	mov	r0, r3
 80049b4:	f002 ffdc 	bl	8007970 <RCCEx_PLL3_Config>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80049be:	e00a      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80049c6:	e006      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80049c8:	bf00      	nop
 80049ca:	e004      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80049cc:	bf00      	nop
 80049ce:	e002      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80049d0:	bf00      	nop
 80049d2:	e000      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80049d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10c      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80049de:	4b87      	ldr	r3, [pc, #540]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80049e4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80049e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049ee:	4a83      	ldr	r2, [pc, #524]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049f0:	430b      	orrs	r3, r1
 80049f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80049f6:	e003      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049fc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	f002 0320 	and.w	r3, r2, #32
 8004a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a10:	2300      	movs	r3, #0
 8004a12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a16:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	d053      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004a20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a26:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004a2a:	d031      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004a2c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004a30:	d82a      	bhi.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004a32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a36:	d02d      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004a38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a3c:	d824      	bhi.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004a3e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004a42:	d029      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004a44:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004a48:	d81e      	bhi.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004a4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a4e:	d011      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a54:	d818      	bhi.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d020      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004a5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a5e:	d113      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a64:	3308      	adds	r3, #8
 8004a66:	4618      	mov	r0, r3
 8004a68:	f002 feea 	bl	8007840 <RCCEx_PLL2_Config>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004a72:	e014      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a78:	3330      	adds	r3, #48	@ 0x30
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f002 ff78 	bl	8007970 <RCCEx_PLL3_Config>
 8004a80:	4603      	mov	r3, r0
 8004a82:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004a86:	e00a      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004a8e:	e006      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004a90:	bf00      	nop
 8004a92:	e004      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004a94:	bf00      	nop
 8004a96:	e002      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004a98:	bf00      	nop
 8004a9a:	e000      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a9e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10c      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004aa6:	4b55      	ldr	r3, [pc, #340]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004aa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004aac:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8004ab0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab6:	4a51      	ldr	r2, [pc, #324]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004abe:	e003      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ac4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ac8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad0:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004ad4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004ade:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	d053      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004ae8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aee:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004af2:	d031      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004af4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004af8:	d82a      	bhi.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004afa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004afe:	d02d      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004b00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b04:	d824      	bhi.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004b06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b0a:	d029      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004b0c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b10:	d81e      	bhi.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004b12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b16:	d011      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004b18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b1c:	d818      	bhi.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d020      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004b22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b26:	d113      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b2c:	3308      	adds	r3, #8
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f002 fe86 	bl	8007840 <RCCEx_PLL2_Config>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004b3a:	e014      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b40:	3330      	adds	r3, #48	@ 0x30
 8004b42:	4618      	mov	r0, r3
 8004b44:	f002 ff14 	bl	8007970 <RCCEx_PLL3_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004b4e:	e00a      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004b56:	e006      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004b58:	bf00      	nop
 8004b5a:	e004      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004b5c:	bf00      	nop
 8004b5e:	e002      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004b60:	bf00      	nop
 8004b62:	e000      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b66:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10c      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004b6e:	4b23      	ldr	r3, [pc, #140]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b74:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004b78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004b80:	430b      	orrs	r3, r1
 8004b82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b86:	e003      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b88:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b8c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b98:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004ba6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4313      	orrs	r3, r2
 8004bae:	d03d      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004bb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bb6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004bba:	d01b      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004bbc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004bc0:	d814      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004bc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bc6:	d017      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8004bc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bcc:	d80e      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d016      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004bd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bd6:	d109      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bdc:	3330      	adds	r3, #48	@ 0x30
 8004bde:	4618      	mov	r0, r3
 8004be0:	f002 fec6 	bl	8007970 <RCCEx_PLL3_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004bea:	e00a      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004bf2:	e006      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004bf4:	bf00      	nop
 8004bf6:	e004      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004bf8:	bf00      	nop
 8004bfa:	e002      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8004bfc:	44020c00 	.word	0x44020c00
        break;
 8004c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c02:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10c      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004c0a:	4b99      	ldr	r3, [pc, #612]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c10:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004c14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c1a:	4a95      	ldr	r2, [pc, #596]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004c22:	e003      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c24:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c28:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c34:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004c38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c42:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004c46:	460b      	mov	r3, r1
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	d03b      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004c4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c52:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004c56:	d01b      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8004c58:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004c5c:	d814      	bhi.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004c5e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004c62:	d017      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8004c64:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004c68:	d80e      	bhi.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d014      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8004c6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c72:	d109      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c78:	3330      	adds	r3, #48	@ 0x30
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f002 fe78 	bl	8007970 <RCCEx_PLL3_Config>
 8004c80:	4603      	mov	r3, r0
 8004c82:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004c86:	e008      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004c8e:	e004      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004c90:	bf00      	nop
 8004c92:	e002      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004c94:	bf00      	nop
 8004c96:	e000      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c9a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10c      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004ca2:	4b73      	ldr	r3, [pc, #460]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ca4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ca8:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004cac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cb2:	4a6f      	ldr	r2, [pc, #444]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004cb4:	430b      	orrs	r3, r1
 8004cb6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004cba:	e003      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cbc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004cc0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004cd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004cda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	d03d      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004ce4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004cf0:	d01b      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x786>
 8004cf2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004cf6:	d814      	bhi.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004cf8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cfc:	d017      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8004cfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d02:	d80e      	bhi.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d014      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8004d08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d0c:	d109      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d12:	3330      	adds	r3, #48	@ 0x30
 8004d14:	4618      	mov	r0, r3
 8004d16:	f002 fe2b 	bl	8007970 <RCCEx_PLL3_Config>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004d20:	e008      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004d28:	e004      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004d2a:	bf00      	nop
 8004d2c:	e002      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004d2e:	bf00      	nop
 8004d30:	e000      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d34:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10d      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004d3c:	4b4c      	ldr	r3, [pc, #304]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d42:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d4e:	4a48      	ldr	r2, [pc, #288]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d50:	430b      	orrs	r3, r1
 8004d52:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004d56:	e003      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d58:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d5c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004d60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d68:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004d6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d70:	2300      	movs	r3, #0
 8004d72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004d76:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	d035      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004d80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d8c:	d015      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x816>
 8004d8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d92:	d80e      	bhi.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d012      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004d98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d9c:	d109      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004da2:	3330      	adds	r3, #48	@ 0x30
 8004da4:	4618      	mov	r0, r3
 8004da6:	f002 fde3 	bl	8007970 <RCCEx_PLL3_Config>
 8004daa:	4603      	mov	r3, r0
 8004dac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004db0:	e006      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004db8:	e002      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8004dba:	bf00      	nop
 8004dbc:	e000      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8004dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dc0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10d      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004dc8:	4b29      	ldr	r3, [pc, #164]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004dca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004dce:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004dd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dda:	4a25      	ldr	r2, [pc, #148]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004de2:	e003      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004de8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8004dec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	2100      	movs	r1, #0
 8004df6:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8004dfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e02:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004e06:	460b      	mov	r3, r1
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	d037      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8004e0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e18:	d015      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004e1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e1e:	d80e      	bhi.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d012      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8004e24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e28:	d109      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e2e:	3330      	adds	r3, #48	@ 0x30
 8004e30:	4618      	mov	r0, r3
 8004e32:	f002 fd9d 	bl	8007970 <RCCEx_PLL3_Config>
 8004e36:	4603      	mov	r3, r0
 8004e38:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8004e3c:	e006      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004e44:	e002      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8004e46:	bf00      	nop
 8004e48:	e000      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8004e4a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004e4c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10f      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8004e54:	4b06      	ldr	r3, [pc, #24]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e5a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004e5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e66:	4a02      	ldr	r2, [pc, #8]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004e6e:	e005      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8004e70:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e74:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e78:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004e7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e84:	2100      	movs	r1, #0
 8004e86:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004e88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e8e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004e92:	460b      	mov	r3, r1
 8004e94:	4313      	orrs	r3, r2
 8004e96:	d00e      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004e98:	4bb8      	ldr	r3, [pc, #736]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	4ab7      	ldr	r2, [pc, #732]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004e9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004ea2:	61d3      	str	r3, [r2, #28]
 8004ea4:	4bb5      	ldr	r3, [pc, #724]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004ea6:	69d9      	ldr	r1, [r3, #28]
 8004ea8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eac:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004eb0:	4ab2      	ldr	r2, [pc, #712]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004eb2:	430b      	orrs	r3, r1
 8004eb4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004ec2:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ec8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	d055      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004eda:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004ede:	d031      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004ee0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004ee4:	d82a      	bhi.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eea:	d02d      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8004eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ef0:	d824      	bhi.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004ef2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ef6:	d029      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8004ef8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004efc:	d81e      	bhi.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004efe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f02:	d011      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004f04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f08:	d818      	bhi.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d020      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8004f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f12:	d113      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f18:	3308      	adds	r3, #8
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f002 fc90 	bl	8007840 <RCCEx_PLL2_Config>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004f26:	e014      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f2c:	3330      	adds	r3, #48	@ 0x30
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f002 fd1e 	bl	8007970 <RCCEx_PLL3_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004f3a:	e00a      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f42:	e006      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004f44:	bf00      	nop
 8004f46:	e004      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004f48:	bf00      	nop
 8004f4a:	e002      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004f4c:	bf00      	nop
 8004f4e:	e000      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f52:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10d      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004f5a:	4b88      	ldr	r3, [pc, #544]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004f5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004f60:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004f64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f6c:	4a83      	ldr	r2, [pc, #524]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004f74:	e003      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f76:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f7a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004f8a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f90:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004f94:	460b      	mov	r3, r1
 8004f96:	4313      	orrs	r3, r2
 8004f98:	d055      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004fa6:	d031      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8004fa8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004fac:	d82a      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004fae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fb2:	d02d      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8004fb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fb8:	d824      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004fba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004fbe:	d029      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004fc0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004fc4:	d81e      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004fc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fca:	d011      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004fcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fd0:	d818      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d020      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004fd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fda:	d113      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f002 fc2c 	bl	8007840 <RCCEx_PLL2_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004fee:	e014      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ff0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ff4:	3330      	adds	r3, #48	@ 0x30
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f002 fcba 	bl	8007970 <RCCEx_PLL3_Config>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005002:	e00a      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800500a:	e006      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 800500c:	bf00      	nop
 800500e:	e004      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8005010:	bf00      	nop
 8005012:	e002      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8005014:	bf00      	nop
 8005016:	e000      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8005018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800501a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10d      	bne.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005022:	4b56      	ldr	r3, [pc, #344]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005024:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005028:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800502c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005034:	4a51      	ldr	r2, [pc, #324]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005036:	430b      	orrs	r3, r1
 8005038:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800503c:	e003      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005042:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800504a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005052:	663b      	str	r3, [r7, #96]	@ 0x60
 8005054:	2300      	movs	r3, #0
 8005056:	667b      	str	r3, [r7, #100]	@ 0x64
 8005058:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800505c:	460b      	mov	r3, r1
 800505e:	4313      	orrs	r3, r2
 8005060:	d032      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005066:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800506a:	2b05      	cmp	r3, #5
 800506c:	d80f      	bhi.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800506e:	2b03      	cmp	r3, #3
 8005070:	d211      	bcs.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8005072:	2b01      	cmp	r3, #1
 8005074:	d911      	bls.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8005076:	2b02      	cmp	r3, #2
 8005078:	d109      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800507a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800507e:	3308      	adds	r3, #8
 8005080:	4618      	mov	r0, r3
 8005082:	f002 fbdd 	bl	8007840 <RCCEx_PLL2_Config>
 8005086:	4603      	mov	r3, r0
 8005088:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800508c:	e006      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005094:	e002      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8005096:	bf00      	nop
 8005098:	e000      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800509a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800509c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10d      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80050a4:	4b35      	ldr	r3, [pc, #212]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80050a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050aa:	f023 0107 	bic.w	r1, r3, #7
 80050ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80050b6:	4a31      	ldr	r2, [pc, #196]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80050b8:	430b      	orrs	r3, r1
 80050ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80050be:	e003      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050c4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80050c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d0:	2100      	movs	r1, #0
 80050d2:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80050de:	460b      	mov	r3, r1
 80050e0:	4313      	orrs	r3, r2
 80050e2:	d024      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80050e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d005      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xb58>
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d005      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80050fa:	e002      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80050fc:	bf00      	nop
 80050fe:	e000      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8005100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005102:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10d      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800510a:	4b1c      	ldr	r3, [pc, #112]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800510c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005110:	f023 0108 	bic.w	r1, r3, #8
 8005114:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005118:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800511c:	4a17      	ldr	r2, [pc, #92]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800511e:	430b      	orrs	r3, r1
 8005120:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005124:	e003      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005126:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800512a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800512e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800513a:	653b      	str	r3, [r7, #80]	@ 0x50
 800513c:	2300      	movs	r3, #0
 800513e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005140:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005144:	460b      	mov	r3, r1
 8005146:	4313      	orrs	r3, r2
 8005148:	f000 80b9 	beq.w	80052be <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800514c:	4b0c      	ldr	r3, [pc, #48]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800514e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005150:	4a0b      	ldr	r2, [pc, #44]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8005152:	f043 0301 	orr.w	r3, r3, #1
 8005156:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005158:	f7fc fbf0 	bl	800193c <HAL_GetTick>
 800515c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005160:	e010      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005162:	f7fc fbeb 	bl	800193c <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d908      	bls.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005178:	e00a      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 800517a:	bf00      	nop
 800517c:	44020c00 	.word	0x44020c00
 8005180:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005184:	4bba      	ldr	r3, [pc, #744]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8005186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0e8      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8005190:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005194:	2b00      	cmp	r3, #0
 8005196:	f040 808e 	bne.w	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800519a:	4bb6      	ldr	r3, [pc, #728]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800519c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80051a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d023      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80051b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051b4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80051b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051bc:	4293      	cmp	r3, r2
 80051be:	d01b      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051c0:	4bac      	ldr	r3, [pc, #688]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051ce:	4ba9      	ldr	r3, [pc, #676]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051d4:	4aa7      	ldr	r2, [pc, #668]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051de:	4ba5      	ldr	r3, [pc, #660]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051e4:	4aa3      	ldr	r2, [pc, #652]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051ee:	4aa1      	ldr	r2, [pc, #644]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d019      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005204:	f7fc fb9a 	bl	800193c <HAL_GetTick>
 8005208:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800520c:	e00d      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800520e:	f7fc fb95 	bl	800193c <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005218:	1ad2      	subs	r2, r2, r3
 800521a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800521e:	429a      	cmp	r2, r3
 8005220:	d903      	bls.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8005228:	e006      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800522a:	4b92      	ldr	r3, [pc, #584]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800522c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0ea      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8005238:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d135      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005240:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005244:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005248:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800524c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005250:	d110      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8005252:	4b88      	ldr	r3, [pc, #544]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800525a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800525e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005262:	091b      	lsrs	r3, r3, #4
 8005264:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005268:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800526c:	4a81      	ldr	r2, [pc, #516]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800526e:	430b      	orrs	r3, r1
 8005270:	61d3      	str	r3, [r2, #28]
 8005272:	e005      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005274:	4b7f      	ldr	r3, [pc, #508]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	4a7e      	ldr	r2, [pc, #504]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800527a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800527e:	61d3      	str	r3, [r2, #28]
 8005280:	4b7c      	ldr	r3, [pc, #496]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005286:	4a7b      	ldr	r2, [pc, #492]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005288:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800528c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005290:	4b78      	ldr	r3, [pc, #480]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005292:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8005296:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800529a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800529e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052a2:	4a74      	ldr	r2, [pc, #464]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80052a4:	430b      	orrs	r3, r1
 80052a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80052aa:	e008      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052b0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 80052b4:	e003      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052ba:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80052be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80052ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052cc:	2300      	movs	r3, #0
 80052ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052d0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80052d4:	460b      	mov	r3, r1
 80052d6:	4313      	orrs	r3, r2
 80052d8:	d035      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80052da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052e2:	2b30      	cmp	r3, #48	@ 0x30
 80052e4:	d014      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 80052e6:	2b30      	cmp	r3, #48	@ 0x30
 80052e8:	d80e      	bhi.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80052ea:	2b20      	cmp	r3, #32
 80052ec:	d012      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d80a      	bhi.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d010      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 80052f6:	2b10      	cmp	r3, #16
 80052f8:	d106      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052fa:	4b5e      	ldr	r3, [pc, #376]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80052fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fe:	4a5d      	ldr	r2, [pc, #372]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005304:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005306:	e008      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800530e:	e004      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005310:	bf00      	nop
 8005312:	e002      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005314:	bf00      	nop
 8005316:	e000      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800531a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10d      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005322:	4b54      	ldr	r3, [pc, #336]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005328:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800532c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005330:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005334:	4a4f      	ldr	r2, [pc, #316]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005336:	430b      	orrs	r3, r1
 8005338:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800533c:	e003      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005342:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005346:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800534a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005352:	643b      	str	r3, [r7, #64]	@ 0x40
 8005354:	2300      	movs	r3, #0
 8005356:	647b      	str	r3, [r7, #68]	@ 0x44
 8005358:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800535c:	460b      	mov	r3, r1
 800535e:	4313      	orrs	r3, r2
 8005360:	d033      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8005362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005366:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 800536e:	2b40      	cmp	r3, #64	@ 0x40
 8005370:	d007      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005372:	e010      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005374:	4b3f      	ldr	r3, [pc, #252]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005378:	4a3e      	ldr	r2, [pc, #248]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800537a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800537e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005380:	e00d      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005386:	3308      	adds	r3, #8
 8005388:	4618      	mov	r0, r3
 800538a:	f002 fa59 	bl	8007840 <RCCEx_PLL2_Config>
 800538e:	4603      	mov	r3, r0
 8005390:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005394:	e003      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800539c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800539e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10d      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80053a6:	4b33      	ldr	r3, [pc, #204]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80053a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053ac:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80053b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80053ba:	430b      	orrs	r3, r1
 80053bc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80053c0:	e003      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053c6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80053ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80053d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053d8:	2300      	movs	r3, #0
 80053da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053dc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80053e0:	460b      	mov	r3, r1
 80053e2:	4313      	orrs	r3, r2
 80053e4:	d04c      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80053e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d827      	bhi.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80053f2:	a201      	add	r2, pc, #4	@ (adr r2, 80053f8 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 80053f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f8:	0800540d 	.word	0x0800540d
 80053fc:	0800541b 	.word	0x0800541b
 8005400:	0800542f 	.word	0x0800542f
 8005404:	0800544b 	.word	0x0800544b
 8005408:	0800544b 	.word	0x0800544b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800540c:	4b19      	ldr	r3, [pc, #100]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800540e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005410:	4a18      	ldr	r2, [pc, #96]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005416:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005418:	e018      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800541a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800541e:	3308      	adds	r3, #8
 8005420:	4618      	mov	r0, r3
 8005422:	f002 fa0d 	bl	8007840 <RCCEx_PLL2_Config>
 8005426:	4603      	mov	r3, r0
 8005428:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800542c:	e00e      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800542e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005432:	3330      	adds	r3, #48	@ 0x30
 8005434:	4618      	mov	r0, r3
 8005436:	f002 fa9b 	bl	8007970 <RCCEx_PLL3_Config>
 800543a:	4603      	mov	r3, r0
 800543c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005440:	e004      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005448:	e000      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 800544a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800544c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d111      	bne.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005454:	4b07      	ldr	r3, [pc, #28]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800545a:	f023 0107 	bic.w	r1, r3, #7
 800545e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005462:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005466:	4a03      	ldr	r2, [pc, #12]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005468:	430b      	orrs	r3, r1
 800546a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800546e:	e007      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8005470:	44020800 	.word	0x44020800
 8005474:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005478:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800547c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005480:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005488:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800548c:	633b      	str	r3, [r7, #48]	@ 0x30
 800548e:	2300      	movs	r3, #0
 8005490:	637b      	str	r3, [r7, #52]	@ 0x34
 8005492:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005496:	460b      	mov	r3, r1
 8005498:	4313      	orrs	r3, r2
 800549a:	f000 8081 	beq.w	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800549e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d85f      	bhi.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 80054aa:	a201      	add	r2, pc, #4	@ (adr r2, 80054b0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	08005535 	.word	0x08005535
 80054b4:	0800556b 	.word	0x0800556b
 80054b8:	0800556b 	.word	0x0800556b
 80054bc:	0800556b 	.word	0x0800556b
 80054c0:	0800556b 	.word	0x0800556b
 80054c4:	0800556b 	.word	0x0800556b
 80054c8:	0800556b 	.word	0x0800556b
 80054cc:	0800556b 	.word	0x0800556b
 80054d0:	08005543 	.word	0x08005543
 80054d4:	0800556b 	.word	0x0800556b
 80054d8:	0800556b 	.word	0x0800556b
 80054dc:	0800556b 	.word	0x0800556b
 80054e0:	0800556b 	.word	0x0800556b
 80054e4:	0800556b 	.word	0x0800556b
 80054e8:	0800556b 	.word	0x0800556b
 80054ec:	0800556b 	.word	0x0800556b
 80054f0:	08005557 	.word	0x08005557
 80054f4:	0800556b 	.word	0x0800556b
 80054f8:	0800556b 	.word	0x0800556b
 80054fc:	0800556b 	.word	0x0800556b
 8005500:	0800556b 	.word	0x0800556b
 8005504:	0800556b 	.word	0x0800556b
 8005508:	0800556b 	.word	0x0800556b
 800550c:	0800556b 	.word	0x0800556b
 8005510:	08005573 	.word	0x08005573
 8005514:	0800556b 	.word	0x0800556b
 8005518:	0800556b 	.word	0x0800556b
 800551c:	0800556b 	.word	0x0800556b
 8005520:	0800556b 	.word	0x0800556b
 8005524:	0800556b 	.word	0x0800556b
 8005528:	0800556b 	.word	0x0800556b
 800552c:	0800556b 	.word	0x0800556b
 8005530:	08005573 	.word	0x08005573
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005534:	4bb9      	ldr	r3, [pc, #740]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005538:	4ab8      	ldr	r2, [pc, #736]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800553a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800553e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005540:	e018      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005546:	3308      	adds	r3, #8
 8005548:	4618      	mov	r0, r3
 800554a:	f002 f979 	bl	8007840 <RCCEx_PLL2_Config>
 800554e:	4603      	mov	r3, r0
 8005550:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005554:	e00e      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800555a:	3330      	adds	r3, #48	@ 0x30
 800555c:	4618      	mov	r0, r3
 800555e:	f002 fa07 	bl	8007970 <RCCEx_PLL3_Config>
 8005562:	4603      	mov	r3, r0
 8005564:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005568:	e004      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005570:	e000      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8005572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005574:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10d      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800557c:	4ba7      	ldr	r3, [pc, #668]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800557e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005582:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800558a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800558e:	4aa3      	ldr	r2, [pc, #652]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005590:	430b      	orrs	r3, r1
 8005592:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005596:	e003      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005598:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800559c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80055a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80055ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055ae:	2300      	movs	r3, #0
 80055b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055b2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80055b6:	460b      	mov	r3, r1
 80055b8:	4313      	orrs	r3, r2
 80055ba:	d04e      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80055bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055c8:	d02e      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80055ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055ce:	d827      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80055d0:	2bc0      	cmp	r3, #192	@ 0xc0
 80055d2:	d02b      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x1088>
 80055d4:	2bc0      	cmp	r3, #192	@ 0xc0
 80055d6:	d823      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80055d8:	2b80      	cmp	r3, #128	@ 0x80
 80055da:	d017      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x1068>
 80055dc:	2b80      	cmp	r3, #128	@ 0x80
 80055de:	d81f      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x1046>
 80055e4:	2b40      	cmp	r3, #64	@ 0x40
 80055e6:	d007      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 80055e8:	e01a      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ea:	4b8c      	ldr	r3, [pc, #560]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80055ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ee:	4a8b      	ldr	r2, [pc, #556]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80055f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055f4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80055f6:	e01a      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055fc:	3308      	adds	r3, #8
 80055fe:	4618      	mov	r0, r3
 8005600:	f002 f91e 	bl	8007840 <RCCEx_PLL2_Config>
 8005604:	4603      	mov	r3, r0
 8005606:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800560a:	e010      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800560c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005610:	3330      	adds	r3, #48	@ 0x30
 8005612:	4618      	mov	r0, r3
 8005614:	f002 f9ac 	bl	8007970 <RCCEx_PLL3_Config>
 8005618:	4603      	mov	r3, r0
 800561a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800561e:	e006      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005626:	e002      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8005628:	bf00      	nop
 800562a:	e000      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 800562c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800562e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10d      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005636:	4b79      	ldr	r3, [pc, #484]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800563c:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8005640:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005644:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005648:	4974      	ldr	r1, [pc, #464]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800564a:	4313      	orrs	r3, r2
 800564c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005650:	e003      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005652:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005656:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800565a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005662:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005666:	623b      	str	r3, [r7, #32]
 8005668:	2300      	movs	r3, #0
 800566a:	627b      	str	r3, [r7, #36]	@ 0x24
 800566c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005670:	460b      	mov	r3, r1
 8005672:	4313      	orrs	r3, r2
 8005674:	d055      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8005676:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800567a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800567e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005682:	d031      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8005684:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005688:	d82a      	bhi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800568a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800568e:	d02d      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8005690:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005694:	d824      	bhi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005696:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800569a:	d029      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 800569c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80056a0:	d81e      	bhi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80056a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056a6:	d011      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x1128>
 80056a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ac:	d818      	bhi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d020      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 80056b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056b6:	d113      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056bc:	3308      	adds	r3, #8
 80056be:	4618      	mov	r0, r3
 80056c0:	f002 f8be 	bl	8007840 <RCCEx_PLL2_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80056ca:	e014      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056d0:	3330      	adds	r3, #48	@ 0x30
 80056d2:	4618      	mov	r0, r3
 80056d4:	f002 f94c 	bl	8007970 <RCCEx_PLL3_Config>
 80056d8:	4603      	mov	r3, r0
 80056da:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80056de:	e00a      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80056e6:	e006      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80056e8:	bf00      	nop
 80056ea:	e004      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80056ec:	bf00      	nop
 80056ee:	e002      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80056f0:	bf00      	nop
 80056f2:	e000      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80056f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10d      	bne.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80056fe:	4b47      	ldr	r3, [pc, #284]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005704:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8005708:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800570c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005710:	4942      	ldr	r1, [pc, #264]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005718:	e003      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800571a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800571e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572a:	2100      	movs	r1, #0
 800572c:	61b9      	str	r1, [r7, #24]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	61fb      	str	r3, [r7, #28]
 8005734:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005738:	460b      	mov	r3, r1
 800573a:	4313      	orrs	r3, r2
 800573c:	d03c      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800573e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005742:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005746:	2b03      	cmp	r3, #3
 8005748:	d81b      	bhi.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 800574a:	a201      	add	r2, pc, #4	@ (adr r2, 8005750 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 800574c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005750:	0800578b 	.word	0x0800578b
 8005754:	08005761 	.word	0x08005761
 8005758:	0800576f 	.word	0x0800576f
 800575c:	0800578b 	.word	0x0800578b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005760:	4b2e      	ldr	r3, [pc, #184]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005764:	4a2d      	ldr	r2, [pc, #180]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800576a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800576c:	e00e      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800576e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005772:	3308      	adds	r3, #8
 8005774:	4618      	mov	r0, r3
 8005776:	f002 f863 	bl	8007840 <RCCEx_PLL2_Config>
 800577a:	4603      	mov	r3, r0
 800577c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005780:	e004      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005788:	e000      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 800578a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800578c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10d      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005794:	4b21      	ldr	r3, [pc, #132]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005796:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800579a:	f023 0203 	bic.w	r2, r3, #3
 800579e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80057a6:	491d      	ldr	r1, [pc, #116]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80057ae:	e003      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80057b4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80057b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c0:	2100      	movs	r1, #0
 80057c2:	6139      	str	r1, [r7, #16]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80057ce:	460b      	mov	r3, r1
 80057d0:	4313      	orrs	r3, r2
 80057d2:	d03c      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80057d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057e0:	d00e      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80057e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057e6:	d815      	bhi.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d019      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 80057ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057f0:	d110      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f2:	4b0a      	ldr	r3, [pc, #40]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80057f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f6:	4a09      	ldr	r2, [pc, #36]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80057f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057fc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80057fe:	e010      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005800:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005804:	3308      	adds	r3, #8
 8005806:	4618      	mov	r0, r3
 8005808:	f002 f81a 	bl	8007840 <RCCEx_PLL2_Config>
 800580c:	4603      	mov	r3, r0
 800580e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005812:	e006      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800581a:	e002      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 800581c:	44020c00 	.word	0x44020c00
        break;
 8005820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005822:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10d      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800582a:	4b3d      	ldr	r3, [pc, #244]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800582c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005830:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005834:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005838:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800583c:	4938      	ldr	r1, [pc, #224]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005844:	e003      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005846:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800584a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800584e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	2100      	movs	r1, #0
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	f003 0310 	and.w	r3, r3, #16
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005864:	460b      	mov	r3, r1
 8005866:	4313      	orrs	r3, r2
 8005868:	d038      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800586a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800586e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005872:	2b30      	cmp	r3, #48	@ 0x30
 8005874:	d01b      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8005876:	2b30      	cmp	r3, #48	@ 0x30
 8005878:	d815      	bhi.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 800587a:	2b10      	cmp	r3, #16
 800587c:	d002      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 800587e:	2b20      	cmp	r3, #32
 8005880:	d007      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8005882:	e010      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005884:	4b26      	ldr	r3, [pc, #152]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005888:	4a25      	ldr	r2, [pc, #148]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800588a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800588e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005890:	e00e      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005896:	3330      	adds	r3, #48	@ 0x30
 8005898:	4618      	mov	r0, r3
 800589a:	f002 f869 	bl	8007970 <RCCEx_PLL3_Config>
 800589e:	4603      	mov	r3, r0
 80058a0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80058a4:	e004      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80058ac:	e000      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 80058ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10d      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80058b8:	4b19      	ldr	r3, [pc, #100]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80058ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058be:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80058c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80058ca:	4915      	ldr	r1, [pc, #84]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80058d2:	e003      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80058d8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80058dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e4:	2100      	movs	r1, #0
 80058e6:	6039      	str	r1, [r7, #0]
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	607b      	str	r3, [r7, #4]
 80058ee:	e9d7 1200 	ldrd	r1, r2, [r7]
 80058f2:	460b      	mov	r3, r1
 80058f4:	4313      	orrs	r3, r2
 80058f6:	d00c      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80058f8:	4b09      	ldr	r3, [pc, #36]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80058fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80058fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005906:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800590a:	4905      	ldr	r1, [pc, #20]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8005912:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8005916:	4618      	mov	r0, r3
 8005918:	37e8      	adds	r7, #232	@ 0xe8
 800591a:	46bd      	mov	sp, r7
 800591c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005920:	44020c00 	.word	0x44020c00

08005924 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005924:	b480      	push	{r7}
 8005926:	b08b      	sub	sp, #44	@ 0x2c
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800592c:	4bad      	ldr	r3, [pc, #692]	@ (8005be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800592e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005934:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005936:	4bab      	ldr	r3, [pc, #684]	@ (8005be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005940:	4ba8      	ldr	r3, [pc, #672]	@ (8005be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005944:	0a1b      	lsrs	r3, r3, #8
 8005946:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800594a:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800594c:	4ba5      	ldr	r3, [pc, #660]	@ (8005be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800594e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005950:	f003 0310 	and.w	r3, r3, #16
 8005954:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005956:	4ba3      	ldr	r3, [pc, #652]	@ (8005be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800595a:	08db      	lsrs	r3, r3, #3
 800595c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	fb02 f303 	mul.w	r3, r2, r3
 8005966:	ee07 3a90 	vmov	s15, r3
 800596a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 8126 	beq.w	8005bc6 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	2b03      	cmp	r3, #3
 800597e:	d053      	beq.n	8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	2b03      	cmp	r3, #3
 8005984:	d86f      	bhi.n	8005a66 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d003      	beq.n	8005994 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	2b02      	cmp	r3, #2
 8005990:	d02b      	beq.n	80059ea <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8005992:	e068      	b.n	8005a66 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005994:	4b93      	ldr	r3, [pc, #588]	@ (8005be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	08db      	lsrs	r3, r3, #3
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	4a92      	ldr	r2, [pc, #584]	@ (8005be8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80059a0:	fa22 f303 	lsr.w	r3, r2, r3
 80059a4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	ee07 3a90 	vmov	s15, r3
 80059ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	ee07 3a90 	vmov	s15, r3
 80059c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c8:	ed97 6a04 	vldr	s12, [r7, #16]
 80059cc:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005bec <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80059d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80059e8:	e068      	b.n	8005abc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	ee07 3a90 	vmov	s15, r3
 80059f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f4:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80059f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	ee07 3a90 	vmov	s15, r3
 8005a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a06:	ed97 6a04 	vldr	s12, [r7, #16]
 8005a0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005bec <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a22:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005a26:	e049      	b.n	8005abc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	ee07 3a90 	vmov	s15, r3
 8005a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a32:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	ee07 3a90 	vmov	s15, r3
 8005a40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a44:	ed97 6a04 	vldr	s12, [r7, #16]
 8005a48:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005bec <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005a4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a60:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005a64:	e02a      	b.n	8005abc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005a66:	4b5f      	ldr	r3, [pc, #380]	@ (8005be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	08db      	lsrs	r3, r3, #3
 8005a6c:	f003 0303 	and.w	r3, r3, #3
 8005a70:	4a5d      	ldr	r2, [pc, #372]	@ (8005be8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005a72:	fa22 f303 	lsr.w	r3, r2, r3
 8005a76:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	ee07 3a90 	vmov	s15, r3
 8005a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a9a:	ed97 6a04 	vldr	s12, [r7, #16]
 8005a9e:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005bec <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005aba:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005abc:	4b49      	ldr	r3, [pc, #292]	@ (8005be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ac4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ac8:	d121      	bne.n	8005b0e <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005aca:	4b46      	ldr	r3, [pc, #280]	@ (8005be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ace:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d017      	beq.n	8005b06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005ad6:	4b43      	ldr	r3, [pc, #268]	@ (8005be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ada:	0a5b      	lsrs	r3, r3, #9
 8005adc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ae0:	ee07 3a90 	vmov	s15, r3
 8005ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005ae8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005aec:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005af0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005af4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005afc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	e006      	b.n	8005b14 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	e002      	b.n	8005b14 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b14:	4b33      	ldr	r3, [pc, #204]	@ (8005be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b20:	d121      	bne.n	8005b66 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005b22:	4b30      	ldr	r3, [pc, #192]	@ (8005be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d017      	beq.n	8005b5e <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8005be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b32:	0c1b      	lsrs	r3, r3, #16
 8005b34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b38:	ee07 3a90 	vmov	s15, r3
 8005b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005b40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b44:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005b48:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b54:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	605a      	str	r2, [r3, #4]
 8005b5c:	e006      	b.n	8005b6c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	605a      	str	r2, [r3, #4]
 8005b64:	e002      	b.n	8005b6c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8005be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b78:	d121      	bne.n	8005bbe <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8005be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d017      	beq.n	8005bb6 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005b86:	4b17      	ldr	r3, [pc, #92]	@ (8005be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b8a:	0e1b      	lsrs	r3, r3, #24
 8005b8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b90:	ee07 3a90 	vmov	s15, r3
 8005b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005b98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b9c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005ba0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bac:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005bb4:	e010      	b.n	8005bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	609a      	str	r2, [r3, #8]
}
 8005bbc:	e00c      	b.n	8005bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	609a      	str	r2, [r3, #8]
}
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	609a      	str	r2, [r3, #8]
}
 8005bd8:	bf00      	nop
 8005bda:	372c      	adds	r7, #44	@ 0x2c
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	44020c00 	.word	0x44020c00
 8005be8:	03d09000 	.word	0x03d09000
 8005bec:	46000000 	.word	0x46000000
 8005bf0:	4a742400 	.word	0x4a742400
 8005bf4:	4bbebc20 	.word	0x4bbebc20

08005bf8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b08b      	sub	sp, #44	@ 0x2c
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005c00:	4bad      	ldr	r3, [pc, #692]	@ (8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c08:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005c0a:	4bab      	ldr	r3, [pc, #684]	@ (8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005c14:	4ba8      	ldr	r3, [pc, #672]	@ (8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c18:	0a1b      	lsrs	r3, r3, #8
 8005c1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c1e:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005c20:	4ba5      	ldr	r3, [pc, #660]	@ (8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c24:	f003 0310 	and.w	r3, r3, #16
 8005c28:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005c2a:	4ba3      	ldr	r3, [pc, #652]	@ (8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2e:	08db      	lsrs	r3, r3, #3
 8005c30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	fb02 f303 	mul.w	r3, r2, r3
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c42:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 8126 	beq.w	8005e9a <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d053      	beq.n	8005cfc <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d86f      	bhi.n	8005d3a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d003      	beq.n	8005c68 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d02b      	beq.n	8005cbe <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8005c66:	e068      	b.n	8005d3a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c68:	4b93      	ldr	r3, [pc, #588]	@ (8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	08db      	lsrs	r3, r3, #3
 8005c6e:	f003 0303 	and.w	r3, r3, #3
 8005c72:	4a92      	ldr	r2, [pc, #584]	@ (8005ebc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005c74:	fa22 f303 	lsr.w	r3, r2, r3
 8005c78:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	ee07 3a90 	vmov	s15, r3
 8005c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	ee07 3a90 	vmov	s15, r3
 8005c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	ee07 3a90 	vmov	s15, r3
 8005c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005ca0:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005ca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005cbc:	e068      	b.n	8005d90 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	ee07 3a90 	vmov	s15, r3
 8005cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc8:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005ccc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	ee07 3a90 	vmov	s15, r3
 8005cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cda:	ed97 6a04 	vldr	s12, [r7, #16]
 8005cde:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005cfa:	e049      	b.n	8005d90 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d06:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	ee07 3a90 	vmov	s15, r3
 8005d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d18:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d1c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005d20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d34:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005d38:	e02a      	b.n	8005d90 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d3a:	4b5f      	ldr	r3, [pc, #380]	@ (8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	08db      	lsrs	r3, r3, #3
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	4a5d      	ldr	r2, [pc, #372]	@ (8005ebc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005d46:	fa22 f303 	lsr.w	r3, r2, r3
 8005d4a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	ee07 3a90 	vmov	s15, r3
 8005d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	ee07 3a90 	vmov	s15, r3
 8005d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d6e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d72:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d8a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005d8e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d90:	4b49      	ldr	r3, [pc, #292]	@ (8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d9c:	d121      	bne.n	8005de2 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005d9e:	4b46      	ldr	r3, [pc, #280]	@ (8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d017      	beq.n	8005dda <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005daa:	4b43      	ldr	r3, [pc, #268]	@ (8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dae:	0a5b      	lsrs	r3, r3, #9
 8005db0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005db4:	ee07 3a90 	vmov	s15, r3
 8005db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005dbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dc0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005dc4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005dc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dd0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	e006      	b.n	8005de8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	e002      	b.n	8005de8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005de8:	4b33      	ldr	r3, [pc, #204]	@ (8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005df0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005df4:	d121      	bne.n	8005e3a <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005df6:	4b30      	ldr	r3, [pc, #192]	@ (8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d017      	beq.n	8005e32 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005e02:	4b2d      	ldr	r3, [pc, #180]	@ (8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e06:	0c1b      	lsrs	r3, r3, #16
 8005e08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e0c:	ee07 3a90 	vmov	s15, r3
 8005e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005e14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e18:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005e1c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e28:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	605a      	str	r2, [r3, #4]
 8005e30:	e006      	b.n	8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	605a      	str	r2, [r3, #4]
 8005e38:	e002      	b.n	8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e40:	4b1d      	ldr	r3, [pc, #116]	@ (8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e4c:	d121      	bne.n	8005e92 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d017      	beq.n	8005e8a <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005e5a:	4b17      	ldr	r3, [pc, #92]	@ (8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e5e:	0e1b      	lsrs	r3, r3, #24
 8005e60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e64:	ee07 3a90 	vmov	s15, r3
 8005e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8005e6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e70:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005e74:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e80:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e88:	e010      	b.n	8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	609a      	str	r2, [r3, #8]
}
 8005e90:	e00c      	b.n	8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	609a      	str	r2, [r3, #8]
}
 8005e98:	e008      	b.n	8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	609a      	str	r2, [r3, #8]
}
 8005eac:	bf00      	nop
 8005eae:	372c      	adds	r7, #44	@ 0x2c
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	44020c00 	.word	0x44020c00
 8005ebc:	03d09000 	.word	0x03d09000
 8005ec0:	46000000 	.word	0x46000000
 8005ec4:	4a742400 	.word	0x4a742400
 8005ec8:	4bbebc20 	.word	0x4bbebc20

08005ecc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b08b      	sub	sp, #44	@ 0x2c
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005ed4:	4bad      	ldr	r3, [pc, #692]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005edc:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005ede:	4bab      	ldr	r3, [pc, #684]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005ee8:	4ba8      	ldr	r3, [pc, #672]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eec:	0a1b      	lsrs	r3, r3, #8
 8005eee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ef2:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005ef4:	4ba5      	ldr	r3, [pc, #660]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef8:	f003 0310 	and.w	r3, r3, #16
 8005efc:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005efe:	4ba3      	ldr	r3, [pc, #652]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f02:	08db      	lsrs	r3, r3, #3
 8005f04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	fb02 f303 	mul.w	r3, r2, r3
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f16:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 8126 	beq.w	800616e <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	2b03      	cmp	r3, #3
 8005f26:	d053      	beq.n	8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d86f      	bhi.n	800600e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d003      	beq.n	8005f3c <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d02b      	beq.n	8005f92 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8005f3a:	e068      	b.n	800600e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f3c:	4b93      	ldr	r3, [pc, #588]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	08db      	lsrs	r3, r3, #3
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	4a92      	ldr	r2, [pc, #584]	@ (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005f48:	fa22 f303 	lsr.w	r3, r2, r3
 8005f4c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	ee07 3a90 	vmov	s15, r3
 8005f54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	ee07 3a90 	vmov	s15, r3
 8005f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f70:	ed97 6a04 	vldr	s12, [r7, #16]
 8005f74:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005f78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f8c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005f90:	e068      	b.n	8006064 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	ee07 3a90 	vmov	s15, r3
 8005f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8006198 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005fa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	ee07 3a90 	vmov	s15, r3
 8005faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fae:	ed97 6a04 	vldr	s12, [r7, #16]
 8005fb2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005fce:	e049      	b.n	8006064 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fda:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800619c <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8005fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	ee07 3a90 	vmov	s15, r3
 8005fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fec:	ed97 6a04 	vldr	s12, [r7, #16]
 8005ff0:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005ff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ffc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006000:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006008:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800600c:	e02a      	b.n	8006064 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800600e:	4b5f      	ldr	r3, [pc, #380]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	08db      	lsrs	r3, r3, #3
 8006014:	f003 0303 	and.w	r3, r3, #3
 8006018:	4a5d      	ldr	r2, [pc, #372]	@ (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800601a:	fa22 f303 	lsr.w	r3, r2, r3
 800601e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	ee07 3a90 	vmov	s15, r3
 8006030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006034:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	ee07 3a90 	vmov	s15, r3
 800603e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006042:	ed97 6a04 	vldr	s12, [r7, #16]
 8006046:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800604a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800604e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800605a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800605e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006062:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006064:	4b49      	ldr	r3, [pc, #292]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800606c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006070:	d121      	bne.n	80060b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006072:	4b46      	ldr	r3, [pc, #280]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006076:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d017      	beq.n	80060ae <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800607e:	4b43      	ldr	r3, [pc, #268]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006082:	0a5b      	lsrs	r3, r3, #9
 8006084:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006088:	ee07 3a90 	vmov	s15, r3
 800608c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8006090:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006094:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006098:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800609c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060a4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	e006      	b.n	80060bc <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	e002      	b.n	80060bc <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060bc:	4b33      	ldr	r3, [pc, #204]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060c8:	d121      	bne.n	800610e <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80060ca:	4b30      	ldr	r3, [pc, #192]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80060cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d017      	beq.n	8006106 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80060d6:	4b2d      	ldr	r3, [pc, #180]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80060d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060da:	0c1b      	lsrs	r3, r3, #16
 80060dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060e0:	ee07 3a90 	vmov	s15, r3
 80060e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80060e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060ec:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80060f0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80060f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060fc:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	605a      	str	r2, [r3, #4]
 8006104:	e006      	b.n	8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	605a      	str	r2, [r3, #4]
 800610c:	e002      	b.n	8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006114:	4b1d      	ldr	r3, [pc, #116]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800611c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006120:	d121      	bne.n	8006166 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006122:	4b1a      	ldr	r3, [pc, #104]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006126:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d017      	beq.n	800615e <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800612e:	4b17      	ldr	r3, [pc, #92]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006132:	0e1b      	lsrs	r3, r3, #24
 8006134:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006138:	ee07 3a90 	vmov	s15, r3
 800613c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8006140:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006144:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006148:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800614c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006154:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800615c:	e010      	b.n	8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	609a      	str	r2, [r3, #8]
}
 8006164:	e00c      	b.n	8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	609a      	str	r2, [r3, #8]
}
 800616c:	e008      	b.n	8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	609a      	str	r2, [r3, #8]
}
 8006180:	bf00      	nop
 8006182:	372c      	adds	r7, #44	@ 0x2c
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	44020c00 	.word	0x44020c00
 8006190:	03d09000 	.word	0x03d09000
 8006194:	46000000 	.word	0x46000000
 8006198:	4a742400 	.word	0x4a742400
 800619c:	4bbebc20 	.word	0x4bbebc20

080061a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80061a0:	b590      	push	{r4, r7, lr}
 80061a2:	b08f      	sub	sp, #60	@ 0x3c
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80061aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061ae:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80061b2:	4321      	orrs	r1, r4
 80061b4:	d150      	bne.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80061b6:	4b26      	ldr	r3, [pc, #152]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80061b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061c0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80061c2:	4b23      	ldr	r3, [pc, #140]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80061c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d108      	bne.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80061d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061d6:	d104      	bne.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80061d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80061de:	f001 bb20 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80061e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80061e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061f0:	d108      	bne.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80061f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061f8:	d104      	bne.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80061fa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80061fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006200:	f001 bb0f 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8006204:	4b12      	ldr	r3, [pc, #72]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800620c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006210:	d119      	bne.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8006212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006214:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006218:	d115      	bne.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800621a:	4b0d      	ldr	r3, [pc, #52]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8006222:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006226:	d30a      	bcc.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8006228:	4b09      	ldr	r3, [pc, #36]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	0a1b      	lsrs	r3, r3, #8
 800622e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006232:	4a08      	ldr	r2, [pc, #32]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006234:	fbb2 f3f3 	udiv	r3, r2, r3
 8006238:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800623a:	f001 baf2 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006242:	f001 baee 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006246:	2300      	movs	r3, #0
 8006248:	637b      	str	r3, [r7, #52]	@ 0x34
 800624a:	f001 baea 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800624e:	bf00      	nop
 8006250:	44020c00 	.word	0x44020c00
 8006254:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006258:	e9d7 0100 	ldrd	r0, r1, [r7]
 800625c:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8006260:	ea50 0104 	orrs.w	r1, r0, r4
 8006264:	f000 8615 	beq.w	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8006268:	e9d7 0100 	ldrd	r0, r1, [r7]
 800626c:	2801      	cmp	r0, #1
 800626e:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 8006272:	f081 82d3 	bcs.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006276:	e9d7 0100 	ldrd	r0, r1, [r7]
 800627a:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800627e:	ea50 0104 	orrs.w	r1, r0, r4
 8006282:	f000 84d8 	beq.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8006286:	e9d7 0100 	ldrd	r0, r1, [r7]
 800628a:	2801      	cmp	r0, #1
 800628c:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8006290:	f081 82c4 	bcs.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006294:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006298:	f1a1 0410 	sub.w	r4, r1, #16
 800629c:	ea50 0104 	orrs.w	r1, r0, r4
 80062a0:	f001 8288 	beq.w	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 80062a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062a8:	2801      	cmp	r0, #1
 80062aa:	f171 0110 	sbcs.w	r1, r1, #16
 80062ae:	f081 82b5 	bcs.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80062b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062b6:	f1a1 0408 	sub.w	r4, r1, #8
 80062ba:	ea50 0104 	orrs.w	r1, r0, r4
 80062be:	f001 81fe 	beq.w	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80062c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062c6:	2801      	cmp	r0, #1
 80062c8:	f171 0108 	sbcs.w	r1, r1, #8
 80062cc:	f081 82a6 	bcs.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80062d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062d4:	1f0c      	subs	r4, r1, #4
 80062d6:	ea50 0104 	orrs.w	r1, r0, r4
 80062da:	f000 8753 	beq.w	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 80062de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062e2:	2801      	cmp	r0, #1
 80062e4:	f171 0104 	sbcs.w	r1, r1, #4
 80062e8:	f081 8298 	bcs.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80062ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062f0:	1e8c      	subs	r4, r1, #2
 80062f2:	ea50 0104 	orrs.w	r1, r0, r4
 80062f6:	f001 8173 	beq.w	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 80062fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062fe:	2801      	cmp	r0, #1
 8006300:	f171 0102 	sbcs.w	r1, r1, #2
 8006304:	f081 828a 	bcs.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006308:	e9d7 0100 	ldrd	r0, r1, [r7]
 800630c:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8006310:	4321      	orrs	r1, r4
 8006312:	f001 80fe 	beq.w	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8006316:	e9d7 0100 	ldrd	r0, r1, [r7]
 800631a:	4ccb      	ldr	r4, [pc, #812]	@ (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 800631c:	42a0      	cmp	r0, r4
 800631e:	f171 0100 	sbcs.w	r1, r1, #0
 8006322:	f081 827b 	bcs.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006326:	e9d7 0100 	ldrd	r0, r1, [r7]
 800632a:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 800632e:	4321      	orrs	r1, r4
 8006330:	f001 8076 	beq.w	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8006334:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006338:	4cc4      	ldr	r4, [pc, #784]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 800633a:	42a0      	cmp	r0, r4
 800633c:	f171 0100 	sbcs.w	r1, r1, #0
 8006340:	f081 826c 	bcs.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006344:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006348:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800634c:	4321      	orrs	r1, r4
 800634e:	f000 87b5 	beq.w	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 8006352:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006356:	4cbe      	ldr	r4, [pc, #760]	@ (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8006358:	42a0      	cmp	r0, r4
 800635a:	f171 0100 	sbcs.w	r1, r1, #0
 800635e:	f081 825d 	bcs.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006362:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006366:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 800636a:	4321      	orrs	r1, r4
 800636c:	f000 8738 	beq.w	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8006370:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006374:	4cb7      	ldr	r4, [pc, #732]	@ (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8006376:	42a0      	cmp	r0, r4
 8006378:	f171 0100 	sbcs.w	r1, r1, #0
 800637c:	f081 824e 	bcs.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006380:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006384:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8006388:	4321      	orrs	r1, r4
 800638a:	f001 81cd 	beq.w	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 800638e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006392:	4cb1      	ldr	r4, [pc, #708]	@ (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8006394:	42a0      	cmp	r0, r4
 8006396:	f171 0100 	sbcs.w	r1, r1, #0
 800639a:	f081 823f 	bcs.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800639e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063a2:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 80063a6:	4321      	orrs	r1, r4
 80063a8:	f000 80d9 	beq.w	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80063ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063b0:	4caa      	ldr	r4, [pc, #680]	@ (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 80063b2:	42a0      	cmp	r0, r4
 80063b4:	f171 0100 	sbcs.w	r1, r1, #0
 80063b8:	f081 8230 	bcs.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80063bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063c0:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80063c4:	4321      	orrs	r1, r4
 80063c6:	f000 83da 	beq.w	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80063ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063ce:	4ca4      	ldr	r4, [pc, #656]	@ (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 80063d0:	42a0      	cmp	r0, r4
 80063d2:	f171 0100 	sbcs.w	r1, r1, #0
 80063d6:	f081 8221 	bcs.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80063da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063de:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80063e2:	4321      	orrs	r1, r4
 80063e4:	f000 8627 	beq.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 80063e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063ec:	4c9d      	ldr	r4, [pc, #628]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 80063ee:	42a0      	cmp	r0, r4
 80063f0:	f171 0100 	sbcs.w	r1, r1, #0
 80063f4:	f081 8212 	bcs.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80063f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063fc:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8006400:	4321      	orrs	r1, r4
 8006402:	f000 857a 	beq.w	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8006406:	e9d7 0100 	ldrd	r0, r1, [r7]
 800640a:	4c97      	ldr	r4, [pc, #604]	@ (8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 800640c:	42a0      	cmp	r0, r4
 800640e:	f171 0100 	sbcs.w	r1, r1, #0
 8006412:	f081 8203 	bcs.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006416:	e9d7 0100 	ldrd	r0, r1, [r7]
 800641a:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800641e:	4321      	orrs	r1, r4
 8006420:	f000 84fb 	beq.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8006424:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006428:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 800642c:	f171 0100 	sbcs.w	r1, r1, #0
 8006430:	f081 81f4 	bcs.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006434:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006438:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 800643c:	4321      	orrs	r1, r4
 800643e:	f000 84a9 	beq.w	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8006442:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006446:	f248 0401 	movw	r4, #32769	@ 0x8001
 800644a:	42a0      	cmp	r0, r4
 800644c:	f171 0100 	sbcs.w	r1, r1, #0
 8006450:	f081 81e4 	bcs.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006454:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006458:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 800645c:	4321      	orrs	r1, r4
 800645e:	f000 8456 	beq.w	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8006462:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006466:	f244 0401 	movw	r4, #16385	@ 0x4001
 800646a:	42a0      	cmp	r0, r4
 800646c:	f171 0100 	sbcs.w	r1, r1, #0
 8006470:	f081 81d4 	bcs.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006474:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006478:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 800647c:	4321      	orrs	r1, r4
 800647e:	f000 8403 	beq.w	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006482:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006486:	f242 0401 	movw	r4, #8193	@ 0x2001
 800648a:	42a0      	cmp	r0, r4
 800648c:	f171 0100 	sbcs.w	r1, r1, #0
 8006490:	f081 81c4 	bcs.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006494:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006498:	2821      	cmp	r0, #33	@ 0x21
 800649a:	f171 0100 	sbcs.w	r1, r1, #0
 800649e:	d255      	bcs.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80064a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064a4:	4301      	orrs	r1, r0
 80064a6:	f001 81b9 	beq.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80064aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064ae:	1e42      	subs	r2, r0, #1
 80064b0:	f141 33ff 	adc.w	r3, r1, #4294967295
 80064b4:	2a20      	cmp	r2, #32
 80064b6:	f173 0100 	sbcs.w	r1, r3, #0
 80064ba:	f081 81af 	bcs.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80064be:	2a1f      	cmp	r2, #31
 80064c0:	f201 81ac 	bhi.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80064c4:	a101      	add	r1, pc, #4	@ (adr r1, 80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80064c6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80064ca:	bf00      	nop
 80064cc:	080065a3 	.word	0x080065a3
 80064d0:	080066a1 	.word	0x080066a1
 80064d4:	0800781d 	.word	0x0800781d
 80064d8:	08006761 	.word	0x08006761
 80064dc:	0800781d 	.word	0x0800781d
 80064e0:	0800781d 	.word	0x0800781d
 80064e4:	0800781d 	.word	0x0800781d
 80064e8:	08006831 	.word	0x08006831
 80064ec:	0800781d 	.word	0x0800781d
 80064f0:	0800781d 	.word	0x0800781d
 80064f4:	0800781d 	.word	0x0800781d
 80064f8:	0800781d 	.word	0x0800781d
 80064fc:	0800781d 	.word	0x0800781d
 8006500:	0800781d 	.word	0x0800781d
 8006504:	0800781d 	.word	0x0800781d
 8006508:	08006915 	.word	0x08006915
 800650c:	0800781d 	.word	0x0800781d
 8006510:	0800781d 	.word	0x0800781d
 8006514:	0800781d 	.word	0x0800781d
 8006518:	0800781d 	.word	0x0800781d
 800651c:	0800781d 	.word	0x0800781d
 8006520:	0800781d 	.word	0x0800781d
 8006524:	0800781d 	.word	0x0800781d
 8006528:	0800781d 	.word	0x0800781d
 800652c:	0800781d 	.word	0x0800781d
 8006530:	0800781d 	.word	0x0800781d
 8006534:	0800781d 	.word	0x0800781d
 8006538:	0800781d 	.word	0x0800781d
 800653c:	0800781d 	.word	0x0800781d
 8006540:	0800781d 	.word	0x0800781d
 8006544:	0800781d 	.word	0x0800781d
 8006548:	080069eb 	.word	0x080069eb
 800654c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006550:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006554:	430b      	orrs	r3, r1
 8006556:	f000 82b3 	beq.w	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 800655a:	f001 b95f 	b.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800655e:	4b43      	ldr	r3, [pc, #268]	@ (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006560:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006568:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800656a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656c:	2b00      	cmp	r3, #0
 800656e:	d108      	bne.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006570:	f107 0320 	add.w	r3, r7, #32
 8006574:	4618      	mov	r0, r3
 8006576:	f7ff f9d5 	bl	8005924 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800657a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800657e:	f001 b950 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8006582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006584:	2b40      	cmp	r3, #64	@ 0x40
 8006586:	d108      	bne.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006588:	f107 0314 	add.w	r3, r7, #20
 800658c:	4618      	mov	r0, r3
 800658e:	f7ff fb33 	bl	8005bf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006596:	f001 b944 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800659e:	f001 b940 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80065a2:	4b32      	ldr	r3, [pc, #200]	@ (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80065a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80065ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d104      	bne.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80065b4:	f7fd ffca 	bl	800454c <HAL_RCC_GetPCLK2Freq>
 80065b8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80065ba:	f001 b932 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80065be:	4b2b      	ldr	r3, [pc, #172]	@ (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065ca:	d10a      	bne.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80065cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d107      	bne.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065d2:	f107 0314 	add.w	r3, r7, #20
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff fb0e 	bl	8005bf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	637b      	str	r3, [r7, #52]	@ 0x34
 80065e0:	e05c      	b.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80065e2:	4b22      	ldr	r3, [pc, #136]	@ (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065ee:	d10a      	bne.n	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80065f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d107      	bne.n	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065f6:	f107 0308 	add.w	r3, r7, #8
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7ff fc66 	bl	8005ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	637b      	str	r3, [r7, #52]	@ 0x34
 8006604:	e04a      	b.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006606:	4b19      	ldr	r3, [pc, #100]	@ (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	2b02      	cmp	r3, #2
 8006610:	d10c      	bne.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 8006612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006614:	2b03      	cmp	r3, #3
 8006616:	d109      	bne.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006618:	4b14      	ldr	r3, [pc, #80]	@ (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	08db      	lsrs	r3, r3, #3
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	4a13      	ldr	r2, [pc, #76]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 8006624:	fa22 f303 	lsr.w	r3, r2, r3
 8006628:	637b      	str	r3, [r7, #52]	@ 0x34
 800662a:	e037      	b.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800662c:	4b0f      	ldr	r3, [pc, #60]	@ (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006638:	d11e      	bne.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 800663a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663c:	2b04      	cmp	r3, #4
 800663e:	d11b      	bne.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 8006640:	4b0c      	ldr	r3, [pc, #48]	@ (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 8006642:	637b      	str	r3, [r7, #52]	@ 0x34
 8006644:	e02a      	b.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8006646:	bf00      	nop
 8006648:	40000001 	.word	0x40000001
 800664c:	20000001 	.word	0x20000001
 8006650:	10000001 	.word	0x10000001
 8006654:	08000001 	.word	0x08000001
 8006658:	04000001 	.word	0x04000001
 800665c:	00400001 	.word	0x00400001
 8006660:	00200001 	.word	0x00200001
 8006664:	00040001 	.word	0x00040001
 8006668:	00020001 	.word	0x00020001
 800666c:	44020c00 	.word	0x44020c00
 8006670:	03d09000 	.word	0x03d09000
 8006674:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006678:	4ba3      	ldr	r3, [pc, #652]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800667a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b02      	cmp	r3, #2
 8006684:	d106      	bne.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8006686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006688:	2b05      	cmp	r3, #5
 800668a:	d103      	bne.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 800668c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006690:	637b      	str	r3, [r7, #52]	@ 0x34
 8006692:	e003      	b.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 8006694:	2300      	movs	r3, #0
 8006696:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006698:	f001 b8c3 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800669c:	f001 b8c1 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80066a0:	4b99      	ldr	r3, [pc, #612]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80066a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80066a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066aa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80066ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d104      	bne.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80066b2:	f7fd ff35 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 80066b6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80066b8:	f001 b8b3 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80066bc:	4b92      	ldr	r3, [pc, #584]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066c8:	d10a      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	2b08      	cmp	r3, #8
 80066ce:	d107      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066d0:	f107 0314 	add.w	r3, r7, #20
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7ff fa8f 	bl	8005bf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80066de:	e03d      	b.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80066e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e2:	2b10      	cmp	r3, #16
 80066e4:	d108      	bne.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066e6:	f107 0308 	add.w	r3, r7, #8
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7ff fbee 	bl	8005ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066f4:	f001 b895 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80066f8:	4b83      	ldr	r3, [pc, #524]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b02      	cmp	r3, #2
 8006702:	d10c      	bne.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8006704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006706:	2b18      	cmp	r3, #24
 8006708:	d109      	bne.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800670a:	4b7f      	ldr	r3, [pc, #508]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	08db      	lsrs	r3, r3, #3
 8006710:	f003 0303 	and.w	r3, r3, #3
 8006714:	4a7d      	ldr	r2, [pc, #500]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8006716:	fa22 f303 	lsr.w	r3, r2, r3
 800671a:	637b      	str	r3, [r7, #52]	@ 0x34
 800671c:	e01e      	b.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800671e:	4b7a      	ldr	r3, [pc, #488]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006726:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800672a:	d105      	bne.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800672c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672e:	2b20      	cmp	r3, #32
 8006730:	d102      	bne.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 8006732:	4b77      	ldr	r3, [pc, #476]	@ (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8006734:	637b      	str	r3, [r7, #52]	@ 0x34
 8006736:	e011      	b.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006738:	4b73      	ldr	r3, [pc, #460]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800673a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b02      	cmp	r3, #2
 8006744:	d106      	bne.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8006746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006748:	2b28      	cmp	r3, #40	@ 0x28
 800674a:	d103      	bne.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 800674c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006750:	637b      	str	r3, [r7, #52]	@ 0x34
 8006752:	e003      	b.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 8006754:	2300      	movs	r3, #0
 8006756:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006758:	f001 b863 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800675c:	f001 b861 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006760:	4b69      	ldr	r3, [pc, #420]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006762:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006766:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800676a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800676c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676e:	2b00      	cmp	r3, #0
 8006770:	d104      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006772:	f7fd fed5 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 8006776:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006778:	f001 b853 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800677c:	4b62      	ldr	r3, [pc, #392]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006784:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006788:	d10a      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800678a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678c:	2b40      	cmp	r3, #64	@ 0x40
 800678e:	d107      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006790:	f107 0314 	add.w	r3, r7, #20
 8006794:	4618      	mov	r0, r3
 8006796:	f7ff fa2f 	bl	8005bf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	637b      	str	r3, [r7, #52]	@ 0x34
 800679e:	e045      	b.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80067a0:	4b59      	ldr	r3, [pc, #356]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067ac:	d10a      	bne.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b0:	2b80      	cmp	r3, #128	@ 0x80
 80067b2:	d107      	bne.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067b4:	f107 0308 	add.w	r3, r7, #8
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff fb87 	bl	8005ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80067c2:	e033      	b.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80067c4:	4b50      	ldr	r3, [pc, #320]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d10c      	bne.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80067d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80067d4:	d109      	bne.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067d6:	4b4c      	ldr	r3, [pc, #304]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	08db      	lsrs	r3, r3, #3
 80067dc:	f003 0303 	and.w	r3, r3, #3
 80067e0:	4a4a      	ldr	r2, [pc, #296]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80067e2:	fa22 f303 	lsr.w	r3, r2, r3
 80067e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80067e8:	e020      	b.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80067ea:	4b47      	ldr	r3, [pc, #284]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067f6:	d106      	bne.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 80067f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067fe:	d102      	bne.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 8006800:	4b43      	ldr	r3, [pc, #268]	@ (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8006802:	637b      	str	r3, [r7, #52]	@ 0x34
 8006804:	e012      	b.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006806:	4b40      	ldr	r3, [pc, #256]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b02      	cmp	r3, #2
 8006812:	d107      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006816:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800681a:	d103      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 800681c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006820:	637b      	str	r3, [r7, #52]	@ 0x34
 8006822:	e003      	b.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006828:	f000 bffb 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800682c:	f000 bff9 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006830:	4b35      	ldr	r3, [pc, #212]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006832:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006836:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800683a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800683c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683e:	2b00      	cmp	r3, #0
 8006840:	d104      	bne.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006842:	f7fd fe6d 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 8006846:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006848:	f000 bfeb 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800684c:	4b2e      	ldr	r3, [pc, #184]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006854:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006858:	d10b      	bne.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 800685a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006860:	d107      	bne.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006862:	f107 0314 	add.w	r3, r7, #20
 8006866:	4618      	mov	r0, r3
 8006868:	f7ff f9c6 	bl	8005bf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006870:	e047      	b.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8006872:	4b25      	ldr	r3, [pc, #148]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800687a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800687e:	d10b      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006886:	d107      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006888:	f107 0308 	add.w	r3, r7, #8
 800688c:	4618      	mov	r0, r3
 800688e:	f7ff fb1d 	bl	8005ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	637b      	str	r3, [r7, #52]	@ 0x34
 8006896:	e034      	b.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006898:	4b1b      	ldr	r3, [pc, #108]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d10d      	bne.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80068a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80068aa:	d109      	bne.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068ac:	4b16      	ldr	r3, [pc, #88]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	08db      	lsrs	r3, r3, #3
 80068b2:	f003 0303 	and.w	r3, r3, #3
 80068b6:	4a15      	ldr	r2, [pc, #84]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80068b8:	fa22 f303 	lsr.w	r3, r2, r3
 80068bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80068be:	e020      	b.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80068c0:	4b11      	ldr	r3, [pc, #68]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068cc:	d106      	bne.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80068ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068d4:	d102      	bne.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 80068d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80068d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068da:	e012      	b.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80068dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80068de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d107      	bne.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80068ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ec:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80068f0:	d103      	bne.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 80068f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80068f8:	e003      	b.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068fe:	f000 bf90 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006902:	f000 bf8e 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006906:	bf00      	nop
 8006908:	44020c00 	.word	0x44020c00
 800690c:	03d09000 	.word	0x03d09000
 8006910:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006914:	4ba5      	ldr	r3, [pc, #660]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006916:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800691a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800691e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006922:	2b00      	cmp	r3, #0
 8006924:	d104      	bne.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006926:	f7fd fdfb 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 800692a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800692c:	f000 bf79 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8006930:	4b9e      	ldr	r3, [pc, #632]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006938:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800693c:	d10b      	bne.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006944:	d107      	bne.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006946:	f107 0314 	add.w	r3, r7, #20
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff f954 	bl	8005bf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	637b      	str	r3, [r7, #52]	@ 0x34
 8006954:	e047      	b.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8006956:	4b95      	ldr	r3, [pc, #596]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800695e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006962:	d10b      	bne.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8006964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800696a:	d107      	bne.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800696c:	f107 0308 	add.w	r3, r7, #8
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff faab 	bl	8005ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	637b      	str	r3, [r7, #52]	@ 0x34
 800697a:	e034      	b.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800697c:	4b8b      	ldr	r3, [pc, #556]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b02      	cmp	r3, #2
 8006986:	d10d      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8006988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800698e:	d109      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006990:	4b86      	ldr	r3, [pc, #536]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	08db      	lsrs	r3, r3, #3
 8006996:	f003 0303 	and.w	r3, r3, #3
 800699a:	4a85      	ldr	r2, [pc, #532]	@ (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 800699c:	fa22 f303 	lsr.w	r3, r2, r3
 80069a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80069a2:	e020      	b.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80069a4:	4b81      	ldr	r3, [pc, #516]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069b0:	d106      	bne.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80069b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069b8:	d102      	bne.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 80069ba:	4b7e      	ldr	r3, [pc, #504]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80069bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80069be:	e012      	b.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80069c0:	4b7a      	ldr	r3, [pc, #488]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80069c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d107      	bne.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 80069ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80069d4:	d103      	bne.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 80069d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069da:	637b      	str	r3, [r7, #52]	@ 0x34
 80069dc:	e003      	b.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069e2:	f000 bf1e 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80069e6:	f000 bf1c 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80069ea:	4b70      	ldr	r3, [pc, #448]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80069ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80069f0:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80069f4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80069f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d104      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80069fc:	f7fd fd90 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 8006a00:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a02:	f000 bf0e 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8006a06:	4b69      	ldr	r3, [pc, #420]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a12:	d10b      	bne.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8006a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a1a:	d107      	bne.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a1c:	f107 0314 	add.w	r3, r7, #20
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7ff f8e9 	bl	8005bf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a2a:	e047      	b.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8006a2c:	4b5f      	ldr	r3, [pc, #380]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a38:	d10b      	bne.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a40:	d107      	bne.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a42:	f107 0308 	add.w	r3, r7, #8
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff fa40 	bl	8005ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a50:	e034      	b.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8006a52:	4b56      	ldr	r3, [pc, #344]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d10d      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a60:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006a64:	d109      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a66:	4b51      	ldr	r3, [pc, #324]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	08db      	lsrs	r3, r3, #3
 8006a6c:	f003 0303 	and.w	r3, r3, #3
 8006a70:	4a4f      	ldr	r2, [pc, #316]	@ (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8006a72:	fa22 f303 	lsr.w	r3, r2, r3
 8006a76:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a78:	e020      	b.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8006a7a:	4b4c      	ldr	r3, [pc, #304]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a86:	d106      	bne.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8006a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a8e:	d102      	bne.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8006a90:	4b48      	ldr	r3, [pc, #288]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8006a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a94:	e012      	b.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006a96:	4b45      	ldr	r3, [pc, #276]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d107      	bne.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006aaa:	d103      	bne.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8006aac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ab0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ab2:	e003      	b.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ab8:	f000 beb3 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006abc:	f000 beb1 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006ac0:	4b3a      	ldr	r3, [pc, #232]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ac6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006aca:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d104      	bne.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006ad2:	f7fd fd51 	bl	8004578 <HAL_RCC_GetPCLK3Freq>
 8006ad6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006ad8:	f000 bea3 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ade:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ae2:	d108      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ae4:	f107 0314 	add.w	r3, r7, #20
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff f885 	bl	8005bf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006af2:	f000 be96 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006afc:	d108      	bne.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006afe:	f107 0308 	add.w	r3, r7, #8
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7ff f9e2 	bl	8005ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b0c:	f000 be89 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006b10:	4b26      	ldr	r3, [pc, #152]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d10d      	bne.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006b22:	d109      	bne.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b24:	4b21      	ldr	r3, [pc, #132]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	08db      	lsrs	r3, r3, #3
 8006b2a:	f003 0303 	and.w	r3, r3, #3
 8006b2e:	4a20      	ldr	r2, [pc, #128]	@ (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8006b30:	fa22 f303 	lsr.w	r3, r2, r3
 8006b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b36:	e020      	b.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006b38:	4b1c      	ldr	r3, [pc, #112]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b44:	d106      	bne.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8006b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b4c:	d102      	bne.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8006b4e:	4b19      	ldr	r3, [pc, #100]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8006b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b52:	e012      	b.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006b54:	4b15      	ldr	r3, [pc, #84]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006b56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d107      	bne.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8006b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b64:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006b68:	d103      	bne.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8006b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b70:	e003      	b.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b76:	f000 be54 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006b7a:	f000 be52 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006b80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d104      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006b90:	f7fd fcaa 	bl	80044e8 <HAL_RCC_GetHCLKFreq>
 8006b94:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006b96:	f000 be44 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d10b      	bne.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ba0:	f7fd fb76 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8006ba4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006ba6:	f000 be3c 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006baa:	bf00      	nop
 8006bac:	44020c00 	.word	0x44020c00
 8006bb0:	03d09000 	.word	0x03d09000
 8006bb4:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d108      	bne.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bbe:	f107 0314 	add.w	r3, r7, #20
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7ff f818 	bl	8005bf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bcc:	f000 be29 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006bd0:	4b9f      	ldr	r3, [pc, #636]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bdc:	d105      	bne.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8006bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d102      	bne.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8006be4:	4b9b      	ldr	r3, [pc, #620]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8006be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be8:	e023      	b.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006bea:	4b99      	ldr	r3, [pc, #612]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0302 	and.w	r3, r3, #2
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d10c      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf8:	2b04      	cmp	r3, #4
 8006bfa:	d109      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006bfc:	4b94      	ldr	r3, [pc, #592]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	08db      	lsrs	r3, r3, #3
 8006c02:	f003 0303 	and.w	r3, r3, #3
 8006c06:	4a94      	ldr	r2, [pc, #592]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006c08:	fa22 f303 	lsr.w	r3, r2, r3
 8006c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c0e:	e010      	b.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006c10:	4b8f      	ldr	r3, [pc, #572]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c1c:	d105      	bne.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c20:	2b05      	cmp	r3, #5
 8006c22:	d102      	bne.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8006c24:	4b8d      	ldr	r3, [pc, #564]	@ (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006c26:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c28:	e003      	b.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c2e:	f000 bdf8 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006c32:	f000 bdf6 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006c36:	4b86      	ldr	r3, [pc, #536]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006c38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c3c:	f003 0308 	and.w	r3, r3, #8
 8006c40:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8006c42:	4b83      	ldr	r3, [pc, #524]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d106      	bne.n	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8006c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d103      	bne.n	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8006c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c5c:	e012      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006c5e:	4b7c      	ldr	r3, [pc, #496]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006c60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c6c:	d106      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c70:	2b08      	cmp	r3, #8
 8006c72:	d103      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8006c74:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c7a:	e003      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8006c80:	f000 bdcf 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006c84:	f000 bdcd 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006c88:	4b71      	ldr	r3, [pc, #452]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006c8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c92:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d104      	bne.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c9a:	f7fd fc41 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 8006c9e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006ca0:	f000 bdbf 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006caa:	d108      	bne.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cac:	f107 0308 	add.w	r3, r7, #8
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7ff f90b 	bl	8005ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cba:	f000 bdb2 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006cbe:	4b64      	ldr	r3, [pc, #400]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d10d      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8006cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ccc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cd0:	d109      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cd2:	4b5f      	ldr	r3, [pc, #380]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	08db      	lsrs	r3, r3, #3
 8006cd8:	f003 0303 	and.w	r3, r3, #3
 8006cdc:	4a5e      	ldr	r2, [pc, #376]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006cde:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ce4:	e011      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006ce6:	4b5a      	ldr	r3, [pc, #360]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cf2:	d106      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006cfa:	d102      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8006cfc:	4b57      	ldr	r3, [pc, #348]	@ (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006cfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d00:	e003      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d06:	f000 bd8c 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006d0a:	f000 bd8a 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006d0e:	4b50      	ldr	r3, [pc, #320]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006d10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d14:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006d18:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d104      	bne.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d20:	f7fd fbfe 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 8006d24:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006d26:	f000 bd7c 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d30:	d108      	bne.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d32:	f107 0308 	add.w	r3, r7, #8
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7ff f8c8 	bl	8005ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d40:	f000 bd6f 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006d44:	4b42      	ldr	r3, [pc, #264]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d10d      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8006d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d52:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006d56:	d109      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d58:	4b3d      	ldr	r3, [pc, #244]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	08db      	lsrs	r3, r3, #3
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	4a3d      	ldr	r2, [pc, #244]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006d64:	fa22 f303 	lsr.w	r3, r2, r3
 8006d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d6a:	e011      	b.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006d6c:	4b38      	ldr	r3, [pc, #224]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d78:	d106      	bne.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006d80:	d102      	bne.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8006d82:	4b36      	ldr	r3, [pc, #216]	@ (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006d84:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d86:	e003      	b.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d8c:	f000 bd49 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006d90:	f000 bd47 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006d94:	4b2e      	ldr	r3, [pc, #184]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006d96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d9a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006d9e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d104      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006da6:	f7fd fbe7 	bl	8004578 <HAL_RCC_GetPCLK3Freq>
 8006daa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006dac:	f000 bd39 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006db6:	d108      	bne.n	8006dca <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006db8:	f107 0308 	add.w	r3, r7, #8
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff f885 	bl	8005ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dc6:	f000 bd2c 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006dca:	4b21      	ldr	r3, [pc, #132]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d10d      	bne.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ddc:	d109      	bne.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006dde:	4b1c      	ldr	r3, [pc, #112]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	08db      	lsrs	r3, r3, #3
 8006de4:	f003 0303 	and.w	r3, r3, #3
 8006de8:	4a1b      	ldr	r2, [pc, #108]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006dea:	fa22 f303 	lsr.w	r3, r2, r3
 8006dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006df0:	e011      	b.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8006df2:	4b17      	ldr	r3, [pc, #92]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dfe:	d106      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8006e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e02:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e06:	d102      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8006e08:	4b14      	ldr	r3, [pc, #80]	@ (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e0c:	e003      	b.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e12:	f000 bd06 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006e16:	f000 bd04 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006e1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e20:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006e24:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d104      	bne.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e2c:	f7fd fb78 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 8006e30:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006e32:	f000 bcf6 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e3c:	d110      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e3e:	f107 0308 	add.w	r3, r7, #8
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7ff f842 	bl	8005ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e4c:	f000 bce9 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006e50:	44020c00 	.word	0x44020c00
 8006e54:	017d7840 	.word	0x017d7840
 8006e58:	03d09000 	.word	0x03d09000
 8006e5c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006e60:	4ba4      	ldr	r3, [pc, #656]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d10e      	bne.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e72:	d10a      	bne.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e74:	4b9f      	ldr	r3, [pc, #636]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	08db      	lsrs	r3, r3, #3
 8006e7a:	f003 0303 	and.w	r3, r3, #3
 8006e7e:	4a9e      	ldr	r2, [pc, #632]	@ (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006e80:	fa22 f303 	lsr.w	r3, r2, r3
 8006e84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e86:	f000 bccc 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e8e:	f000 bcc8 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8006e92:	4b98      	ldr	r3, [pc, #608]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006e94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e98:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006e9c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d104      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006ea4:	f7fd fb68 	bl	8004578 <HAL_RCC_GetPCLK3Freq>
 8006ea8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006eaa:	f000 bcba 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8006eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006eb4:	d108      	bne.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eb6:	f107 0308 	add.w	r3, r7, #8
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7ff f806 	bl	8005ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ec4:	f000 bcad 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8006ec8:	4b8a      	ldr	r3, [pc, #552]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d10e      	bne.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006eda:	d10a      	bne.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006edc:	4b85      	ldr	r3, [pc, #532]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	08db      	lsrs	r3, r3, #3
 8006ee2:	f003 0303 	and.w	r3, r3, #3
 8006ee6:	4a84      	ldr	r2, [pc, #528]	@ (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8006eec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006eee:	f000 bc98 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ef6:	f000 bc94 	b.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006efa:	4b7e      	ldr	r3, [pc, #504]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006efc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006f00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f04:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f08:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006f0c:	d056      	beq.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f10:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006f14:	f200 808b 	bhi.w	800702e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f1e:	d03e      	beq.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8006f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f26:	f200 8082 	bhi.w	800702e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f30:	d027      	beq.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8006f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f38:	d879      	bhi.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f40:	d017      	beq.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8006f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f48:	d871      	bhi.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d004      	beq.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8006f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f56:	d004      	beq.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8006f58:	e069      	b.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006f5a:	f7fd fb0d 	bl	8004578 <HAL_RCC_GetPCLK3Freq>
 8006f5e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006f60:	e068      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f62:	f107 0314 	add.w	r3, r7, #20
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fe fe46 	bl	8005bf8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f70:	e060      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f72:	f107 0308 	add.w	r3, r7, #8
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fe ffa8 	bl	8005ecc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f80:	e058      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f82:	4b5c      	ldr	r3, [pc, #368]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006f84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d103      	bne.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8006f90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f94:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006f96:	e04d      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f9c:	e04a      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006f9e:	4b55      	ldr	r3, [pc, #340]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fac:	d103      	bne.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8006fae:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006fb2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006fb4:	e03e      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006fba:	e03b      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fbc:	4b4d      	ldr	r3, [pc, #308]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fc2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fc8:	4b4a      	ldr	r3, [pc, #296]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0302 	and.w	r3, r3, #2
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d10c      	bne.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8006fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d109      	bne.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006fda:	4b46      	ldr	r3, [pc, #280]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	08db      	lsrs	r3, r3, #3
 8006fe0:	f003 0303 	and.w	r3, r3, #3
 8006fe4:	4a44      	ldr	r2, [pc, #272]	@ (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8006fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fec:	e01e      	b.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fee:	4b41      	ldr	r3, [pc, #260]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ff6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ffa:	d106      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007002:	d102      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007004:	4b3d      	ldr	r3, [pc, #244]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007006:	637b      	str	r3, [r7, #52]	@ 0x34
 8007008:	e010      	b.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800700a:	4b3a      	ldr	r3, [pc, #232]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007012:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007016:	d106      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8007018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800701a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800701e:	d102      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007020:	4b37      	ldr	r3, [pc, #220]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8007022:	637b      	str	r3, [r7, #52]	@ 0x34
 8007024:	e002      	b.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800702a:	e003      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 800702c:	e002      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007032:	bf00      	nop
          }
        }
        break;
 8007034:	e3f5      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007036:	4b2f      	ldr	r3, [pc, #188]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007038:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800703c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007040:	633b      	str	r3, [r7, #48]	@ 0x30
 8007042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007044:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007048:	d05f      	beq.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 800704a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007050:	f200 8094 	bhi.w	800717c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007056:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800705a:	d03f      	beq.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 800705c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007062:	f200 808b 	bhi.w	800717c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007068:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800706c:	d028      	beq.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800706e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007070:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007074:	f200 8082 	bhi.w	800717c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800707e:	d017      	beq.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8007080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007082:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007086:	d879      	bhi.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708a:	2b00      	cmp	r3, #0
 800708c:	d004      	beq.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800708e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007090:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007094:	d004      	beq.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8007096:	e071      	b.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8007098:	f7fd fa42 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 800709c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800709e:	e070      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070a0:	f107 0314 	add.w	r3, r7, #20
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7fe fda7 	bl	8005bf8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070ae:	e068      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070b0:	f107 0308 	add.w	r3, r7, #8
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fe ff09 	bl	8005ecc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070be:	e060      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80070c0:	4b0c      	ldr	r3, [pc, #48]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80070c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d103      	bne.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 80070ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070d2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80070d4:	e055      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070da:	e052      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80070dc:	4b05      	ldr	r3, [pc, #20]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80070de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070ea:	d10b      	bne.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 80070ec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80070f0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80070f2:	e046      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 80070f4:	44020c00 	.word	0x44020c00
 80070f8:	03d09000 	.word	0x03d09000
 80070fc:	003d0900 	.word	0x003d0900
 8007100:	017d7840 	.word	0x017d7840
              frequency = 0;
 8007104:	2300      	movs	r3, #0
 8007106:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007108:	e03b      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800710a:	4bae      	ldr	r3, [pc, #696]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800710c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007110:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007114:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007116:	4bab      	ldr	r3, [pc, #684]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b02      	cmp	r3, #2
 8007120:	d10c      	bne.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8007122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007124:	2b00      	cmp	r3, #0
 8007126:	d109      	bne.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007128:	4ba6      	ldr	r3, [pc, #664]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	08db      	lsrs	r3, r3, #3
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	4aa5      	ldr	r2, [pc, #660]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8007134:	fa22 f303 	lsr.w	r3, r2, r3
 8007138:	637b      	str	r3, [r7, #52]	@ 0x34
 800713a:	e01e      	b.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800713c:	4ba1      	ldr	r3, [pc, #644]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007148:	d106      	bne.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 800714a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007150:	d102      	bne.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007152:	4b9e      	ldr	r3, [pc, #632]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8007154:	637b      	str	r3, [r7, #52]	@ 0x34
 8007156:	e010      	b.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007158:	4b9a      	ldr	r3, [pc, #616]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007160:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007164:	d106      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8007166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007168:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800716c:	d102      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800716e:	4b98      	ldr	r3, [pc, #608]	@ (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8007170:	637b      	str	r3, [r7, #52]	@ 0x34
 8007172:	e002      	b.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007174:	2300      	movs	r3, #0
 8007176:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007178:	e003      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 800717a:	e002      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007180:	bf00      	nop
          }
        }
        break;
 8007182:	e34e      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007184:	4b8f      	ldr	r3, [pc, #572]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007186:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800718a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800718e:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8007190:	4b8c      	ldr	r3, [pc, #560]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007198:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800719c:	d105      	bne.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 800719e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d102      	bne.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 80071a4:	4b8a      	ldr	r3, [pc, #552]	@ (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80071a6:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80071a8:	e33b      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80071aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071b0:	d107      	bne.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071b2:	f107 0320 	add.w	r3, r7, #32
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fe fbb4 	bl	8005924 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071c0:	e32f      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80071c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071c8:	d107      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071ca:	f107 0314 	add.w	r3, r7, #20
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fe fd12 	bl	8005bf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071d8:	e323      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071de:	e320      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80071e0:	4b78      	ldr	r3, [pc, #480]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80071e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071e6:	f003 0307 	and.w	r3, r3, #7
 80071ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80071ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	d860      	bhi.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 80071f2:	a201      	add	r2, pc, #4	@ (adr r2, 80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	0800720d 	.word	0x0800720d
 80071fc:	0800721d 	.word	0x0800721d
 8007200:	0800722d 	.word	0x0800722d
 8007204:	0800723d 	.word	0x0800723d
 8007208:	08007243 	.word	0x08007243
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800720c:	f107 0320 	add.w	r3, r7, #32
 8007210:	4618      	mov	r0, r3
 8007212:	f7fe fb87 	bl	8005924 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007218:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800721a:	e04e      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800721c:	f107 0314 	add.w	r3, r7, #20
 8007220:	4618      	mov	r0, r3
 8007222:	f7fe fce9 	bl	8005bf8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800722a:	e046      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800722c:	f107 0308 	add.w	r3, r7, #8
 8007230:	4618      	mov	r0, r3
 8007232:	f7fe fe4b 	bl	8005ecc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800723a:	e03e      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800723c:	4b65      	ldr	r3, [pc, #404]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 800723e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007240:	e03b      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007242:	4b60      	ldr	r3, [pc, #384]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007244:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007248:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800724c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800724e:	4b5d      	ldr	r3, [pc, #372]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0302 	and.w	r3, r3, #2
 8007256:	2b02      	cmp	r3, #2
 8007258:	d10c      	bne.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 800725a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800725c:	2b00      	cmp	r3, #0
 800725e:	d109      	bne.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007260:	4b58      	ldr	r3, [pc, #352]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	08db      	lsrs	r3, r3, #3
 8007266:	f003 0303 	and.w	r3, r3, #3
 800726a:	4a57      	ldr	r2, [pc, #348]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 800726c:	fa22 f303 	lsr.w	r3, r2, r3
 8007270:	637b      	str	r3, [r7, #52]	@ 0x34
 8007272:	e01e      	b.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007274:	4b53      	ldr	r3, [pc, #332]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800727c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007280:	d106      	bne.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 8007282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007288:	d102      	bne.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800728a:	4b50      	ldr	r3, [pc, #320]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 800728c:	637b      	str	r3, [r7, #52]	@ 0x34
 800728e:	e010      	b.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007290:	4b4c      	ldr	r3, [pc, #304]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007298:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800729c:	d106      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 800729e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072a4:	d102      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80072a6:	4b4a      	ldr	r3, [pc, #296]	@ (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80072a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072aa:	e002      	b.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80072b0:	e003      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80072b2:	e002      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 80072b4:	2300      	movs	r3, #0
 80072b6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80072b8:	bf00      	nop
          }
        }
        break;
 80072ba:	e2b2      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80072bc:	4b41      	ldr	r3, [pc, #260]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80072be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80072c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ca:	2b20      	cmp	r3, #32
 80072cc:	f200 80a4 	bhi.w	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 80072d0:	a201      	add	r2, pc, #4	@ (adr r2, 80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 80072d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d6:	bf00      	nop
 80072d8:	0800735d 	.word	0x0800735d
 80072dc:	08007419 	.word	0x08007419
 80072e0:	08007419 	.word	0x08007419
 80072e4:	08007419 	.word	0x08007419
 80072e8:	08007419 	.word	0x08007419
 80072ec:	08007419 	.word	0x08007419
 80072f0:	08007419 	.word	0x08007419
 80072f4:	08007419 	.word	0x08007419
 80072f8:	0800736d 	.word	0x0800736d
 80072fc:	08007419 	.word	0x08007419
 8007300:	08007419 	.word	0x08007419
 8007304:	08007419 	.word	0x08007419
 8007308:	08007419 	.word	0x08007419
 800730c:	08007419 	.word	0x08007419
 8007310:	08007419 	.word	0x08007419
 8007314:	08007419 	.word	0x08007419
 8007318:	0800737d 	.word	0x0800737d
 800731c:	08007419 	.word	0x08007419
 8007320:	08007419 	.word	0x08007419
 8007324:	08007419 	.word	0x08007419
 8007328:	08007419 	.word	0x08007419
 800732c:	08007419 	.word	0x08007419
 8007330:	08007419 	.word	0x08007419
 8007334:	08007419 	.word	0x08007419
 8007338:	0800738d 	.word	0x0800738d
 800733c:	08007419 	.word	0x08007419
 8007340:	08007419 	.word	0x08007419
 8007344:	08007419 	.word	0x08007419
 8007348:	08007419 	.word	0x08007419
 800734c:	08007419 	.word	0x08007419
 8007350:	08007419 	.word	0x08007419
 8007354:	08007419 	.word	0x08007419
 8007358:	08007393 	.word	0x08007393
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800735c:	f107 0320 	add.w	r3, r7, #32
 8007360:	4618      	mov	r0, r3
 8007362:	f7fe fadf 	bl	8005924 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007368:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800736a:	e058      	b.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800736c:	f107 0314 	add.w	r3, r7, #20
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe fc41 	bl	8005bf8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800737a:	e050      	b.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800737c:	f107 0308 	add.w	r3, r7, #8
 8007380:	4618      	mov	r0, r3
 8007382:	f7fe fda3 	bl	8005ecc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800738a:	e048      	b.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800738c:	4b11      	ldr	r3, [pc, #68]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 800738e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007390:	e045      	b.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007392:	4b0c      	ldr	r3, [pc, #48]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007398:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800739c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800739e:	4b09      	ldr	r3, [pc, #36]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0302 	and.w	r3, r3, #2
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d116      	bne.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 80073aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d113      	bne.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073b0:	4b04      	ldr	r3, [pc, #16]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	08db      	lsrs	r3, r3, #3
 80073b6:	f003 0303 	and.w	r3, r3, #3
 80073ba:	4a03      	ldr	r2, [pc, #12]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80073bc:	fa22 f303 	lsr.w	r3, r2, r3
 80073c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c2:	e028      	b.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 80073c4:	44020c00 	.word	0x44020c00
 80073c8:	03d09000 	.word	0x03d09000
 80073cc:	003d0900 	.word	0x003d0900
 80073d0:	017d7840 	.word	0x017d7840
 80073d4:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073d8:	4b95      	ldr	r3, [pc, #596]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073e4:	d106      	bne.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 80073e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ec:	d102      	bne.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80073ee:	4b91      	ldr	r3, [pc, #580]	@ (8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80073f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073f2:	e010      	b.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073f4:	4b8e      	ldr	r3, [pc, #568]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007400:	d106      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8007402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007404:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007408:	d102      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800740a:	4b8b      	ldr	r3, [pc, #556]	@ (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 800740c:	637b      	str	r3, [r7, #52]	@ 0x34
 800740e:	e002      	b.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007410:	2300      	movs	r3, #0
 8007412:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007414:	e003      	b.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8007416:	e002      	b.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8007418:	2300      	movs	r3, #0
 800741a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800741c:	bf00      	nop
          }
        }
        break;
 800741e:	e200      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007420:	4b83      	ldr	r3, [pc, #524]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007426:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800742a:	633b      	str	r3, [r7, #48]	@ 0x30
 800742c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007432:	d031      	beq.n	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8007434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800743a:	d866      	bhi.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 800743c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007440:	d027      	beq.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 8007442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007444:	2bc0      	cmp	r3, #192	@ 0xc0
 8007446:	d860      	bhi.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8007448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744a:	2b80      	cmp	r3, #128	@ 0x80
 800744c:	d019      	beq.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 800744e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007450:	2b80      	cmp	r3, #128	@ 0x80
 8007452:	d85a      	bhi.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8007454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 800745a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745c:	2b40      	cmp	r3, #64	@ 0x40
 800745e:	d008      	beq.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8007460:	e053      	b.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007462:	f107 0320 	add.w	r3, r7, #32
 8007466:	4618      	mov	r0, r3
 8007468:	f7fe fa5c 	bl	8005924 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800746c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007470:	e04e      	b.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007472:	f107 0314 	add.w	r3, r7, #20
 8007476:	4618      	mov	r0, r3
 8007478:	f7fe fbbe 	bl	8005bf8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007480:	e046      	b.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007482:	f107 0308 	add.w	r3, r7, #8
 8007486:	4618      	mov	r0, r3
 8007488:	f7fe fd20 	bl	8005ecc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007490:	e03e      	b.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007492:	4b6a      	ldr	r3, [pc, #424]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 8007494:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007496:	e03b      	b.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007498:	4b65      	ldr	r3, [pc, #404]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800749a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800749e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80074a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074a4:	4b62      	ldr	r3, [pc, #392]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d10c      	bne.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80074b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d109      	bne.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074b6:	4b5e      	ldr	r3, [pc, #376]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	08db      	lsrs	r3, r3, #3
 80074bc:	f003 0303 	and.w	r3, r3, #3
 80074c0:	4a5f      	ldr	r2, [pc, #380]	@ (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 80074c2:	fa22 f303 	lsr.w	r3, r2, r3
 80074c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80074c8:	e01e      	b.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074ca:	4b59      	ldr	r3, [pc, #356]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074d6:	d106      	bne.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80074d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074de:	d102      	bne.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80074e0:	4b54      	ldr	r3, [pc, #336]	@ (8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80074e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074e4:	e010      	b.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074e6:	4b52      	ldr	r3, [pc, #328]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074f2:	d106      	bne.n	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 80074f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074fa:	d102      	bne.n	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80074fc:	4b4e      	ldr	r3, [pc, #312]	@ (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80074fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007500:	e002      	b.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007502:	2300      	movs	r3, #0
 8007504:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007506:	e003      	b.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8007508:	e002      	b.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 800750a:	2300      	movs	r3, #0
 800750c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800750e:	bf00      	nop
          }
        }
        break;
 8007510:	e187      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8007512:	4b47      	ldr	r3, [pc, #284]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007518:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800751c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800751e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007520:	2b00      	cmp	r3, #0
 8007522:	d103      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007524:	f7fd f812 	bl	800454c <HAL_RCC_GetPCLK2Freq>
 8007528:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800752a:	e17a      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800752c:	4b40      	ldr	r3, [pc, #256]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007534:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007538:	d10b      	bne.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800753a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007540:	d107      	bne.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007542:	f107 0314 	add.w	r3, r7, #20
 8007546:	4618      	mov	r0, r3
 8007548:	f7fe fb56 	bl	8005bf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007550:	e045      	b.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007552:	4b37      	ldr	r3, [pc, #220]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800755a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800755e:	d10b      	bne.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8007560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007566:	d107      	bne.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007568:	f107 0308 	add.w	r3, r7, #8
 800756c:	4618      	mov	r0, r3
 800756e:	f7fe fcad 	bl	8005ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	637b      	str	r3, [r7, #52]	@ 0x34
 8007576:	e032      	b.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007578:	4b2d      	ldr	r3, [pc, #180]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b02      	cmp	r3, #2
 8007582:	d10d      	bne.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8007584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007586:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800758a:	d109      	bne.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800758c:	4b28      	ldr	r3, [pc, #160]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	08db      	lsrs	r3, r3, #3
 8007592:	f003 0303 	and.w	r3, r3, #3
 8007596:	4a2a      	ldr	r2, [pc, #168]	@ (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8007598:	fa22 f303 	lsr.w	r3, r2, r3
 800759c:	637b      	str	r3, [r7, #52]	@ 0x34
 800759e:	e01e      	b.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80075a0:	4b23      	ldr	r3, [pc, #140]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075ac:	d106      	bne.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 80075ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075b4:	d102      	bne.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 80075b6:	4b1f      	ldr	r3, [pc, #124]	@ (8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80075b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80075ba:	e010      	b.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80075bc:	4b1c      	ldr	r3, [pc, #112]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075c8:	d106      	bne.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 80075ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075cc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80075d0:	d102      	bne.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 80075d2:	4b19      	ldr	r3, [pc, #100]	@ (8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80075d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80075d6:	e002      	b.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075dc:	e121      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80075de:	e120      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80075e0:	4b13      	ldr	r3, [pc, #76]	@ (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80075e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80075e6:	f003 0303 	and.w	r3, r3, #3
 80075ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80075ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	d861      	bhi.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 80075f2:	a201      	add	r2, pc, #4	@ (adr r2, 80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 80075f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f8:	08007609 	.word	0x08007609
 80075fc:	08007611 	.word	0x08007611
 8007600:	08007621 	.word	0x08007621
 8007604:	08007645 	.word	0x08007645

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007608:	f7fc ff6e 	bl	80044e8 <HAL_RCC_GetHCLKFreq>
 800760c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800760e:	e055      	b.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007610:	f107 0320 	add.w	r3, r7, #32
 8007614:	4618      	mov	r0, r3
 8007616:	f7fe f985 	bl	8005924 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800761a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800761e:	e04d      	b.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007620:	f107 0314 	add.w	r3, r7, #20
 8007624:	4618      	mov	r0, r3
 8007626:	f7fe fae7 	bl	8005bf8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800762e:	e045      	b.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007630:	44020c00 	.word	0x44020c00
 8007634:	003d0900 	.word	0x003d0900
 8007638:	017d7840 	.word	0x017d7840
 800763c:	00bb8000 	.word	0x00bb8000
 8007640:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007644:	4b79      	ldr	r3, [pc, #484]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007646:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800764a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800764e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007650:	4b76      	ldr	r3, [pc, #472]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b02      	cmp	r3, #2
 800765a:	d10c      	bne.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 800765c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800765e:	2b00      	cmp	r3, #0
 8007660:	d109      	bne.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007662:	4b72      	ldr	r3, [pc, #456]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	08db      	lsrs	r3, r3, #3
 8007668:	f003 0303 	and.w	r3, r3, #3
 800766c:	4a70      	ldr	r2, [pc, #448]	@ (8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 800766e:	fa22 f303 	lsr.w	r3, r2, r3
 8007672:	637b      	str	r3, [r7, #52]	@ 0x34
 8007674:	e01e      	b.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007676:	4b6d      	ldr	r3, [pc, #436]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800767e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007682:	d106      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8007684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800768a:	d102      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800768c:	4b69      	ldr	r3, [pc, #420]	@ (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 800768e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007690:	e010      	b.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007692:	4b66      	ldr	r3, [pc, #408]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800769a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800769e:	d106      	bne.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 80076a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076a6:	d102      	bne.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80076a8:	4b63      	ldr	r3, [pc, #396]	@ (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 80076aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ac:	e002      	b.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80076b2:	e003      	b.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80076b4:	e002      	b.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 80076b6:	2300      	movs	r3, #0
 80076b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80076ba:	bf00      	nop
          }
        }
        break;
 80076bc:	e0b1      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80076be:	4b5b      	ldr	r3, [pc, #364]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80076c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076c4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80076c8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80076ca:	4b58      	ldr	r3, [pc, #352]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80076cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d106      	bne.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 80076d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d103      	bne.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 80076de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e4:	e01f      	b.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80076e6:	4b51      	ldr	r3, [pc, #324]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80076e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076f4:	d106      	bne.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 80076f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f8:	2b40      	cmp	r3, #64	@ 0x40
 80076fa:	d103      	bne.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 80076fc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007700:	637b      	str	r3, [r7, #52]	@ 0x34
 8007702:	e010      	b.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007704:	4b49      	ldr	r3, [pc, #292]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800770c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007710:	d106      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 8007712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007714:	2b80      	cmp	r3, #128	@ 0x80
 8007716:	d103      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8007718:	f248 0312 	movw	r3, #32786	@ 0x8012
 800771c:	637b      	str	r3, [r7, #52]	@ 0x34
 800771e:	e002      	b.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007724:	e07d      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007726:	e07c      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007728:	4b40      	ldr	r3, [pc, #256]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800772a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800772e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007732:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007734:	4b3d      	ldr	r3, [pc, #244]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800773c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007740:	d105      	bne.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	2b00      	cmp	r3, #0
 8007746:	d102      	bne.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8007748:	4b3c      	ldr	r3, [pc, #240]	@ (800783c <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 800774a:	637b      	str	r3, [r7, #52]	@ 0x34
 800774c:	e031      	b.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800774e:	4b37      	ldr	r3, [pc, #220]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007756:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800775a:	d10a      	bne.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 800775c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775e:	2b10      	cmp	r3, #16
 8007760:	d107      	bne.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007762:	f107 0320 	add.w	r3, r7, #32
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe f8dc 	bl	8005924 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800776c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007770:	e01f      	b.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007772:	4b2e      	ldr	r3, [pc, #184]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b02      	cmp	r3, #2
 800777e:	d106      	bne.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8007780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007782:	2b20      	cmp	r3, #32
 8007784:	d103      	bne.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 8007786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800778a:	637b      	str	r3, [r7, #52]	@ 0x34
 800778c:	e011      	b.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800778e:	4b27      	ldr	r3, [pc, #156]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007794:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007798:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800779c:	d106      	bne.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 800779e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a0:	2b30      	cmp	r3, #48	@ 0x30
 80077a2:	d103      	bne.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 80077a4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80077a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077aa:	e002      	b.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80077b0:	e037      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80077b2:	e036      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80077b4:	4b1d      	ldr	r3, [pc, #116]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80077b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077ba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80077be:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80077c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c2:	2b10      	cmp	r3, #16
 80077c4:	d107      	bne.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077c6:	f107 0320 	add.w	r3, r7, #32
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fe f8aa 	bl	8005924 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80077d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80077d4:	e025      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80077d6:	4b15      	ldr	r3, [pc, #84]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077e2:	d10a      	bne.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 80077e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e6:	2b20      	cmp	r3, #32
 80077e8:	d107      	bne.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077ea:	f107 0308 	add.w	r3, r7, #8
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe fb6c 	bl	8005ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80077f8:	e00f      	b.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80077fa:	4b0c      	ldr	r3, [pc, #48]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007806:	d105      	bne.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8007808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780a:	2b30      	cmp	r3, #48	@ 0x30
 800780c:	d102      	bne.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 800780e:	4b0b      	ldr	r3, [pc, #44]	@ (800783c <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8007810:	637b      	str	r3, [r7, #52]	@ 0x34
 8007812:	e002      	b.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007814:	2300      	movs	r3, #0
 8007816:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8007818:	e003      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800781a:	e002      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 800781c:	2300      	movs	r3, #0
 800781e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007820:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 8007822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007824:	4618      	mov	r0, r3
 8007826:	373c      	adds	r7, #60	@ 0x3c
 8007828:	46bd      	mov	sp, r7
 800782a:	bd90      	pop	{r4, r7, pc}
 800782c:	44020c00 	.word	0x44020c00
 8007830:	03d09000 	.word	0x03d09000
 8007834:	003d0900 	.word	0x003d0900
 8007838:	017d7840 	.word	0x017d7840
 800783c:	02dc6c00 	.word	0x02dc6c00

08007840 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007848:	4b48      	ldr	r3, [pc, #288]	@ (800796c <RCCEx_PLL2_Config+0x12c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a47      	ldr	r2, [pc, #284]	@ (800796c <RCCEx_PLL2_Config+0x12c>)
 800784e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007852:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007854:	f7fa f872 	bl	800193c <HAL_GetTick>
 8007858:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800785a:	e008      	b.n	800786e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800785c:	f7fa f86e 	bl	800193c <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	2b02      	cmp	r3, #2
 8007868:	d901      	bls.n	800786e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e07a      	b.n	8007964 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800786e:	4b3f      	ldr	r3, [pc, #252]	@ (800796c <RCCEx_PLL2_Config+0x12c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1f0      	bne.n	800785c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800787a:	4b3c      	ldr	r3, [pc, #240]	@ (800796c <RCCEx_PLL2_Config+0x12c>)
 800787c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800787e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007882:	f023 0303 	bic.w	r3, r3, #3
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	6811      	ldr	r1, [r2, #0]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	6852      	ldr	r2, [r2, #4]
 800788e:	0212      	lsls	r2, r2, #8
 8007890:	430a      	orrs	r2, r1
 8007892:	4936      	ldr	r1, [pc, #216]	@ (800796c <RCCEx_PLL2_Config+0x12c>)
 8007894:	4313      	orrs	r3, r2
 8007896:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	3b01      	subs	r3, #1
 800789e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	3b01      	subs	r3, #1
 80078a8:	025b      	lsls	r3, r3, #9
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	431a      	orrs	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	041b      	lsls	r3, r3, #16
 80078b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80078ba:	431a      	orrs	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	3b01      	subs	r3, #1
 80078c2:	061b      	lsls	r3, r3, #24
 80078c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80078c8:	4928      	ldr	r1, [pc, #160]	@ (800796c <RCCEx_PLL2_Config+0x12c>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80078ce:	4b27      	ldr	r3, [pc, #156]	@ (800796c <RCCEx_PLL2_Config+0x12c>)
 80078d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d2:	f023 020c 	bic.w	r2, r3, #12
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	4924      	ldr	r1, [pc, #144]	@ (800796c <RCCEx_PLL2_Config+0x12c>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80078e0:	4b22      	ldr	r3, [pc, #136]	@ (800796c <RCCEx_PLL2_Config+0x12c>)
 80078e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e4:	f023 0220 	bic.w	r2, r3, #32
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	69db      	ldr	r3, [r3, #28]
 80078ec:	491f      	ldr	r1, [pc, #124]	@ (800796c <RCCEx_PLL2_Config+0x12c>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80078f2:	4b1e      	ldr	r3, [pc, #120]	@ (800796c <RCCEx_PLL2_Config+0x12c>)
 80078f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fa:	491c      	ldr	r1, [pc, #112]	@ (800796c <RCCEx_PLL2_Config+0x12c>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007900:	4b1a      	ldr	r3, [pc, #104]	@ (800796c <RCCEx_PLL2_Config+0x12c>)
 8007902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007904:	4a19      	ldr	r2, [pc, #100]	@ (800796c <RCCEx_PLL2_Config+0x12c>)
 8007906:	f023 0310 	bic.w	r3, r3, #16
 800790a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800790c:	4b17      	ldr	r3, [pc, #92]	@ (800796c <RCCEx_PLL2_Config+0x12c>)
 800790e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007910:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007914:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	6a12      	ldr	r2, [r2, #32]
 800791c:	00d2      	lsls	r2, r2, #3
 800791e:	4913      	ldr	r1, [pc, #76]	@ (800796c <RCCEx_PLL2_Config+0x12c>)
 8007920:	4313      	orrs	r3, r2
 8007922:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007924:	4b11      	ldr	r3, [pc, #68]	@ (800796c <RCCEx_PLL2_Config+0x12c>)
 8007926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007928:	4a10      	ldr	r2, [pc, #64]	@ (800796c <RCCEx_PLL2_Config+0x12c>)
 800792a:	f043 0310 	orr.w	r3, r3, #16
 800792e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007930:	4b0e      	ldr	r3, [pc, #56]	@ (800796c <RCCEx_PLL2_Config+0x12c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a0d      	ldr	r2, [pc, #52]	@ (800796c <RCCEx_PLL2_Config+0x12c>)
 8007936:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800793a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800793c:	f7f9 fffe 	bl	800193c <HAL_GetTick>
 8007940:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007942:	e008      	b.n	8007956 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007944:	f7f9 fffa 	bl	800193c <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b02      	cmp	r3, #2
 8007950:	d901      	bls.n	8007956 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e006      	b.n	8007964 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007956:	4b05      	ldr	r3, [pc, #20]	@ (800796c <RCCEx_PLL2_Config+0x12c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d0f0      	beq.n	8007944 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8007962:	2300      	movs	r3, #0

}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	44020c00 	.word	0x44020c00

08007970 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8007978:	4b48      	ldr	r3, [pc, #288]	@ (8007a9c <RCCEx_PLL3_Config+0x12c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a47      	ldr	r2, [pc, #284]	@ (8007a9c <RCCEx_PLL3_Config+0x12c>)
 800797e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007982:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007984:	f7f9 ffda 	bl	800193c <HAL_GetTick>
 8007988:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800798a:	e008      	b.n	800799e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800798c:	f7f9 ffd6 	bl	800193c <HAL_GetTick>
 8007990:	4602      	mov	r2, r0
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	2b02      	cmp	r3, #2
 8007998:	d901      	bls.n	800799e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e07a      	b.n	8007a94 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800799e:	4b3f      	ldr	r3, [pc, #252]	@ (8007a9c <RCCEx_PLL3_Config+0x12c>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1f0      	bne.n	800798c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80079aa:	4b3c      	ldr	r3, [pc, #240]	@ (8007a9c <RCCEx_PLL3_Config+0x12c>)
 80079ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80079b2:	f023 0303 	bic.w	r3, r3, #3
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	6811      	ldr	r1, [r2, #0]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	6852      	ldr	r2, [r2, #4]
 80079be:	0212      	lsls	r2, r2, #8
 80079c0:	430a      	orrs	r2, r1
 80079c2:	4936      	ldr	r1, [pc, #216]	@ (8007a9c <RCCEx_PLL3_Config+0x12c>)
 80079c4:	4313      	orrs	r3, r2
 80079c6:	630b      	str	r3, [r1, #48]	@ 0x30
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	025b      	lsls	r3, r3, #9
 80079da:	b29b      	uxth	r3, r3
 80079dc:	431a      	orrs	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	3b01      	subs	r3, #1
 80079e4:	041b      	lsls	r3, r3, #16
 80079e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80079ea:	431a      	orrs	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	3b01      	subs	r3, #1
 80079f2:	061b      	lsls	r3, r3, #24
 80079f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80079f8:	4928      	ldr	r1, [pc, #160]	@ (8007a9c <RCCEx_PLL3_Config+0x12c>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80079fe:	4b27      	ldr	r3, [pc, #156]	@ (8007a9c <RCCEx_PLL3_Config+0x12c>)
 8007a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a02:	f023 020c 	bic.w	r2, r3, #12
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	4924      	ldr	r1, [pc, #144]	@ (8007a9c <RCCEx_PLL3_Config+0x12c>)
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8007a10:	4b22      	ldr	r3, [pc, #136]	@ (8007a9c <RCCEx_PLL3_Config+0x12c>)
 8007a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a14:	f023 0220 	bic.w	r2, r3, #32
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	491f      	ldr	r1, [pc, #124]	@ (8007a9c <RCCEx_PLL3_Config+0x12c>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007a22:	4b1e      	ldr	r3, [pc, #120]	@ (8007a9c <RCCEx_PLL3_Config+0x12c>)
 8007a24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2a:	491c      	ldr	r1, [pc, #112]	@ (8007a9c <RCCEx_PLL3_Config+0x12c>)
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8007a30:	4b1a      	ldr	r3, [pc, #104]	@ (8007a9c <RCCEx_PLL3_Config+0x12c>)
 8007a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a34:	4a19      	ldr	r2, [pc, #100]	@ (8007a9c <RCCEx_PLL3_Config+0x12c>)
 8007a36:	f023 0310 	bic.w	r3, r3, #16
 8007a3a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8007a3c:	4b17      	ldr	r3, [pc, #92]	@ (8007a9c <RCCEx_PLL3_Config+0x12c>)
 8007a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a40:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a44:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	6a12      	ldr	r2, [r2, #32]
 8007a4c:	00d2      	lsls	r2, r2, #3
 8007a4e:	4913      	ldr	r1, [pc, #76]	@ (8007a9c <RCCEx_PLL3_Config+0x12c>)
 8007a50:	4313      	orrs	r3, r2
 8007a52:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8007a54:	4b11      	ldr	r3, [pc, #68]	@ (8007a9c <RCCEx_PLL3_Config+0x12c>)
 8007a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a58:	4a10      	ldr	r2, [pc, #64]	@ (8007a9c <RCCEx_PLL3_Config+0x12c>)
 8007a5a:	f043 0310 	orr.w	r3, r3, #16
 8007a5e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8007a60:	4b0e      	ldr	r3, [pc, #56]	@ (8007a9c <RCCEx_PLL3_Config+0x12c>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a0d      	ldr	r2, [pc, #52]	@ (8007a9c <RCCEx_PLL3_Config+0x12c>)
 8007a66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a6a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a6c:	f7f9 ff66 	bl	800193c <HAL_GetTick>
 8007a70:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a72:	e008      	b.n	8007a86 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a74:	f7f9 ff62 	bl	800193c <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d901      	bls.n	8007a86 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e006      	b.n	8007a94 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a86:	4b05      	ldr	r3, [pc, #20]	@ (8007a9c <RCCEx_PLL3_Config+0x12c>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d0f0      	beq.n	8007a74 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	44020c00 	.word	0x44020c00

08007aa0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e10d      	b.n	8007cce <HAL_SPI_Init+0x22e>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a88      	ldr	r2, [pc, #544]	@ (8007cd8 <HAL_SPI_Init+0x238>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d004      	beq.n	8007ac6 <HAL_SPI_Init+0x26>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a86      	ldr	r2, [pc, #536]	@ (8007cdc <HAL_SPI_Init+0x23c>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	e000      	b.n	8007ac8 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007ac6:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a81      	ldr	r2, [pc, #516]	@ (8007cd8 <HAL_SPI_Init+0x238>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d004      	beq.n	8007ae2 <HAL_SPI_Init+0x42>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a7f      	ldr	r2, [pc, #508]	@ (8007cdc <HAL_SPI_Init+0x23c>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d105      	bne.n	8007aee <HAL_SPI_Init+0x4e>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	2b0f      	cmp	r3, #15
 8007ae8:	d901      	bls.n	8007aee <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e0ef      	b.n	8007cce <HAL_SPI_Init+0x22e>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f902 	bl	8007cf8 <SPI_GetPacketSize>
 8007af4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a77      	ldr	r2, [pc, #476]	@ (8007cd8 <HAL_SPI_Init+0x238>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d004      	beq.n	8007b0a <HAL_SPI_Init+0x6a>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a75      	ldr	r2, [pc, #468]	@ (8007cdc <HAL_SPI_Init+0x23c>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d102      	bne.n	8007b10 <HAL_SPI_Init+0x70>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b08      	cmp	r3, #8
 8007b0e:	d820      	bhi.n	8007b52 <HAL_SPI_Init+0xb2>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007b14:	4a72      	ldr	r2, [pc, #456]	@ (8007ce0 <HAL_SPI_Init+0x240>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d018      	beq.n	8007b4c <HAL_SPI_Init+0xac>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a71      	ldr	r2, [pc, #452]	@ (8007ce4 <HAL_SPI_Init+0x244>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d013      	beq.n	8007b4c <HAL_SPI_Init+0xac>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a6f      	ldr	r2, [pc, #444]	@ (8007ce8 <HAL_SPI_Init+0x248>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d00e      	beq.n	8007b4c <HAL_SPI_Init+0xac>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a6e      	ldr	r2, [pc, #440]	@ (8007cec <HAL_SPI_Init+0x24c>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d009      	beq.n	8007b4c <HAL_SPI_Init+0xac>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a6c      	ldr	r2, [pc, #432]	@ (8007cf0 <HAL_SPI_Init+0x250>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d004      	beq.n	8007b4c <HAL_SPI_Init+0xac>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a6b      	ldr	r2, [pc, #428]	@ (8007cf4 <HAL_SPI_Init+0x254>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d104      	bne.n	8007b56 <HAL_SPI_Init+0xb6>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2b10      	cmp	r3, #16
 8007b50:	d901      	bls.n	8007b56 <HAL_SPI_Init+0xb6>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e0bb      	b.n	8007cce <HAL_SPI_Init+0x22e>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d106      	bne.n	8007b70 <HAL_SPI_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7f9 fb30 	bl	80011d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 0201 	bic.w	r2, r2, #1
 8007b86:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007b92:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b9c:	d119      	bne.n	8007bd2 <HAL_SPI_Init+0x132>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ba6:	d103      	bne.n	8007bb0 <HAL_SPI_Init+0x110>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d008      	beq.n	8007bc2 <HAL_SPI_Init+0x122>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10c      	bne.n	8007bd2 <HAL_SPI_Init+0x132>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007bbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bc0:	d107      	bne.n	8007bd2 <HAL_SPI_Init+0x132>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007bd0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00f      	beq.n	8007bfe <HAL_SPI_Init+0x15e>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	2b06      	cmp	r3, #6
 8007be4:	d90b      	bls.n	8007bfe <HAL_SPI_Init+0x15e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	e007      	b.n	8007c0e <HAL_SPI_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c0c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	69da      	ldr	r2, [r3, #28]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c16:	431a      	orrs	r2, r3
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c20:	ea42 0103 	orr.w	r1, r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68da      	ldr	r2, [r3, #12]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c38:	431a      	orrs	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	431a      	orrs	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	695b      	ldr	r3, [r3, #20]
 8007c50:	431a      	orrs	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a1b      	ldr	r3, [r3, #32]
 8007c56:	431a      	orrs	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	431a      	orrs	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c62:	431a      	orrs	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c6e:	431a      	orrs	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c74:	431a      	orrs	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c7a:	ea42 0103 	orr.w	r1, r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f022 0201 	bic.w	r2, r2, #1
 8007c98:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <HAL_SPI_Init+0x21c>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	40014c00 	.word	0x40014c00
 8007cdc:	50014c00 	.word	0x50014c00
 8007ce0:	40013000 	.word	0x40013000
 8007ce4:	50013000 	.word	0x50013000
 8007ce8:	40003800 	.word	0x40003800
 8007cec:	50003800 	.word	0x50003800
 8007cf0:	40003c00 	.word	0x40003c00
 8007cf4:	50003c00 	.word	0x50003c00

08007cf8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d04:	095b      	lsrs	r3, r3, #5
 8007d06:	3301      	adds	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	3307      	adds	r3, #7
 8007d16:	08db      	lsrs	r3, r3, #3
 8007d18:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b082      	sub	sp, #8
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e042      	b.n	8007dc6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d106      	bne.n	8007d58 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7f9 fb52 	bl	80013fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2224      	movs	r2, #36	@ 0x24
 8007d5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 0201 	bic.w	r2, r2, #1
 8007d6e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d002      	beq.n	8007d7e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f9d7 	bl	800812c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f826 	bl	8007dd0 <UART_SetConfig>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d101      	bne.n	8007d8e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e01b      	b.n	8007dc6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	685a      	ldr	r2, [r3, #4]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689a      	ldr	r2, [r3, #8]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007dac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f042 0201 	orr.w	r2, r2, #1
 8007dbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fa56 	bl	8008270 <UART_CheckIdleState>
 8007dc4:	4603      	mov	r3, r0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
	...

08007dd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007dd4:	b094      	sub	sp, #80	@ 0x50
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	4b83      	ldr	r3, [pc, #524]	@ (8007ff4 <UART_SetConfig+0x224>)
 8007de6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dea:	689a      	ldr	r2, [r3, #8]
 8007dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	431a      	orrs	r2, r3
 8007df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	431a      	orrs	r2, r3
 8007df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dfa:	69db      	ldr	r3, [r3, #28]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	497c      	ldr	r1, [pc, #496]	@ (8007ff8 <UART_SetConfig+0x228>)
 8007e08:	4019      	ands	r1, r3
 8007e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e10:	430b      	orrs	r3, r1
 8007e12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e20:	68d9      	ldr	r1, [r3, #12]
 8007e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	ea40 0301 	orr.w	r3, r0, r1
 8007e2a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	4b6f      	ldr	r3, [pc, #444]	@ (8007ff4 <UART_SetConfig+0x224>)
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d009      	beq.n	8007e50 <UART_SetConfig+0x80>
 8007e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	4b6e      	ldr	r3, [pc, #440]	@ (8007ffc <UART_SetConfig+0x22c>)
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d004      	beq.n	8007e50 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e48:	6a1a      	ldr	r2, [r3, #32]
 8007e4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8007e5a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8007e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e64:	430b      	orrs	r3, r1
 8007e66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6e:	f023 000f 	bic.w	r0, r3, #15
 8007e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e74:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	ea40 0301 	orr.w	r3, r0, r1
 8007e7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	4b5e      	ldr	r3, [pc, #376]	@ (8008000 <UART_SetConfig+0x230>)
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d102      	bne.n	8007e90 <UART_SetConfig+0xc0>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e8e:	e032      	b.n	8007ef6 <UART_SetConfig+0x126>
 8007e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	4b5b      	ldr	r3, [pc, #364]	@ (8008004 <UART_SetConfig+0x234>)
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d102      	bne.n	8007ea0 <UART_SetConfig+0xd0>
 8007e9a:	2302      	movs	r3, #2
 8007e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e9e:	e02a      	b.n	8007ef6 <UART_SetConfig+0x126>
 8007ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	4b58      	ldr	r3, [pc, #352]	@ (8008008 <UART_SetConfig+0x238>)
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d102      	bne.n	8007eb0 <UART_SetConfig+0xe0>
 8007eaa:	2304      	movs	r3, #4
 8007eac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eae:	e022      	b.n	8007ef6 <UART_SetConfig+0x126>
 8007eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	4b55      	ldr	r3, [pc, #340]	@ (800800c <UART_SetConfig+0x23c>)
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d102      	bne.n	8007ec0 <UART_SetConfig+0xf0>
 8007eba:	2308      	movs	r3, #8
 8007ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ebe:	e01a      	b.n	8007ef6 <UART_SetConfig+0x126>
 8007ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	4b52      	ldr	r3, [pc, #328]	@ (8008010 <UART_SetConfig+0x240>)
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d102      	bne.n	8007ed0 <UART_SetConfig+0x100>
 8007eca:	2310      	movs	r3, #16
 8007ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ece:	e012      	b.n	8007ef6 <UART_SetConfig+0x126>
 8007ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	4b4f      	ldr	r3, [pc, #316]	@ (8008014 <UART_SetConfig+0x244>)
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d102      	bne.n	8007ee0 <UART_SetConfig+0x110>
 8007eda:	2320      	movs	r3, #32
 8007edc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ede:	e00a      	b.n	8007ef6 <UART_SetConfig+0x126>
 8007ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	4b43      	ldr	r3, [pc, #268]	@ (8007ff4 <UART_SetConfig+0x224>)
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d103      	bne.n	8007ef2 <UART_SetConfig+0x122>
 8007eea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007eee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ef0:	e001      	b.n	8007ef6 <UART_SetConfig+0x126>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	4b3e      	ldr	r3, [pc, #248]	@ (8007ff4 <UART_SetConfig+0x224>)
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d005      	beq.n	8007f0c <UART_SetConfig+0x13c>
 8007f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	4b3d      	ldr	r3, [pc, #244]	@ (8007ffc <UART_SetConfig+0x22c>)
 8007f06:	429a      	cmp	r2, r3
 8007f08:	f040 8088 	bne.w	800801c <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007f0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f0e:	2200      	movs	r2, #0
 8007f10:	623b      	str	r3, [r7, #32]
 8007f12:	627a      	str	r2, [r7, #36]	@ 0x24
 8007f14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007f18:	f7fe f942 	bl	80061a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f1c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 80eb 	beq.w	80080fc <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f2a:	4a3b      	ldr	r2, [pc, #236]	@ (8008018 <UART_SetConfig+0x248>)
 8007f2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f30:	461a      	mov	r2, r3
 8007f32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f38:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f3c:	685a      	ldr	r2, [r3, #4]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	005b      	lsls	r3, r3, #1
 8007f42:	4413      	add	r3, r2
 8007f44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d305      	bcc.n	8007f56 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d903      	bls.n	8007f5e <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007f5c:	e048      	b.n	8007ff0 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f60:	2200      	movs	r2, #0
 8007f62:	61bb      	str	r3, [r7, #24]
 8007f64:	61fa      	str	r2, [r7, #28]
 8007f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f6a:	4a2b      	ldr	r2, [pc, #172]	@ (8008018 <UART_SetConfig+0x248>)
 8007f6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	2200      	movs	r2, #0
 8007f74:	613b      	str	r3, [r7, #16]
 8007f76:	617a      	str	r2, [r7, #20]
 8007f78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007f7c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007f80:	f7f8 f988 	bl	8000294 <__aeabi_uldivmod>
 8007f84:	4602      	mov	r2, r0
 8007f86:	460b      	mov	r3, r1
 8007f88:	4610      	mov	r0, r2
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	f04f 0200 	mov.w	r2, #0
 8007f90:	f04f 0300 	mov.w	r3, #0
 8007f94:	020b      	lsls	r3, r1, #8
 8007f96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f9a:	0202      	lsls	r2, r0, #8
 8007f9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f9e:	6849      	ldr	r1, [r1, #4]
 8007fa0:	0849      	lsrs	r1, r1, #1
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	4605      	mov	r5, r0
 8007fa8:	eb12 0804 	adds.w	r8, r2, r4
 8007fac:	eb43 0905 	adc.w	r9, r3, r5
 8007fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	60bb      	str	r3, [r7, #8]
 8007fb8:	60fa      	str	r2, [r7, #12]
 8007fba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fbe:	4640      	mov	r0, r8
 8007fc0:	4649      	mov	r1, r9
 8007fc2:	f7f8 f967 	bl	8000294 <__aeabi_uldivmod>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4613      	mov	r3, r2
 8007fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fd4:	d308      	bcc.n	8007fe8 <UART_SetConfig+0x218>
 8007fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fdc:	d204      	bcs.n	8007fe8 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8007fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007fe4:	60da      	str	r2, [r3, #12]
 8007fe6:	e003      	b.n	8007ff0 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8007fee:	e085      	b.n	80080fc <UART_SetConfig+0x32c>
 8007ff0:	e084      	b.n	80080fc <UART_SetConfig+0x32c>
 8007ff2:	bf00      	nop
 8007ff4:	44002400 	.word	0x44002400
 8007ff8:	cfff69f3 	.word	0xcfff69f3
 8007ffc:	54002400 	.word	0x54002400
 8008000:	40013800 	.word	0x40013800
 8008004:	40004400 	.word	0x40004400
 8008008:	40004800 	.word	0x40004800
 800800c:	40004c00 	.word	0x40004c00
 8008010:	40005000 	.word	0x40005000
 8008014:	40006400 	.word	0x40006400
 8008018:	08009104 	.word	0x08009104
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800801c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800801e:	69db      	ldr	r3, [r3, #28]
 8008020:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008024:	d13c      	bne.n	80080a0 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008028:	2200      	movs	r2, #0
 800802a:	603b      	str	r3, [r7, #0]
 800802c:	607a      	str	r2, [r7, #4]
 800802e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008032:	f7fe f8b5 	bl	80061a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008036:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008038:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800803a:	2b00      	cmp	r3, #0
 800803c:	d05e      	beq.n	80080fc <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800803e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008042:	4a39      	ldr	r2, [pc, #228]	@ (8008128 <UART_SetConfig+0x358>)
 8008044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008048:	461a      	mov	r2, r3
 800804a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800804c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008050:	005a      	lsls	r2, r3, #1
 8008052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	085b      	lsrs	r3, r3, #1
 8008058:	441a      	add	r2, r3
 800805a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008062:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008066:	2b0f      	cmp	r3, #15
 8008068:	d916      	bls.n	8008098 <UART_SetConfig+0x2c8>
 800806a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800806c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008070:	d212      	bcs.n	8008098 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008074:	b29b      	uxth	r3, r3
 8008076:	f023 030f 	bic.w	r3, r3, #15
 800807a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800807c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800807e:	085b      	lsrs	r3, r3, #1
 8008080:	b29b      	uxth	r3, r3
 8008082:	f003 0307 	and.w	r3, r3, #7
 8008086:	b29a      	uxth	r2, r3
 8008088:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800808a:	4313      	orrs	r3, r2
 800808c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800808e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008094:	60da      	str	r2, [r3, #12]
 8008096:	e031      	b.n	80080fc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800809e:	e02d      	b.n	80080fc <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80080a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080a2:	2200      	movs	r2, #0
 80080a4:	469a      	mov	sl, r3
 80080a6:	4693      	mov	fp, r2
 80080a8:	4650      	mov	r0, sl
 80080aa:	4659      	mov	r1, fp
 80080ac:	f7fe f878 	bl	80061a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80080b0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80080b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d021      	beq.n	80080fc <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080bc:	4a1a      	ldr	r2, [pc, #104]	@ (8008128 <UART_SetConfig+0x358>)
 80080be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080c2:	461a      	mov	r2, r3
 80080c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80080ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	085b      	lsrs	r3, r3, #1
 80080d0:	441a      	add	r2, r3
 80080d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080de:	2b0f      	cmp	r3, #15
 80080e0:	d909      	bls.n	80080f6 <UART_SetConfig+0x326>
 80080e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080e8:	d205      	bcs.n	80080f6 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	60da      	str	r2, [r3, #12]
 80080f4:	e002      	b.n	80080fc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080fe:	2201      	movs	r2, #1
 8008100:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008106:	2201      	movs	r2, #1
 8008108:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800810c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800810e:	2200      	movs	r2, #0
 8008110:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008114:	2200      	movs	r2, #0
 8008116:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008118:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800811c:	4618      	mov	r0, r3
 800811e:	3750      	adds	r7, #80	@ 0x50
 8008120:	46bd      	mov	sp, r7
 8008122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008126:	bf00      	nop
 8008128:	08009104 	.word	0x08009104

0800812c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008138:	f003 0308 	and.w	r3, r3, #8
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00a      	beq.n	8008156 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	430a      	orrs	r2, r1
 8008154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00a      	beq.n	8008178 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800817c:	f003 0302 	and.w	r3, r3, #2
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00a      	beq.n	800819a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	430a      	orrs	r2, r1
 8008198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800819e:	f003 0304 	and.w	r3, r3, #4
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00a      	beq.n	80081bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c0:	f003 0310 	and.w	r3, r3, #16
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00a      	beq.n	80081de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e2:	f003 0320 	and.w	r3, r3, #32
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00a      	beq.n	8008200 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	430a      	orrs	r2, r1
 80081fe:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008208:	2b00      	cmp	r3, #0
 800820a:	d01a      	beq.n	8008242 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	430a      	orrs	r2, r1
 8008220:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008226:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800822a:	d10a      	bne.n	8008242 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	430a      	orrs	r2, r1
 8008240:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00a      	beq.n	8008264 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	430a      	orrs	r2, r1
 8008262:	605a      	str	r2, [r3, #4]
  }
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b098      	sub	sp, #96	@ 0x60
 8008274:	af02      	add	r7, sp, #8
 8008276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008280:	f7f9 fb5c 	bl	800193c <HAL_GetTick>
 8008284:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0308 	and.w	r3, r3, #8
 8008290:	2b08      	cmp	r3, #8
 8008292:	d12f      	bne.n	80082f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008294:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800829c:	2200      	movs	r2, #0
 800829e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f88e 	bl	80083c4 <UART_WaitOnFlagUntilTimeout>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d022      	beq.n	80082f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b6:	e853 3f00 	ldrex	r3, [r3]
 80082ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	461a      	mov	r2, r3
 80082ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80082ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082d4:	e841 2300 	strex	r3, r2, [r1]
 80082d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1e6      	bne.n	80082ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2220      	movs	r2, #32
 80082e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e063      	b.n	80083bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0304 	and.w	r3, r3, #4
 80082fe:	2b04      	cmp	r3, #4
 8008300:	d149      	bne.n	8008396 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008302:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800830a:	2200      	movs	r2, #0
 800830c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f857 	bl	80083c4 <UART_WaitOnFlagUntilTimeout>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d03c      	beq.n	8008396 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008324:	e853 3f00 	ldrex	r3, [r3]
 8008328:	623b      	str	r3, [r7, #32]
   return(result);
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008330:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	461a      	mov	r2, r3
 8008338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800833a:	633b      	str	r3, [r7, #48]	@ 0x30
 800833c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008342:	e841 2300 	strex	r3, r2, [r1]
 8008346:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1e6      	bne.n	800831c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	3308      	adds	r3, #8
 8008354:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	e853 3f00 	ldrex	r3, [r3]
 800835c:	60fb      	str	r3, [r7, #12]
   return(result);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f023 0301 	bic.w	r3, r3, #1
 8008364:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	3308      	adds	r3, #8
 800836c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800836e:	61fa      	str	r2, [r7, #28]
 8008370:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008372:	69b9      	ldr	r1, [r7, #24]
 8008374:	69fa      	ldr	r2, [r7, #28]
 8008376:	e841 2300 	strex	r3, r2, [r1]
 800837a:	617b      	str	r3, [r7, #20]
   return(result);
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1e5      	bne.n	800834e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2220      	movs	r2, #32
 8008386:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e012      	b.n	80083bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2220      	movs	r2, #32
 800839a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2220      	movs	r2, #32
 80083a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3758      	adds	r7, #88	@ 0x58
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	603b      	str	r3, [r7, #0]
 80083d0:	4613      	mov	r3, r2
 80083d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083d4:	e04f      	b.n	8008476 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083dc:	d04b      	beq.n	8008476 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083de:	f7f9 faad 	bl	800193c <HAL_GetTick>
 80083e2:	4602      	mov	r2, r0
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	69ba      	ldr	r2, [r7, #24]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d302      	bcc.n	80083f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d101      	bne.n	80083f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083f4:	2303      	movs	r3, #3
 80083f6:	e04e      	b.n	8008496 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0304 	and.w	r3, r3, #4
 8008402:	2b00      	cmp	r3, #0
 8008404:	d037      	beq.n	8008476 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	2b80      	cmp	r3, #128	@ 0x80
 800840a:	d034      	beq.n	8008476 <UART_WaitOnFlagUntilTimeout+0xb2>
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	2b40      	cmp	r3, #64	@ 0x40
 8008410:	d031      	beq.n	8008476 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	69db      	ldr	r3, [r3, #28]
 8008418:	f003 0308 	and.w	r3, r3, #8
 800841c:	2b08      	cmp	r3, #8
 800841e:	d110      	bne.n	8008442 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2208      	movs	r2, #8
 8008426:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 f838 	bl	800849e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2208      	movs	r2, #8
 8008432:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e029      	b.n	8008496 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69db      	ldr	r3, [r3, #28]
 8008448:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800844c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008450:	d111      	bne.n	8008476 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800845a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 f81e 	bl	800849e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2220      	movs	r2, #32
 8008466:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e00f      	b.n	8008496 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	69da      	ldr	r2, [r3, #28]
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	4013      	ands	r3, r2
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	429a      	cmp	r2, r3
 8008484:	bf0c      	ite	eq
 8008486:	2301      	moveq	r3, #1
 8008488:	2300      	movne	r3, #0
 800848a:	b2db      	uxtb	r3, r3
 800848c:	461a      	mov	r2, r3
 800848e:	79fb      	ldrb	r3, [r7, #7]
 8008490:	429a      	cmp	r2, r3
 8008492:	d0a0      	beq.n	80083d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800849e:	b480      	push	{r7}
 80084a0:	b095      	sub	sp, #84	@ 0x54
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ae:	e853 3f00 	ldrex	r3, [r3]
 80084b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80084b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	461a      	mov	r2, r3
 80084c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80084c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80084ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80084cc:	e841 2300 	strex	r3, r2, [r1]
 80084d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80084d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e6      	bne.n	80084a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3308      	adds	r3, #8
 80084de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e0:	6a3b      	ldr	r3, [r7, #32]
 80084e2:	e853 3f00 	ldrex	r3, [r3]
 80084e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084ee:	f023 0301 	bic.w	r3, r3, #1
 80084f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3308      	adds	r3, #8
 80084fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80084fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008500:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008504:	e841 2300 	strex	r3, r2, [r1]
 8008508:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800850a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1e3      	bne.n	80084d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008514:	2b01      	cmp	r3, #1
 8008516:	d118      	bne.n	800854a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	e853 3f00 	ldrex	r3, [r3]
 8008524:	60bb      	str	r3, [r7, #8]
   return(result);
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	f023 0310 	bic.w	r3, r3, #16
 800852c:	647b      	str	r3, [r7, #68]	@ 0x44
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008536:	61bb      	str	r3, [r7, #24]
 8008538:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853a:	6979      	ldr	r1, [r7, #20]
 800853c:	69ba      	ldr	r2, [r7, #24]
 800853e:	e841 2300 	strex	r3, r2, [r1]
 8008542:	613b      	str	r3, [r7, #16]
   return(result);
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1e6      	bne.n	8008518 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2220      	movs	r2, #32
 800854e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800855e:	bf00      	nop
 8008560:	3754      	adds	r7, #84	@ 0x54
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr

0800856a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800856a:	b480      	push	{r7}
 800856c:	b085      	sub	sp, #20
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008578:	2b01      	cmp	r3, #1
 800857a:	d101      	bne.n	8008580 <HAL_UARTEx_DisableFifoMode+0x16>
 800857c:	2302      	movs	r3, #2
 800857e:	e027      	b.n	80085d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2224      	movs	r2, #36	@ 0x24
 800858c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f022 0201 	bic.w	r2, r2, #1
 80085a6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80085ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2220      	movs	r2, #32
 80085c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d101      	bne.n	80085f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085f0:	2302      	movs	r3, #2
 80085f2:	e02d      	b.n	8008650 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2224      	movs	r2, #36	@ 0x24
 8008600:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f022 0201 	bic.w	r2, r2, #1
 800861a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	430a      	orrs	r2, r1
 800862e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 f84f 	bl	80086d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2220      	movs	r2, #32
 8008642:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008668:	2b01      	cmp	r3, #1
 800866a:	d101      	bne.n	8008670 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800866c:	2302      	movs	r3, #2
 800866e:	e02d      	b.n	80086cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2224      	movs	r2, #36	@ 0x24
 800867c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f022 0201 	bic.w	r2, r2, #1
 8008696:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	430a      	orrs	r2, r1
 80086aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f811 	bl	80086d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2220      	movs	r2, #32
 80086be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d108      	bne.n	80086f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80086f4:	e031      	b.n	800875a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80086f6:	2308      	movs	r3, #8
 80086f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086fa:	2308      	movs	r3, #8
 80086fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	0e5b      	lsrs	r3, r3, #25
 8008706:	b2db      	uxtb	r3, r3
 8008708:	f003 0307 	and.w	r3, r3, #7
 800870c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	0f5b      	lsrs	r3, r3, #29
 8008716:	b2db      	uxtb	r3, r3
 8008718:	f003 0307 	and.w	r3, r3, #7
 800871c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800871e:	7bbb      	ldrb	r3, [r7, #14]
 8008720:	7b3a      	ldrb	r2, [r7, #12]
 8008722:	4911      	ldr	r1, [pc, #68]	@ (8008768 <UARTEx_SetNbDataToProcess+0x94>)
 8008724:	5c8a      	ldrb	r2, [r1, r2]
 8008726:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800872a:	7b3a      	ldrb	r2, [r7, #12]
 800872c:	490f      	ldr	r1, [pc, #60]	@ (800876c <UARTEx_SetNbDataToProcess+0x98>)
 800872e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008730:	fb93 f3f2 	sdiv	r3, r3, r2
 8008734:	b29a      	uxth	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800873c:	7bfb      	ldrb	r3, [r7, #15]
 800873e:	7b7a      	ldrb	r2, [r7, #13]
 8008740:	4909      	ldr	r1, [pc, #36]	@ (8008768 <UARTEx_SetNbDataToProcess+0x94>)
 8008742:	5c8a      	ldrb	r2, [r1, r2]
 8008744:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008748:	7b7a      	ldrb	r2, [r7, #13]
 800874a:	4908      	ldr	r1, [pc, #32]	@ (800876c <UARTEx_SetNbDataToProcess+0x98>)
 800874c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800874e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008752:	b29a      	uxth	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800875a:	bf00      	nop
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	0800911c 	.word	0x0800911c
 800876c:	08009124 	.word	0x08009124

08008770 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e016      	b.n	80087b0 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f7f8 ff30 	bl	80015e8 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	68da      	ldr	r2, [r3, #12]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008794:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	691a      	ldr	r2, [r3, #16]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	ea42 0103 	orr.w	r1, r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	689a      	ldr	r2, [r3, #8]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	430a      	orrs	r2, r1
 80087ac:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80087b8:	b084      	sub	sp, #16
 80087ba:	b480      	push	{r7}
 80087bc:	b085      	sub	sp, #20
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
 80087c2:	f107 001c 	add.w	r0, r7, #28
 80087c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80087ca:	2300      	movs	r3, #0
 80087cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80087ce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80087d0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80087d2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80087d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 80087d6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80087d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 80087da:	431a      	orrs	r2, r3
             Init.ClockDiv
 80087dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 80087de:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	685a      	ldr	r2, [r3, #4]
 80087ea:	4b07      	ldr	r3, [pc, #28]	@ (8008808 <SDMMC_Init+0x50>)
 80087ec:	4013      	ands	r3, r2
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	431a      	orrs	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3714      	adds	r7, #20
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	b004      	add	sp, #16
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	ffc02c00 	.word	0xffc02c00

0800880c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800881a:	4618      	mov	r0, r3
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f043 0203 	orr.w	r2, r3, #3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0303 	and.w	r3, r3, #3
}
 8008858:	4618      	mov	r0, r3
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800886e:	2300      	movs	r3, #0
 8008870:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008882:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008888:	431a      	orrs	r2, r3
                       Command->CPSM);
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800888e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	4313      	orrs	r3, r2
 8008894:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68da      	ldr	r2, [r3, #12]
 800889a:	4b06      	ldr	r3, [pc, #24]	@ (80088b4 <SDMMC_SendCommand+0x50>)
 800889c:	4013      	ands	r3, r2
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	431a      	orrs	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3714      	adds	r7, #20
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr
 80088b4:	fffee0c0 	.word	0xfffee0c0

080088b8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	b2db      	uxtb	r3, r3
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b085      	sub	sp, #20
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	3314      	adds	r3, #20
 80088e0:	461a      	mov	r2, r3
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	4413      	add	r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3714      	adds	r7, #20
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008902:	2300      	movs	r3, #0
 8008904:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	685a      	ldr	r2, [r3, #4]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800891e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008924:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800892a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	4313      	orrs	r3, r2
 8008930:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008936:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	431a      	orrs	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008942:	2300      	movs	r3, #0

}
 8008944:	4618      	mov	r0, r3
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b088      	sub	sp, #32
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800895e:	2310      	movs	r3, #16
 8008960:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008962:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008966:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008968:	2300      	movs	r3, #0
 800896a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800896c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008970:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008972:	f107 0308 	add.w	r3, r7, #8
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7ff ff73 	bl	8008864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800897e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008982:	2110      	movs	r1, #16
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 f935 	bl	8008bf4 <SDMMC_GetCmdResp1>
 800898a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800898c:	69fb      	ldr	r3, [r7, #28]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3720      	adds	r7, #32
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b088      	sub	sp, #32
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
 800899e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80089a4:	2307      	movs	r3, #7
 80089a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80089ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089ae:	2300      	movs	r3, #0
 80089b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80089b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089b8:	f107 0308 	add.w	r3, r7, #8
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7ff ff50 	bl	8008864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80089c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089c8:	2107      	movs	r1, #7
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f912 	bl	8008bf4 <SDMMC_GetCmdResp1>
 80089d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089d2:	69fb      	ldr	r3, [r7, #28]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3720      	adds	r7, #32
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b088      	sub	sp, #32
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80089e4:	2300      	movs	r3, #0
 80089e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80089e8:	2300      	movs	r3, #0
 80089ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80089ec:	2300      	movs	r3, #0
 80089ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089f0:	2300      	movs	r3, #0
 80089f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80089f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089fa:	f107 0308 	add.w	r3, r7, #8
 80089fe:	4619      	mov	r1, r3
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7ff ff2f 	bl	8008864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fa70 	bl	8008eec <SDMMC_GetCmdError>
 8008a0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a0e:	69fb      	ldr	r3, [r7, #28]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3720      	adds	r7, #32
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b088      	sub	sp, #32
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008a20:	2300      	movs	r3, #0
 8008a22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008a24:	2302      	movs	r3, #2
 8008a26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008a28:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008a2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008a36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a38:	f107 0308 	add.w	r3, r7, #8
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f7ff ff10 	bl	8008864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f9c7 	bl	8008dd8 <SDMMC_GetCmdResp2>
 8008a4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a4c:	69fb      	ldr	r3, [r7, #28]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3720      	adds	r7, #32
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b088      	sub	sp, #32
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
 8008a5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008a64:	2309      	movs	r3, #9
 8008a66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008a68:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008a6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008a76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a78:	f107 0308 	add.w	r3, r7, #8
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7ff fef0 	bl	8008864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f9a7 	bl	8008dd8 <SDMMC_GetCmdResp2>
 8008a8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a8c:	69fb      	ldr	r3, [r7, #28]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3720      	adds	r7, #32
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b088      	sub	sp, #32
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 8008aa2:	887b      	ldrh	r3, [r7, #2]
 8008aa4:	041b      	lsls	r3, r3, #16
 8008aa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008aac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ab0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ab6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008aba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008abc:	f107 0308 	add.w	r3, r7, #8
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f7ff fece 	bl	8008864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 8008ac8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008acc:	2103      	movs	r1, #3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f890 	bl	8008bf4 <SDMMC_GetCmdResp1>
 8008ad4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ad6:	69fb      	ldr	r3, [r7, #28]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3720      	adds	r7, #32
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b088      	sub	sp, #32
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008aee:	230d      	movs	r3, #13
 8008af0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008af2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008af6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008af8:	2300      	movs	r3, #0
 8008afa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008afc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008b00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b02:	f107 0308 	add.w	r3, r7, #8
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7ff feab 	bl	8008864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b12:	210d      	movs	r1, #13
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f86d 	bl	8008bf4 <SDMMC_GetCmdResp1>
 8008b1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b1c:	69fb      	ldr	r3, [r7, #28]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3720      	adds	r7, #32
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b088      	sub	sp, #32
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
 8008b2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 8008b34:	2301      	movs	r3, #1
 8008b36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008b3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008b46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b48:	f107 0308 	add.w	r3, r7, #8
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7ff fe88 	bl	8008864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f989 	bl	8008e6c <SDMMC_GetCmdResp3>
 8008b5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b5c:	69fb      	ldr	r3, [r7, #28]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3720      	adds	r7, #32
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b088      	sub	sp, #32
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8008b74:	2306      	movs	r3, #6
 8008b76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008b7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008b86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b88:	f107 0308 	add.w	r3, r7, #8
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f7ff fe68 	bl	8008864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 8008b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b98:	2106      	movs	r1, #6
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f82a 	bl	8008bf4 <SDMMC_GetCmdResp1>
 8008ba0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ba2:	69fb      	ldr	r3, [r7, #28]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3720      	adds	r7, #32
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b088      	sub	sp, #32
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008bba:	2308      	movs	r3, #8
 8008bbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008bc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008bcc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bce:	f107 0308 	add.w	r3, r7, #8
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f7ff fe45 	bl	8008864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 8008bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bde:	2108      	movs	r1, #8
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f807 	bl	8008bf4 <SDMMC_GetCmdResp1>
 8008be6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008be8:	69fb      	ldr	r3, [r7, #28]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3720      	adds	r7, #32
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
	...

08008bf4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b088      	sub	sp, #32
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	607a      	str	r2, [r7, #4]
 8008c00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008c02:	4b70      	ldr	r3, [pc, #448]	@ (8008dc4 <SDMMC_GetCmdResp1+0x1d0>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a70      	ldr	r2, [pc, #448]	@ (8008dc8 <SDMMC_GetCmdResp1+0x1d4>)
 8008c08:	fba2 2303 	umull	r2, r3, r2, r3
 8008c0c:	0a5a      	lsrs	r2, r3, #9
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	fb02 f303 	mul.w	r3, r2, r3
 8008c14:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	1e5a      	subs	r2, r3, #1
 8008c1a:	61fa      	str	r2, [r7, #28]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d102      	bne.n	8008c26 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008c24:	e0c9      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c2a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	4b67      	ldr	r3, [pc, #412]	@ (8008dcc <SDMMC_GetCmdResp1+0x1d8>)
 8008c30:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d0ef      	beq.n	8008c16 <SDMMC_GetCmdResp1+0x22>
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1ea      	bne.n	8008c16 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c44:	f003 0304 	and.w	r3, r3, #4
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d004      	beq.n	8008c56 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2204      	movs	r2, #4
 8008c50:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c52:	2304      	movs	r3, #4
 8008c54:	e0b1      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d004      	beq.n	8008c6c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2201      	movs	r2, #1
 8008c66:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e0a6      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	4a58      	ldr	r2, [pc, #352]	@ (8008dd0 <SDMMC_GetCmdResp1+0x1dc>)
 8008c70:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f7ff fe20 	bl	80088b8 <SDMMC_GetCommandResponse>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	7afb      	ldrb	r3, [r7, #11]
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d001      	beq.n	8008c86 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e099      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008c86:	2100      	movs	r1, #0
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f7ff fe22 	bl	80088d2 <SDMMC_GetResponse>
 8008c8e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	4b50      	ldr	r3, [pc, #320]	@ (8008dd4 <SDMMC_GetCmdResp1+0x1e0>)
 8008c94:	4013      	ands	r3, r2
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	e08d      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	da02      	bge.n	8008caa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008ca4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008ca8:	e087      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d001      	beq.n	8008cb8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008cb4:	2340      	movs	r3, #64	@ 0x40
 8008cb6:	e080      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d001      	beq.n	8008cc6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008cc2:	2380      	movs	r3, #128	@ 0x80
 8008cc4:	e079      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008cd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008cd4:	e071      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d002      	beq.n	8008ce6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008ce0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ce4:	e069      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008cf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cf4:	e061      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008d00:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008d04:	e059      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d002      	beq.n	8008d16 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008d10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008d14:	e051      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008d20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008d24:	e049      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d002      	beq.n	8008d36 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008d30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008d34:	e041      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008d40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d44:	e039      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d002      	beq.n	8008d56 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008d50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008d54:	e031      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d002      	beq.n	8008d66 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008d60:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8008d64:	e029      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d002      	beq.n	8008d76 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008d70:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008d74:	e021      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d002      	beq.n	8008d86 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008d80:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008d84:	e019      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d002      	beq.n	8008d96 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008d90:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008d94:	e011      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d002      	beq.n	8008da6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008da0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008da4:	e009      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f003 0308 	and.w	r3, r3, #8
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008db0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8008db4:	e001      	b.n	8008dba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008db6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3720      	adds	r7, #32
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	20000000 	.word	0x20000000
 8008dc8:	10624dd3 	.word	0x10624dd3
 8008dcc:	00200045 	.word	0x00200045
 8008dd0:	002000c5 	.word	0x002000c5
 8008dd4:	fdffe008 	.word	0xfdffe008

08008dd8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008de0:	4b1f      	ldr	r3, [pc, #124]	@ (8008e60 <SDMMC_GetCmdResp2+0x88>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a1f      	ldr	r2, [pc, #124]	@ (8008e64 <SDMMC_GetCmdResp2+0x8c>)
 8008de6:	fba2 2303 	umull	r2, r3, r2, r3
 8008dea:	0a5b      	lsrs	r3, r3, #9
 8008dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008df0:	fb02 f303 	mul.w	r3, r2, r3
 8008df4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	1e5a      	subs	r2, r3, #1
 8008dfa:	60fa      	str	r2, [r7, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d102      	bne.n	8008e06 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e00:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008e04:	e026      	b.n	8008e54 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e0a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d0ef      	beq.n	8008df6 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1ea      	bne.n	8008df6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e24:	f003 0304 	and.w	r3, r3, #4
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d004      	beq.n	8008e36 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2204      	movs	r2, #4
 8008e30:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e32:	2304      	movs	r3, #4
 8008e34:	e00e      	b.n	8008e54 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d004      	beq.n	8008e4c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e003      	b.n	8008e54 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a06      	ldr	r2, [pc, #24]	@ (8008e68 <SDMMC_GetCmdResp2+0x90>)
 8008e50:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	20000000 	.word	0x20000000
 8008e64:	10624dd3 	.word	0x10624dd3
 8008e68:	002000c5 	.word	0x002000c5

08008e6c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008e74:	4b1a      	ldr	r3, [pc, #104]	@ (8008ee0 <SDMMC_GetCmdResp3+0x74>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a1a      	ldr	r2, [pc, #104]	@ (8008ee4 <SDMMC_GetCmdResp3+0x78>)
 8008e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e7e:	0a5b      	lsrs	r3, r3, #9
 8008e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e84:	fb02 f303 	mul.w	r3, r2, r3
 8008e88:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	1e5a      	subs	r2, r3, #1
 8008e8e:	60fa      	str	r2, [r7, #12]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d102      	bne.n	8008e9a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008e98:	e01b      	b.n	8008ed2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e9e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d0ef      	beq.n	8008e8a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1ea      	bne.n	8008e8a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eb8:	f003 0304 	and.w	r3, r3, #4
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d004      	beq.n	8008eca <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2204      	movs	r2, #4
 8008ec4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ec6:	2304      	movs	r3, #4
 8008ec8:	e003      	b.n	8008ed2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a06      	ldr	r2, [pc, #24]	@ (8008ee8 <SDMMC_GetCmdResp3+0x7c>)
 8008ece:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	20000000 	.word	0x20000000
 8008ee4:	10624dd3 	.word	0x10624dd3
 8008ee8:	002000c5 	.word	0x002000c5

08008eec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008ef4:	4b11      	ldr	r3, [pc, #68]	@ (8008f3c <SDMMC_GetCmdError+0x50>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a11      	ldr	r2, [pc, #68]	@ (8008f40 <SDMMC_GetCmdError+0x54>)
 8008efa:	fba2 2303 	umull	r2, r3, r2, r3
 8008efe:	0a5b      	lsrs	r3, r3, #9
 8008f00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f04:	fb02 f303 	mul.w	r3, r2, r3
 8008f08:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	1e5a      	subs	r2, r3, #1
 8008f0e:	60fa      	str	r2, [r7, #12]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d102      	bne.n	8008f1a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f14:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008f18:	e009      	b.n	8008f2e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d0f1      	beq.n	8008f0a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a06      	ldr	r2, [pc, #24]	@ (8008f44 <SDMMC_GetCmdError+0x58>)
 8008f2a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	20000000 	.word	0x20000000
 8008f40:	10624dd3 	.word	0x10624dd3
 8008f44:	002000c5 	.word	0x002000c5

08008f48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f54:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f60:	f043 0201 	orr.w	r2, r3, #1
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	370c      	adds	r7, #12
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr

08008f76 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8008f76:	b084      	sub	sp, #16
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	f107 001c 	add.w	r0, r7, #28
 8008f84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e008      	b.n	8008fa4 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f7ff ffd8 	bl	8008f48 <USB_CoreReset>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8008fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fae:	b004      	add	sp, #16
 8008fb0:	4770      	bx	lr

08008fb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b085      	sub	sp, #20
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008fba:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008fbe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	43db      	mvns	r3, r3
 8008fc8:	401a      	ands	r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3714      	adds	r7, #20
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8008fe8:	78fb      	ldrb	r3, [r7, #3]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d106      	bne.n	8008ffc <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	641a      	str	r2, [r3, #64]	@ 0x40
 8008ffa:	e00b      	b.n	8009014 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8008ffc:	78fb      	ldrb	r3, [r7, #3]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d106      	bne.n	8009010 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009006:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	641a      	str	r2, [r3, #64]	@ 0x40
 800900e:	e001      	b.n	8009014 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e000      	b.n	8009016 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	370c      	adds	r7, #12
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <USB_HostInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8009022:	b084      	sub	sp, #16
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	f107 0014 	add.w	r0, r7, #20
 8009030:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(cfg);

  /* Clear All Pending Interrupt */
  USBx->ISTR = 0U;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable all interrupts */
  USBx->CNTR &= ~(USB_CNTR_CTRM | USB_CNTR_PMAOVRM | USB_CNTR_ERRM |
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800903e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	6413      	str	r3, [r2, #64]	@ 0x40
                  USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_DCON |
                  USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_L1REQM);

  /* Clear All Pending Interrupt */
  USBx->ISTR = 0U;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the PullDown on the PHY */
  USBx->BCDR |= USB_BCDR_DPPD;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009054:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Enable Global interrupt */
  USBx->CNTR |= (USB_CNTR_CTRM | USB_CNTR_PMAOVRM | USB_CNTR_ERRM |
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009060:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 8009064:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	6413      	str	r3, [r2, #64]	@ 0x40
                 USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_DCON |
                 USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_L1REQM);

  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	b004      	add	sp, #16
 800907a:	4770      	bx	lr

0800907c <memset>:
 800907c:	4402      	add	r2, r0
 800907e:	4603      	mov	r3, r0
 8009080:	4293      	cmp	r3, r2
 8009082:	d100      	bne.n	8009086 <memset+0xa>
 8009084:	4770      	bx	lr
 8009086:	f803 1b01 	strb.w	r1, [r3], #1
 800908a:	e7f9      	b.n	8009080 <memset+0x4>

0800908c <__libc_init_array>:
 800908c:	b570      	push	{r4, r5, r6, lr}
 800908e:	4d0d      	ldr	r5, [pc, #52]	@ (80090c4 <__libc_init_array+0x38>)
 8009090:	2600      	movs	r6, #0
 8009092:	4c0d      	ldr	r4, [pc, #52]	@ (80090c8 <__libc_init_array+0x3c>)
 8009094:	1b64      	subs	r4, r4, r5
 8009096:	10a4      	asrs	r4, r4, #2
 8009098:	42a6      	cmp	r6, r4
 800909a:	d109      	bne.n	80090b0 <__libc_init_array+0x24>
 800909c:	4d0b      	ldr	r5, [pc, #44]	@ (80090cc <__libc_init_array+0x40>)
 800909e:	2600      	movs	r6, #0
 80090a0:	4c0b      	ldr	r4, [pc, #44]	@ (80090d0 <__libc_init_array+0x44>)
 80090a2:	f000 f817 	bl	80090d4 <_init>
 80090a6:	1b64      	subs	r4, r4, r5
 80090a8:	10a4      	asrs	r4, r4, #2
 80090aa:	42a6      	cmp	r6, r4
 80090ac:	d105      	bne.n	80090ba <__libc_init_array+0x2e>
 80090ae:	bd70      	pop	{r4, r5, r6, pc}
 80090b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80090b4:	3601      	adds	r6, #1
 80090b6:	4798      	blx	r3
 80090b8:	e7ee      	b.n	8009098 <__libc_init_array+0xc>
 80090ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80090be:	3601      	adds	r6, #1
 80090c0:	4798      	blx	r3
 80090c2:	e7f2      	b.n	80090aa <__libc_init_array+0x1e>
 80090c4:	08009134 	.word	0x08009134
 80090c8:	08009134 	.word	0x08009134
 80090cc:	08009134 	.word	0x08009134
 80090d0:	08009138 	.word	0x08009138

080090d4 <_init>:
 80090d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d6:	bf00      	nop
 80090d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090da:	bc08      	pop	{r3}
 80090dc:	469e      	mov	lr, r3
 80090de:	4770      	bx	lr

080090e0 <_fini>:
 80090e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e2:	bf00      	nop
 80090e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e6:	bc08      	pop	{r3}
 80090e8:	469e      	mov	lr, r3
 80090ea:	4770      	bx	lr
